
DTN_UART_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10006c90  10006c90  00026c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  10006ce0  10006ce0  00026ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10006d14  10006d14  00030068  2**0
                  CONTENTS
  5 .ARM          00000000  10006d14  10006d14  00030068  2**0
                  CONTENTS
  6 .preinit_array 00000000  10006d14  10006d14  00030068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10006d14  10006d14  00026d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10006d18  10006d18  00026d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000068  10020000  10006d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  10020068  10020068  00030068  2**0
                  CONTENTS
 11 .bss          00000204  10020068  10006d84  00030068  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002026c  10006f88  00030068  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001040c  00000000  00000000  000300db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001bef  00000000  00000000  000404e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000009a8  00000000  00000000  000420d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000072f  00000000  00000000  00042a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000460ef  00000000  00000000  000431af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000f2f2  00000000  00000000  0008929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001c864c  00000000  00000000  00098590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002c18  00000000  00000000  00260bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  002637f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020068 	.word	0x10020068
1000001c:	00000000 	.word	0x00000000
10000020:	10006c78 	.word	0x10006c78

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	1002006c 	.word	0x1002006c
1000003c:	10006c78 	.word	0x10006c78

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
1000008c:	b480      	push	{r7}
1000008e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
10000090:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000094:	2240      	movs	r2, #64	; 0x40
10000096:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
1000009a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000009e:	2202      	movs	r2, #2
100000a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

}
100000a4:	bf00      	nop
100000a6:	46bd      	mov	sp, r7
100000a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100000ac:	4770      	bx	lr
	...

100000b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100000b0:	b580      	push	{r7, lr}
100000b2:	b086      	sub	sp, #24
100000b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buffer[20] = {};
100000b6:	2300      	movs	r3, #0
100000b8:	607b      	str	r3, [r7, #4]
100000ba:	f107 0308 	add.w	r3, r7, #8
100000be:	2200      	movs	r2, #0
100000c0:	601a      	str	r2, [r3, #0]
100000c2:	605a      	str	r2, [r3, #4]
100000c4:	609a      	str	r2, [r3, #8]
100000c6:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100000c8:	f000 fa9c 	bl	10000604 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
100000cc:	4b0a      	ldr	r3, [pc, #40]	; (100000f8 <main+0x48>)
100000ce:	681b      	ldr	r3, [r3, #0]
100000d0:	f003 0307 	and.w	r3, r3, #7
100000d4:	2b04      	cmp	r3, #4
100000d6:	d101      	bne.n	100000dc <main+0x2c>
  {
    /* Configure the system clock */
    SystemClock_Config();
100000d8:	f000 f816 	bl	10000108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100000dc:	f7ff ffd6 	bl	1000008c <MX_GPIO_Init>
  MX_UART4_Init();
100000e0:	f000 f9be 	bl	10000460 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  printf("\n uart4 test....\n");
100000e4:	4805      	ldr	r0, [pc, #20]	; (100000fc <main+0x4c>)
100000e6:	f006 fa31 	bl	1000654c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	HAL_UART_Transmit(&huart4,"uart4 test..." , sizeof("uart4 test..."), 100);
100000ea:	2364      	movs	r3, #100	; 0x64
100000ec:	220e      	movs	r2, #14
100000ee:	4904      	ldr	r1, [pc, #16]	; (10000100 <main+0x50>)
100000f0:	4804      	ldr	r0, [pc, #16]	; (10000104 <main+0x54>)
100000f2:	f004 fd53 	bl	10004b9c <HAL_UART_Transmit>
100000f6:	e7f8      	b.n	100000ea <main+0x3a>
100000f8:	50020000 	.word	0x50020000
100000fc:	10006ce0 	.word	0x10006ce0
10000100:	10006cf4 	.word	0x10006cf4
10000104:	10020088 	.word	0x10020088

10000108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000108:	b580      	push	{r7, lr}
1000010a:	b0d2      	sub	sp, #328	; 0x148
1000010c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
1000010e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000112:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000116:	4618      	mov	r0, r3
10000118:	f44f 738a 	mov.w	r3, #276	; 0x114
1000011c:	461a      	mov	r2, r3
1000011e:	2100      	movs	r1, #0
10000120:	f006 faf4 	bl	1000670c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000124:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000128:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000012c:	4618      	mov	r0, r3
1000012e:	2330      	movs	r3, #48	; 0x30
10000130:	461a      	mov	r2, r3
10000132:	2100      	movs	r1, #0
10000134:	f006 faea 	bl	1000670c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
10000138:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000013c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000140:	220a      	movs	r2, #10
10000142:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000144:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000148:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000014c:	2201      	movs	r2, #1
1000014e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000150:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000154:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000158:	2200      	movs	r2, #0
1000015a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
1000015c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000160:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000164:	2201      	movs	r2, #1
10000166:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000168:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000016c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000170:	2200      	movs	r2, #0
10000172:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
10000174:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000178:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000017c:	2200      	movs	r2, #0
1000017e:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
10000180:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000184:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000188:	2200      	movs	r2, #0
1000018a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
1000018e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000192:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000196:	2200      	movs	r2, #0
10000198:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1000019c:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001a0:	4618      	mov	r0, r3
100001a2:	f000 fd5b 	bl	10000c5c <HAL_RCC_OscConfig>
100001a6:	4603      	mov	r3, r0
100001a8:	2b00      	cmp	r3, #0
100001aa:	d001      	beq.n	100001b0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
100001ac:	f000 f84a 	bl	10000244 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100001b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001b8:	22fe      	movs	r2, #254	; 0xfe
100001ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
100001bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001c0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001c4:	2200      	movs	r2, #0
100001c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100001c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001d0:	2200      	movs	r2, #0
100001d2:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
100001d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001d8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001dc:	2200      	movs	r2, #0
100001de:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
100001e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001e8:	2200      	movs	r2, #0
100001ea:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
100001ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001f4:	2200      	movs	r2, #0
100001f6:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
100001f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000200:	2200      	movs	r2, #0
10000202:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
10000204:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000208:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000020c:	2200      	movs	r2, #0
1000020e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
10000210:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000214:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000218:	2200      	movs	r2, #0
1000021a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
1000021c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000220:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000224:	2200      	movs	r2, #0
10000226:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000228:	1d3b      	adds	r3, r7, #4
1000022a:	4618      	mov	r0, r3
1000022c:	f001 fab4 	bl	10001798 <HAL_RCC_ClockConfig>
10000230:	4603      	mov	r3, r0
10000232:	2b00      	cmp	r3, #0
10000234:	d001      	beq.n	1000023a <SystemClock_Config+0x132>
  {
    Error_Handler();
10000236:	f000 f805 	bl	10000244 <Error_Handler>
  }
}
1000023a:	bf00      	nop
1000023c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000240:	46bd      	mov	sp, r7
10000242:	bd80      	pop	{r7, pc}

10000244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000244:	b480      	push	{r7}
10000246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000248:	b672      	cpsid	i
}
1000024a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
1000024c:	e7fe      	b.n	1000024c <Error_Handler+0x8>

1000024e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1000024e:	b580      	push	{r7, lr}
10000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
10000252:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000256:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000025a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
1000025e:	2200      	movs	r2, #0
10000260:	2101      	movs	r1, #1
10000262:	f06f 000b 	mvn.w	r0, #11
10000266:	f000 fb18 	bl	1000089a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
1000026a:	2200      	movs	r2, #0
1000026c:	2101      	movs	r1, #1
1000026e:	f06f 000a 	mvn.w	r0, #10
10000272:	f000 fb12 	bl	1000089a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000276:	2200      	movs	r2, #0
10000278:	2101      	movs	r1, #1
1000027a:	f06f 0009 	mvn.w	r0, #9
1000027e:	f000 fb0c 	bl	1000089a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10000282:	2200      	movs	r2, #0
10000284:	2101      	movs	r1, #1
10000286:	f06f 0004 	mvn.w	r0, #4
1000028a:	f000 fb06 	bl	1000089a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
1000028e:	2200      	movs	r2, #0
10000290:	2101      	movs	r1, #1
10000292:	f06f 0003 	mvn.w	r0, #3
10000296:	f000 fb00 	bl	1000089a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
1000029a:	2200      	movs	r2, #0
1000029c:	2101      	movs	r1, #1
1000029e:	f06f 0001 	mvn.w	r0, #1
100002a2:	f000 fafa 	bl	1000089a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100002a6:	2200      	movs	r2, #0
100002a8:	2100      	movs	r1, #0
100002aa:	2091      	movs	r0, #145	; 0x91
100002ac:	f000 faf5 	bl	1000089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100002b0:	2091      	movs	r0, #145	; 0x91
100002b2:	f000 fb0e 	bl	100008d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100002b6:	bf00      	nop
100002b8:	bd80      	pop	{r7, pc}

100002ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100002ba:	b480      	push	{r7}
100002bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100002be:	e7fe      	b.n	100002be <NMI_Handler+0x4>

100002c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100002c0:	b480      	push	{r7}
100002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100002c4:	e7fe      	b.n	100002c4 <HardFault_Handler+0x4>

100002c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100002c6:	b480      	push	{r7}
100002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100002ca:	e7fe      	b.n	100002ca <MemManage_Handler+0x4>

100002cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100002cc:	b480      	push	{r7}
100002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100002d0:	e7fe      	b.n	100002d0 <BusFault_Handler+0x4>

100002d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100002d2:	b480      	push	{r7}
100002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100002d6:	e7fe      	b.n	100002d6 <UsageFault_Handler+0x4>

100002d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100002d8:	b480      	push	{r7}
100002da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100002dc:	bf00      	nop
100002de:	46bd      	mov	sp, r7
100002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100002e4:	4770      	bx	lr

100002e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100002e6:	b480      	push	{r7}
100002e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100002ea:	bf00      	nop
100002ec:	46bd      	mov	sp, r7
100002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100002f2:	4770      	bx	lr

100002f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100002f4:	b480      	push	{r7}
100002f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100002f8:	bf00      	nop
100002fa:	46bd      	mov	sp, r7
100002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000300:	4770      	bx	lr

10000302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000302:	b580      	push	{r7, lr}
10000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000306:	f000 f9cd 	bl	100006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000030a:	bf00      	nop
1000030c:	bd80      	pop	{r7, pc}

1000030e <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000030e:	b580      	push	{r7, lr}
10000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000312:	f002 f8ff 	bl	10002514 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000316:	bf00      	nop
10000318:	bd80      	pop	{r7, pc}

1000031a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1000031a:	b580      	push	{r7, lr}
1000031c:	b086      	sub	sp, #24
1000031e:	af00      	add	r7, sp, #0
10000320:	60f8      	str	r0, [r7, #12]
10000322:	60b9      	str	r1, [r7, #8]
10000324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000326:	2300      	movs	r3, #0
10000328:	617b      	str	r3, [r7, #20]
1000032a:	e00a      	b.n	10000342 <_read+0x28>
  {
    *ptr++ = __io_getchar();
1000032c:	f3af 8000 	nop.w
10000330:	4601      	mov	r1, r0
10000332:	68bb      	ldr	r3, [r7, #8]
10000334:	1c5a      	adds	r2, r3, #1
10000336:	60ba      	str	r2, [r7, #8]
10000338:	b2ca      	uxtb	r2, r1
1000033a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000033c:	697b      	ldr	r3, [r7, #20]
1000033e:	3301      	adds	r3, #1
10000340:	617b      	str	r3, [r7, #20]
10000342:	697a      	ldr	r2, [r7, #20]
10000344:	687b      	ldr	r3, [r7, #4]
10000346:	429a      	cmp	r2, r3
10000348:	dbf0      	blt.n	1000032c <_read+0x12>
  }

  return len;
1000034a:	687b      	ldr	r3, [r7, #4]
}
1000034c:	4618      	mov	r0, r3
1000034e:	3718      	adds	r7, #24
10000350:	46bd      	mov	sp, r7
10000352:	bd80      	pop	{r7, pc}

10000354 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10000354:	b580      	push	{r7, lr}
10000356:	b086      	sub	sp, #24
10000358:	af00      	add	r7, sp, #0
1000035a:	60f8      	str	r0, [r7, #12]
1000035c:	60b9      	str	r1, [r7, #8]
1000035e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000360:	2300      	movs	r3, #0
10000362:	617b      	str	r3, [r7, #20]
10000364:	e009      	b.n	1000037a <_write+0x26>
  {
    __io_putchar(*ptr++);
10000366:	68bb      	ldr	r3, [r7, #8]
10000368:	1c5a      	adds	r2, r3, #1
1000036a:	60ba      	str	r2, [r7, #8]
1000036c:	781b      	ldrb	r3, [r3, #0]
1000036e:	4618      	mov	r0, r3
10000370:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000374:	697b      	ldr	r3, [r7, #20]
10000376:	3301      	adds	r3, #1
10000378:	617b      	str	r3, [r7, #20]
1000037a:	697a      	ldr	r2, [r7, #20]
1000037c:	687b      	ldr	r3, [r7, #4]
1000037e:	429a      	cmp	r2, r3
10000380:	dbf1      	blt.n	10000366 <_write+0x12>
  }
  return len;
10000382:	687b      	ldr	r3, [r7, #4]
}
10000384:	4618      	mov	r0, r3
10000386:	3718      	adds	r7, #24
10000388:	46bd      	mov	sp, r7
1000038a:	bd80      	pop	{r7, pc}

1000038c <_close>:

int _close(int file)
{
1000038c:	b480      	push	{r7}
1000038e:	b083      	sub	sp, #12
10000390:	af00      	add	r7, sp, #0
10000392:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10000394:	f04f 33ff 	mov.w	r3, #4294967295
}
10000398:	4618      	mov	r0, r3
1000039a:	370c      	adds	r7, #12
1000039c:	46bd      	mov	sp, r7
1000039e:	f85d 7b04 	ldr.w	r7, [sp], #4
100003a2:	4770      	bx	lr

100003a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
100003a4:	b480      	push	{r7}
100003a6:	b083      	sub	sp, #12
100003a8:	af00      	add	r7, sp, #0
100003aa:	6078      	str	r0, [r7, #4]
100003ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100003ae:	683b      	ldr	r3, [r7, #0]
100003b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100003b4:	605a      	str	r2, [r3, #4]
  return 0;
100003b6:	2300      	movs	r3, #0
}
100003b8:	4618      	mov	r0, r3
100003ba:	370c      	adds	r7, #12
100003bc:	46bd      	mov	sp, r7
100003be:	f85d 7b04 	ldr.w	r7, [sp], #4
100003c2:	4770      	bx	lr

100003c4 <_isatty>:

int _isatty(int file)
{
100003c4:	b480      	push	{r7}
100003c6:	b083      	sub	sp, #12
100003c8:	af00      	add	r7, sp, #0
100003ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100003cc:	2301      	movs	r3, #1
}
100003ce:	4618      	mov	r0, r3
100003d0:	370c      	adds	r7, #12
100003d2:	46bd      	mov	sp, r7
100003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100003d8:	4770      	bx	lr

100003da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100003da:	b480      	push	{r7}
100003dc:	b085      	sub	sp, #20
100003de:	af00      	add	r7, sp, #0
100003e0:	60f8      	str	r0, [r7, #12]
100003e2:	60b9      	str	r1, [r7, #8]
100003e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
100003e6:	2300      	movs	r3, #0
}
100003e8:	4618      	mov	r0, r3
100003ea:	3714      	adds	r7, #20
100003ec:	46bd      	mov	sp, r7
100003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100003f2:	4770      	bx	lr

100003f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100003f4:	b580      	push	{r7, lr}
100003f6:	b086      	sub	sp, #24
100003f8:	af00      	add	r7, sp, #0
100003fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100003fc:	4a14      	ldr	r2, [pc, #80]	; (10000450 <_sbrk+0x5c>)
100003fe:	4b15      	ldr	r3, [pc, #84]	; (10000454 <_sbrk+0x60>)
10000400:	1ad3      	subs	r3, r2, r3
10000402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10000404:	697b      	ldr	r3, [r7, #20]
10000406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10000408:	4b13      	ldr	r3, [pc, #76]	; (10000458 <_sbrk+0x64>)
1000040a:	681b      	ldr	r3, [r3, #0]
1000040c:	2b00      	cmp	r3, #0
1000040e:	d102      	bne.n	10000416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10000410:	4b11      	ldr	r3, [pc, #68]	; (10000458 <_sbrk+0x64>)
10000412:	4a12      	ldr	r2, [pc, #72]	; (1000045c <_sbrk+0x68>)
10000414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10000416:	4b10      	ldr	r3, [pc, #64]	; (10000458 <_sbrk+0x64>)
10000418:	681a      	ldr	r2, [r3, #0]
1000041a:	687b      	ldr	r3, [r7, #4]
1000041c:	4413      	add	r3, r2
1000041e:	693a      	ldr	r2, [r7, #16]
10000420:	429a      	cmp	r2, r3
10000422:	d207      	bcs.n	10000434 <_sbrk+0x40>
  {
    errno = ENOMEM;
10000424:	f006 f9c0 	bl	100067a8 <__errno>
10000428:	4603      	mov	r3, r0
1000042a:	220c      	movs	r2, #12
1000042c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1000042e:	f04f 33ff 	mov.w	r3, #4294967295
10000432:	e009      	b.n	10000448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10000434:	4b08      	ldr	r3, [pc, #32]	; (10000458 <_sbrk+0x64>)
10000436:	681b      	ldr	r3, [r3, #0]
10000438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
1000043a:	4b07      	ldr	r3, [pc, #28]	; (10000458 <_sbrk+0x64>)
1000043c:	681a      	ldr	r2, [r3, #0]
1000043e:	687b      	ldr	r3, [r7, #4]
10000440:	4413      	add	r3, r2
10000442:	4a05      	ldr	r2, [pc, #20]	; (10000458 <_sbrk+0x64>)
10000444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10000446:	68fb      	ldr	r3, [r7, #12]
}
10000448:	4618      	mov	r0, r3
1000044a:	3718      	adds	r7, #24
1000044c:	46bd      	mov	sp, r7
1000044e:	bd80      	pop	{r7, pc}
10000450:	10040000 	.word	0x10040000
10000454:	00000400 	.word	0x00000400
10000458:	10020084 	.word	0x10020084
1000045c:	10020270 	.word	0x10020270

10000460 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
10000460:	b580      	push	{r7, lr}
10000462:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
10000464:	4b22      	ldr	r3, [pc, #136]	; (100004f0 <MX_UART4_Init+0x90>)
10000466:	4a23      	ldr	r2, [pc, #140]	; (100004f4 <MX_UART4_Init+0x94>)
10000468:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
1000046a:	4b21      	ldr	r3, [pc, #132]	; (100004f0 <MX_UART4_Init+0x90>)
1000046c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
10000470:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
10000472:	4b1f      	ldr	r3, [pc, #124]	; (100004f0 <MX_UART4_Init+0x90>)
10000474:	2200      	movs	r2, #0
10000476:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
10000478:	4b1d      	ldr	r3, [pc, #116]	; (100004f0 <MX_UART4_Init+0x90>)
1000047a:	2200      	movs	r2, #0
1000047c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
1000047e:	4b1c      	ldr	r3, [pc, #112]	; (100004f0 <MX_UART4_Init+0x90>)
10000480:	2200      	movs	r2, #0
10000482:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
10000484:	4b1a      	ldr	r3, [pc, #104]	; (100004f0 <MX_UART4_Init+0x90>)
10000486:	220c      	movs	r2, #12
10000488:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1000048a:	4b19      	ldr	r3, [pc, #100]	; (100004f0 <MX_UART4_Init+0x90>)
1000048c:	2200      	movs	r2, #0
1000048e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
10000490:	4b17      	ldr	r3, [pc, #92]	; (100004f0 <MX_UART4_Init+0x90>)
10000492:	2200      	movs	r2, #0
10000494:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10000496:	4b16      	ldr	r3, [pc, #88]	; (100004f0 <MX_UART4_Init+0x90>)
10000498:	2200      	movs	r2, #0
1000049a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1000049c:	4b14      	ldr	r3, [pc, #80]	; (100004f0 <MX_UART4_Init+0x90>)
1000049e:	2200      	movs	r2, #0
100004a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100004a2:	4b13      	ldr	r3, [pc, #76]	; (100004f0 <MX_UART4_Init+0x90>)
100004a4:	2200      	movs	r2, #0
100004a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
100004a8:	4811      	ldr	r0, [pc, #68]	; (100004f0 <MX_UART4_Init+0x90>)
100004aa:	f004 fb27 	bl	10004afc <HAL_UART_Init>
100004ae:	4603      	mov	r3, r0
100004b0:	2b00      	cmp	r3, #0
100004b2:	d001      	beq.n	100004b8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
100004b4:	f7ff fec6 	bl	10000244 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100004b8:	2100      	movs	r1, #0
100004ba:	480d      	ldr	r0, [pc, #52]	; (100004f0 <MX_UART4_Init+0x90>)
100004bc:	f005 fe4f 	bl	1000615e <HAL_UARTEx_SetTxFifoThreshold>
100004c0:	4603      	mov	r3, r0
100004c2:	2b00      	cmp	r3, #0
100004c4:	d001      	beq.n	100004ca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
100004c6:	f7ff febd 	bl	10000244 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100004ca:	2100      	movs	r1, #0
100004cc:	4808      	ldr	r0, [pc, #32]	; (100004f0 <MX_UART4_Init+0x90>)
100004ce:	f005 fe84 	bl	100061da <HAL_UARTEx_SetRxFifoThreshold>
100004d2:	4603      	mov	r3, r0
100004d4:	2b00      	cmp	r3, #0
100004d6:	d001      	beq.n	100004dc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
100004d8:	f7ff feb4 	bl	10000244 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
100004dc:	4804      	ldr	r0, [pc, #16]	; (100004f0 <MX_UART4_Init+0x90>)
100004de:	f005 fe05 	bl	100060ec <HAL_UARTEx_DisableFifoMode>
100004e2:	4603      	mov	r3, r0
100004e4:	2b00      	cmp	r3, #0
100004e6:	d001      	beq.n	100004ec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
100004e8:	f7ff feac 	bl	10000244 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
100004ec:	bf00      	nop
100004ee:	bd80      	pop	{r7, pc}
100004f0:	10020088 	.word	0x10020088
100004f4:	40010000 	.word	0x40010000

100004f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
100004f8:	b580      	push	{r7, lr}
100004fa:	b0de      	sub	sp, #376	; 0x178
100004fc:	af00      	add	r7, sp, #0
100004fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000502:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000506:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000508:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000050c:	2200      	movs	r2, #0
1000050e:	601a      	str	r2, [r3, #0]
10000510:	605a      	str	r2, [r3, #4]
10000512:	609a      	str	r2, [r3, #8]
10000514:	60da      	str	r2, [r3, #12]
10000516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000518:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000051c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
10000520:	4618      	mov	r0, r3
10000522:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000526:	461a      	mov	r2, r3
10000528:	2100      	movs	r1, #0
1000052a:	f006 f8ef 	bl	1000670c <memset>
  if(uartHandle->Instance==UART4)
1000052e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000532:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10000536:	681b      	ldr	r3, [r3, #0]
10000538:	681b      	ldr	r3, [r3, #0]
1000053a:	4a2d      	ldr	r2, [pc, #180]	; (100005f0 <HAL_UART_MspInit+0xf8>)
1000053c:	4293      	cmp	r3, r2
1000053e:	d151      	bne.n	100005e4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10000540:	4b2c      	ldr	r3, [pc, #176]	; (100005f4 <HAL_UART_MspInit+0xfc>)
10000542:	681b      	ldr	r3, [r3, #0]
10000544:	f003 0307 	and.w	r3, r3, #7
10000548:	2b04      	cmp	r3, #4
1000054a:	d113      	bne.n	10000574 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
1000054c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10000550:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10000554:	f04f 0202 	mov.w	r2, #2
10000558:	f04f 0300 	mov.w	r3, #0
1000055c:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000560:	f107 0308 	add.w	r3, r7, #8
10000564:	4618      	mov	r0, r3
10000566:	f002 fc35 	bl	10002dd4 <HAL_RCCEx_PeriphCLKConfig>
1000056a:	4603      	mov	r3, r0
1000056c:	2b00      	cmp	r3, #0
1000056e:	d001      	beq.n	10000574 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
10000570:	f7ff fe68 	bl	10000244 <Error_Handler>
    }

  }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
10000574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
1000057c:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOG_CLK_ENABLE();
10000580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000584:	2240      	movs	r2, #64	; 0x40
10000586:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    __HAL_RCC_GPIOB_CLK_ENABLE();
1000058a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000058e:	2202      	movs	r2, #2
10000590:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PG11     ------> UART4_TX
    PB2     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
10000594:	f44f 6300 	mov.w	r3, #2048	; 0x800
10000598:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1000059c:	2302      	movs	r3, #2
1000059e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100005a2:	2300      	movs	r3, #0
100005a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100005a8:	2300      	movs	r3, #0
100005aa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100005ae:	2306      	movs	r3, #6
100005b0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
100005b4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100005b8:	4619      	mov	r1, r3
100005ba:	480f      	ldr	r0, [pc, #60]	; (100005f8 <HAL_UART_MspInit+0x100>)
100005bc:	f000 f9a4 	bl	10000908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
100005c0:	2304      	movs	r3, #4
100005c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
100005c6:	2302      	movs	r3, #2
100005c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100005cc:	2300      	movs	r3, #0
100005ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
100005d2:	2308      	movs	r3, #8
100005d4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100005d8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100005dc:	4619      	mov	r1, r3
100005de:	4807      	ldr	r0, [pc, #28]	; (100005fc <HAL_UART_MspInit+0x104>)
100005e0:	f000 f992 	bl	10000908 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
100005e4:	bf00      	nop
100005e6:	f507 77bc 	add.w	r7, r7, #376	; 0x178
100005ea:	46bd      	mov	sp, r7
100005ec:	bd80      	pop	{r7, pc}
100005ee:	bf00      	nop
100005f0:	40010000 	.word	0x40010000
100005f4:	50020000 	.word	0x50020000
100005f8:	50008000 	.word	0x50008000
100005fc:	50003000 	.word	0x50003000

10000600 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000600:	e7fe      	b.n	10000600 <ADC1_IRQHandler>
	...

10000604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000604:	b580      	push	{r7, lr}
10000606:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000608:	2003      	movs	r0, #3
1000060a:	f000 f93b 	bl	10000884 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000060e:	f001 ff01 	bl	10002414 <HAL_RCC_GetSystemCoreClockFreq>
10000612:	4603      	mov	r3, r0
10000614:	4a07      	ldr	r2, [pc, #28]	; (10000634 <HAL_Init+0x30>)
10000616:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000618:	200f      	movs	r0, #15
1000061a:	f000 f80d 	bl	10000638 <HAL_InitTick>
1000061e:	4603      	mov	r3, r0
10000620:	2b00      	cmp	r3, #0
10000622:	d001      	beq.n	10000628 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000624:	2301      	movs	r3, #1
10000626:	e002      	b.n	1000062e <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000628:	f7ff fe11 	bl	1000024e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
1000062c:	2300      	movs	r3, #0
}
1000062e:	4618      	mov	r0, r3
10000630:	bd80      	pop	{r7, pc}
10000632:	bf00      	nop
10000634:	10020000 	.word	0x10020000

10000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000638:	b580      	push	{r7, lr}
1000063a:	b082      	sub	sp, #8
1000063c:	af00      	add	r7, sp, #0
1000063e:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000640:	4b15      	ldr	r3, [pc, #84]	; (10000698 <HAL_InitTick+0x60>)
10000642:	781b      	ldrb	r3, [r3, #0]
10000644:	2b00      	cmp	r3, #0
10000646:	d101      	bne.n	1000064c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000648:	2301      	movs	r3, #1
1000064a:	e021      	b.n	10000690 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
1000064c:	4b13      	ldr	r3, [pc, #76]	; (1000069c <HAL_InitTick+0x64>)
1000064e:	681a      	ldr	r2, [r3, #0]
10000650:	4b11      	ldr	r3, [pc, #68]	; (10000698 <HAL_InitTick+0x60>)
10000652:	781b      	ldrb	r3, [r3, #0]
10000654:	4619      	mov	r1, r3
10000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000065a:	fbb3 f3f1 	udiv	r3, r3, r1
1000065e:	fbb2 f3f3 	udiv	r3, r2, r3
10000662:	4618      	mov	r0, r3
10000664:	f000 f943 	bl	100008ee <HAL_SYSTICK_Config>
10000668:	4603      	mov	r3, r0
1000066a:	2b00      	cmp	r3, #0
1000066c:	d001      	beq.n	10000672 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
1000066e:	2301      	movs	r3, #1
10000670:	e00e      	b.n	10000690 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000672:	687b      	ldr	r3, [r7, #4]
10000674:	2b0f      	cmp	r3, #15
10000676:	d80a      	bhi.n	1000068e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000678:	2200      	movs	r2, #0
1000067a:	6879      	ldr	r1, [r7, #4]
1000067c:	f04f 30ff 	mov.w	r0, #4294967295
10000680:	f000 f90b 	bl	1000089a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000684:	4a06      	ldr	r2, [pc, #24]	; (100006a0 <HAL_InitTick+0x68>)
10000686:	687b      	ldr	r3, [r7, #4]
10000688:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000068a:	2300      	movs	r3, #0
1000068c:	e000      	b.n	10000690 <HAL_InitTick+0x58>
    return HAL_ERROR;
1000068e:	2301      	movs	r3, #1
}
10000690:	4618      	mov	r0, r3
10000692:	3708      	adds	r7, #8
10000694:	46bd      	mov	sp, r7
10000696:	bd80      	pop	{r7, pc}
10000698:	10020008 	.word	0x10020008
1000069c:	10020000 	.word	0x10020000
100006a0:	10020004 	.word	0x10020004

100006a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100006a4:	b480      	push	{r7}
100006a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100006a8:	4b06      	ldr	r3, [pc, #24]	; (100006c4 <HAL_IncTick+0x20>)
100006aa:	781b      	ldrb	r3, [r3, #0]
100006ac:	461a      	mov	r2, r3
100006ae:	4b06      	ldr	r3, [pc, #24]	; (100006c8 <HAL_IncTick+0x24>)
100006b0:	681b      	ldr	r3, [r3, #0]
100006b2:	4413      	add	r3, r2
100006b4:	4a04      	ldr	r2, [pc, #16]	; (100006c8 <HAL_IncTick+0x24>)
100006b6:	6013      	str	r3, [r2, #0]
}
100006b8:	bf00      	nop
100006ba:	46bd      	mov	sp, r7
100006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
100006c0:	4770      	bx	lr
100006c2:	bf00      	nop
100006c4:	10020008 	.word	0x10020008
100006c8:	1002011c 	.word	0x1002011c

100006cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100006cc:	b480      	push	{r7}
100006ce:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100006d0:	4b03      	ldr	r3, [pc, #12]	; (100006e0 <HAL_GetTick+0x14>)
100006d2:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100006d4:	4618      	mov	r0, r3
100006d6:	46bd      	mov	sp, r7
100006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100006dc:	4770      	bx	lr
100006de:	bf00      	nop
100006e0:	1002011c 	.word	0x1002011c

100006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100006e4:	b480      	push	{r7}
100006e6:	b085      	sub	sp, #20
100006e8:	af00      	add	r7, sp, #0
100006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
100006ec:	687b      	ldr	r3, [r7, #4]
100006ee:	f003 0307 	and.w	r3, r3, #7
100006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100006f4:	4b0c      	ldr	r3, [pc, #48]	; (10000728 <__NVIC_SetPriorityGrouping+0x44>)
100006f6:	68db      	ldr	r3, [r3, #12]
100006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100006fa:	68ba      	ldr	r2, [r7, #8]
100006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000700:	4013      	ands	r3, r2
10000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000704:	68fb      	ldr	r3, [r7, #12]
10000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000708:	68bb      	ldr	r3, [r7, #8]
1000070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
1000070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10000716:	4a04      	ldr	r2, [pc, #16]	; (10000728 <__NVIC_SetPriorityGrouping+0x44>)
10000718:	68bb      	ldr	r3, [r7, #8]
1000071a:	60d3      	str	r3, [r2, #12]
}
1000071c:	bf00      	nop
1000071e:	3714      	adds	r7, #20
10000720:	46bd      	mov	sp, r7
10000722:	f85d 7b04 	ldr.w	r7, [sp], #4
10000726:	4770      	bx	lr
10000728:	e000ed00 	.word	0xe000ed00

1000072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
1000072c:	b480      	push	{r7}
1000072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000730:	4b04      	ldr	r3, [pc, #16]	; (10000744 <__NVIC_GetPriorityGrouping+0x18>)
10000732:	68db      	ldr	r3, [r3, #12]
10000734:	0a1b      	lsrs	r3, r3, #8
10000736:	f003 0307 	and.w	r3, r3, #7
}
1000073a:	4618      	mov	r0, r3
1000073c:	46bd      	mov	sp, r7
1000073e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000742:	4770      	bx	lr
10000744:	e000ed00 	.word	0xe000ed00

10000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000748:	b480      	push	{r7}
1000074a:	b083      	sub	sp, #12
1000074c:	af00      	add	r7, sp, #0
1000074e:	4603      	mov	r3, r0
10000750:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000756:	2b00      	cmp	r3, #0
10000758:	db0b      	blt.n	10000772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000075a:	88fb      	ldrh	r3, [r7, #6]
1000075c:	f003 021f 	and.w	r2, r3, #31
10000760:	4907      	ldr	r1, [pc, #28]	; (10000780 <__NVIC_EnableIRQ+0x38>)
10000762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000766:	095b      	lsrs	r3, r3, #5
10000768:	2001      	movs	r0, #1
1000076a:	fa00 f202 	lsl.w	r2, r0, r2
1000076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000772:	bf00      	nop
10000774:	370c      	adds	r7, #12
10000776:	46bd      	mov	sp, r7
10000778:	f85d 7b04 	ldr.w	r7, [sp], #4
1000077c:	4770      	bx	lr
1000077e:	bf00      	nop
10000780:	e000e100 	.word	0xe000e100

10000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000784:	b480      	push	{r7}
10000786:	b083      	sub	sp, #12
10000788:	af00      	add	r7, sp, #0
1000078a:	4603      	mov	r3, r0
1000078c:	6039      	str	r1, [r7, #0]
1000078e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000794:	2b00      	cmp	r3, #0
10000796:	db0a      	blt.n	100007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000798:	683b      	ldr	r3, [r7, #0]
1000079a:	b2da      	uxtb	r2, r3
1000079c:	490c      	ldr	r1, [pc, #48]	; (100007d0 <__NVIC_SetPriority+0x4c>)
1000079e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100007a2:	0112      	lsls	r2, r2, #4
100007a4:	b2d2      	uxtb	r2, r2
100007a6:	440b      	add	r3, r1
100007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100007ac:	e00a      	b.n	100007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100007ae:	683b      	ldr	r3, [r7, #0]
100007b0:	b2da      	uxtb	r2, r3
100007b2:	4908      	ldr	r1, [pc, #32]	; (100007d4 <__NVIC_SetPriority+0x50>)
100007b4:	88fb      	ldrh	r3, [r7, #6]
100007b6:	f003 030f 	and.w	r3, r3, #15
100007ba:	3b04      	subs	r3, #4
100007bc:	0112      	lsls	r2, r2, #4
100007be:	b2d2      	uxtb	r2, r2
100007c0:	440b      	add	r3, r1
100007c2:	761a      	strb	r2, [r3, #24]
}
100007c4:	bf00      	nop
100007c6:	370c      	adds	r7, #12
100007c8:	46bd      	mov	sp, r7
100007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100007ce:	4770      	bx	lr
100007d0:	e000e100 	.word	0xe000e100
100007d4:	e000ed00 	.word	0xe000ed00

100007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
100007d8:	b480      	push	{r7}
100007da:	b089      	sub	sp, #36	; 0x24
100007dc:	af00      	add	r7, sp, #0
100007de:	60f8      	str	r0, [r7, #12]
100007e0:	60b9      	str	r1, [r7, #8]
100007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
100007e4:	68fb      	ldr	r3, [r7, #12]
100007e6:	f003 0307 	and.w	r3, r3, #7
100007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
100007ec:	69fb      	ldr	r3, [r7, #28]
100007ee:	f1c3 0307 	rsb	r3, r3, #7
100007f2:	2b04      	cmp	r3, #4
100007f4:	bf28      	it	cs
100007f6:	2304      	movcs	r3, #4
100007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
100007fa:	69fb      	ldr	r3, [r7, #28]
100007fc:	3304      	adds	r3, #4
100007fe:	2b06      	cmp	r3, #6
10000800:	d902      	bls.n	10000808 <NVIC_EncodePriority+0x30>
10000802:	69fb      	ldr	r3, [r7, #28]
10000804:	3b03      	subs	r3, #3
10000806:	e000      	b.n	1000080a <NVIC_EncodePriority+0x32>
10000808:	2300      	movs	r3, #0
1000080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
1000080c:	f04f 32ff 	mov.w	r2, #4294967295
10000810:	69bb      	ldr	r3, [r7, #24]
10000812:	fa02 f303 	lsl.w	r3, r2, r3
10000816:	43da      	mvns	r2, r3
10000818:	68bb      	ldr	r3, [r7, #8]
1000081a:	401a      	ands	r2, r3
1000081c:	697b      	ldr	r3, [r7, #20]
1000081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000820:	f04f 31ff 	mov.w	r1, #4294967295
10000824:	697b      	ldr	r3, [r7, #20]
10000826:	fa01 f303 	lsl.w	r3, r1, r3
1000082a:	43d9      	mvns	r1, r3
1000082c:	687b      	ldr	r3, [r7, #4]
1000082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000830:	4313      	orrs	r3, r2
         );
}
10000832:	4618      	mov	r0, r3
10000834:	3724      	adds	r7, #36	; 0x24
10000836:	46bd      	mov	sp, r7
10000838:	f85d 7b04 	ldr.w	r7, [sp], #4
1000083c:	4770      	bx	lr
	...

10000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000840:	b580      	push	{r7, lr}
10000842:	b082      	sub	sp, #8
10000844:	af00      	add	r7, sp, #0
10000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000848:	687b      	ldr	r3, [r7, #4]
1000084a:	3b01      	subs	r3, #1
1000084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000850:	d301      	bcc.n	10000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000852:	2301      	movs	r3, #1
10000854:	e00f      	b.n	10000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000856:	4a0a      	ldr	r2, [pc, #40]	; (10000880 <SysTick_Config+0x40>)
10000858:	687b      	ldr	r3, [r7, #4]
1000085a:	3b01      	subs	r3, #1
1000085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1000085e:	210f      	movs	r1, #15
10000860:	f04f 30ff 	mov.w	r0, #4294967295
10000864:	f7ff ff8e 	bl	10000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000868:	4b05      	ldr	r3, [pc, #20]	; (10000880 <SysTick_Config+0x40>)
1000086a:	2200      	movs	r2, #0
1000086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000086e:	4b04      	ldr	r3, [pc, #16]	; (10000880 <SysTick_Config+0x40>)
10000870:	2207      	movs	r2, #7
10000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000874:	2300      	movs	r3, #0
}
10000876:	4618      	mov	r0, r3
10000878:	3708      	adds	r7, #8
1000087a:	46bd      	mov	sp, r7
1000087c:	bd80      	pop	{r7, pc}
1000087e:	bf00      	nop
10000880:	e000e010 	.word	0xe000e010

10000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000884:	b580      	push	{r7, lr}
10000886:	b082      	sub	sp, #8
10000888:	af00      	add	r7, sp, #0
1000088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
1000088c:	6878      	ldr	r0, [r7, #4]
1000088e:	f7ff ff29 	bl	100006e4 <__NVIC_SetPriorityGrouping>
}
10000892:	bf00      	nop
10000894:	3708      	adds	r7, #8
10000896:	46bd      	mov	sp, r7
10000898:	bd80      	pop	{r7, pc}

1000089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000089a:	b580      	push	{r7, lr}
1000089c:	b086      	sub	sp, #24
1000089e:	af00      	add	r7, sp, #0
100008a0:	4603      	mov	r3, r0
100008a2:	60b9      	str	r1, [r7, #8]
100008a4:	607a      	str	r2, [r7, #4]
100008a6:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100008a8:	2300      	movs	r3, #0
100008aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100008ac:	f7ff ff3e 	bl	1000072c <__NVIC_GetPriorityGrouping>
100008b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100008b2:	687a      	ldr	r2, [r7, #4]
100008b4:	68b9      	ldr	r1, [r7, #8]
100008b6:	6978      	ldr	r0, [r7, #20]
100008b8:	f7ff ff8e 	bl	100007d8 <NVIC_EncodePriority>
100008bc:	4602      	mov	r2, r0
100008be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
100008c2:	4611      	mov	r1, r2
100008c4:	4618      	mov	r0, r3
100008c6:	f7ff ff5d 	bl	10000784 <__NVIC_SetPriority>
}
100008ca:	bf00      	nop
100008cc:	3718      	adds	r7, #24
100008ce:	46bd      	mov	sp, r7
100008d0:	bd80      	pop	{r7, pc}

100008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100008d2:	b580      	push	{r7, lr}
100008d4:	b082      	sub	sp, #8
100008d6:	af00      	add	r7, sp, #0
100008d8:	4603      	mov	r3, r0
100008da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
100008dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100008e0:	4618      	mov	r0, r3
100008e2:	f7ff ff31 	bl	10000748 <__NVIC_EnableIRQ>
}
100008e6:	bf00      	nop
100008e8:	3708      	adds	r7, #8
100008ea:	46bd      	mov	sp, r7
100008ec:	bd80      	pop	{r7, pc}

100008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100008ee:	b580      	push	{r7, lr}
100008f0:	b082      	sub	sp, #8
100008f2:	af00      	add	r7, sp, #0
100008f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100008f6:	6878      	ldr	r0, [r7, #4]
100008f8:	f7ff ffa2 	bl	10000840 <SysTick_Config>
100008fc:	4603      	mov	r3, r0
}
100008fe:	4618      	mov	r0, r3
10000900:	3708      	adds	r7, #8
10000902:	46bd      	mov	sp, r7
10000904:	bd80      	pop	{r7, pc}
	...

10000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10000908:	b480      	push	{r7}
1000090a:	b089      	sub	sp, #36	; 0x24
1000090c:	af00      	add	r7, sp, #0
1000090e:	6078      	str	r0, [r7, #4]
10000910:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10000912:	4b8a      	ldr	r3, [pc, #552]	; (10000b3c <HAL_GPIO_Init+0x234>)
10000914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10000916:	2300      	movs	r3, #0
10000918:	61fb      	str	r3, [r7, #28]
1000091a:	e191      	b.n	10000c40 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
1000091c:	2201      	movs	r2, #1
1000091e:	69fb      	ldr	r3, [r7, #28]
10000920:	fa02 f303 	lsl.w	r3, r2, r3
10000924:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10000926:	683b      	ldr	r3, [r7, #0]
10000928:	681b      	ldr	r3, [r3, #0]
1000092a:	693a      	ldr	r2, [r7, #16]
1000092c:	4013      	ands	r3, r2
1000092e:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000930:	68fa      	ldr	r2, [r7, #12]
10000932:	693b      	ldr	r3, [r7, #16]
10000934:	429a      	cmp	r2, r3
10000936:	f040 8180 	bne.w	10000c3a <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000093a:	683b      	ldr	r3, [r7, #0]
1000093c:	685b      	ldr	r3, [r3, #4]
1000093e:	2b02      	cmp	r3, #2
10000940:	d003      	beq.n	1000094a <HAL_GPIO_Init+0x42>
10000942:	683b      	ldr	r3, [r7, #0]
10000944:	685b      	ldr	r3, [r3, #4]
10000946:	2b12      	cmp	r3, #18
10000948:	d123      	bne.n	10000992 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
1000094a:	69fb      	ldr	r3, [r7, #28]
1000094c:	08da      	lsrs	r2, r3, #3
1000094e:	687b      	ldr	r3, [r7, #4]
10000950:	3208      	adds	r2, #8
10000952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10000956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000958:	69fb      	ldr	r3, [r7, #28]
1000095a:	f003 0307 	and.w	r3, r3, #7
1000095e:	009b      	lsls	r3, r3, #2
10000960:	220f      	movs	r2, #15
10000962:	fa02 f303 	lsl.w	r3, r2, r3
10000966:	43db      	mvns	r3, r3
10000968:	69ba      	ldr	r2, [r7, #24]
1000096a:	4013      	ands	r3, r2
1000096c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
1000096e:	683b      	ldr	r3, [r7, #0]
10000970:	691a      	ldr	r2, [r3, #16]
10000972:	69fb      	ldr	r3, [r7, #28]
10000974:	f003 0307 	and.w	r3, r3, #7
10000978:	009b      	lsls	r3, r3, #2
1000097a:	fa02 f303 	lsl.w	r3, r2, r3
1000097e:	69ba      	ldr	r2, [r7, #24]
10000980:	4313      	orrs	r3, r2
10000982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000984:	69fb      	ldr	r3, [r7, #28]
10000986:	08da      	lsrs	r2, r3, #3
10000988:	687b      	ldr	r3, [r7, #4]
1000098a:	3208      	adds	r2, #8
1000098c:	69b9      	ldr	r1, [r7, #24]
1000098e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000992:	687b      	ldr	r3, [r7, #4]
10000994:	681b      	ldr	r3, [r3, #0]
10000996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000998:	69fb      	ldr	r3, [r7, #28]
1000099a:	005b      	lsls	r3, r3, #1
1000099c:	2203      	movs	r2, #3
1000099e:	fa02 f303 	lsl.w	r3, r2, r3
100009a2:	43db      	mvns	r3, r3
100009a4:	69ba      	ldr	r2, [r7, #24]
100009a6:	4013      	ands	r3, r2
100009a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100009aa:	683b      	ldr	r3, [r7, #0]
100009ac:	685b      	ldr	r3, [r3, #4]
100009ae:	f003 0203 	and.w	r2, r3, #3
100009b2:	69fb      	ldr	r3, [r7, #28]
100009b4:	005b      	lsls	r3, r3, #1
100009b6:	fa02 f303 	lsl.w	r3, r2, r3
100009ba:	69ba      	ldr	r2, [r7, #24]
100009bc:	4313      	orrs	r3, r2
100009be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	69ba      	ldr	r2, [r7, #24]
100009c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100009c6:	683b      	ldr	r3, [r7, #0]
100009c8:	685b      	ldr	r3, [r3, #4]
100009ca:	2b01      	cmp	r3, #1
100009cc:	d00b      	beq.n	100009e6 <HAL_GPIO_Init+0xde>
100009ce:	683b      	ldr	r3, [r7, #0]
100009d0:	685b      	ldr	r3, [r3, #4]
100009d2:	2b02      	cmp	r3, #2
100009d4:	d007      	beq.n	100009e6 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100009d6:	683b      	ldr	r3, [r7, #0]
100009d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100009da:	2b11      	cmp	r3, #17
100009dc:	d003      	beq.n	100009e6 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100009de:	683b      	ldr	r3, [r7, #0]
100009e0:	685b      	ldr	r3, [r3, #4]
100009e2:	2b12      	cmp	r3, #18
100009e4:	d130      	bne.n	10000a48 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	689b      	ldr	r3, [r3, #8]
100009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
100009ec:	69fb      	ldr	r3, [r7, #28]
100009ee:	005b      	lsls	r3, r3, #1
100009f0:	2203      	movs	r2, #3
100009f2:	fa02 f303 	lsl.w	r3, r2, r3
100009f6:	43db      	mvns	r3, r3
100009f8:	69ba      	ldr	r2, [r7, #24]
100009fa:	4013      	ands	r3, r2
100009fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
100009fe:	683b      	ldr	r3, [r7, #0]
10000a00:	68da      	ldr	r2, [r3, #12]
10000a02:	69fb      	ldr	r3, [r7, #28]
10000a04:	005b      	lsls	r3, r3, #1
10000a06:	fa02 f303 	lsl.w	r3, r2, r3
10000a0a:	69ba      	ldr	r2, [r7, #24]
10000a0c:	4313      	orrs	r3, r2
10000a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	69ba      	ldr	r2, [r7, #24]
10000a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	685b      	ldr	r3, [r3, #4]
10000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000a1c:	2201      	movs	r2, #1
10000a1e:	69fb      	ldr	r3, [r7, #28]
10000a20:	fa02 f303 	lsl.w	r3, r2, r3
10000a24:	43db      	mvns	r3, r3
10000a26:	69ba      	ldr	r2, [r7, #24]
10000a28:	4013      	ands	r3, r2
10000a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000a2c:	683b      	ldr	r3, [r7, #0]
10000a2e:	685b      	ldr	r3, [r3, #4]
10000a30:	091b      	lsrs	r3, r3, #4
10000a32:	f003 0201 	and.w	r2, r3, #1
10000a36:	69fb      	ldr	r3, [r7, #28]
10000a38:	fa02 f303 	lsl.w	r3, r2, r3
10000a3c:	69ba      	ldr	r2, [r7, #24]
10000a3e:	4313      	orrs	r3, r2
10000a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10000a42:	687b      	ldr	r3, [r7, #4]
10000a44:	69ba      	ldr	r2, [r7, #24]
10000a46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10000a48:	687b      	ldr	r3, [r7, #4]
10000a4a:	68db      	ldr	r3, [r3, #12]
10000a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10000a4e:	69fb      	ldr	r3, [r7, #28]
10000a50:	005b      	lsls	r3, r3, #1
10000a52:	2203      	movs	r2, #3
10000a54:	fa02 f303 	lsl.w	r3, r2, r3
10000a58:	43db      	mvns	r3, r3
10000a5a:	69ba      	ldr	r2, [r7, #24]
10000a5c:	4013      	ands	r3, r2
10000a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000a60:	683b      	ldr	r3, [r7, #0]
10000a62:	689a      	ldr	r2, [r3, #8]
10000a64:	69fb      	ldr	r3, [r7, #28]
10000a66:	005b      	lsls	r3, r3, #1
10000a68:	fa02 f303 	lsl.w	r3, r2, r3
10000a6c:	69ba      	ldr	r2, [r7, #24]
10000a6e:	4313      	orrs	r3, r2
10000a70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000a72:	687b      	ldr	r3, [r7, #4]
10000a74:	69ba      	ldr	r2, [r7, #24]
10000a76:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000a78:	683b      	ldr	r3, [r7, #0]
10000a7a:	685b      	ldr	r3, [r3, #4]
10000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10000a80:	2b00      	cmp	r3, #0
10000a82:	f000 80da 	beq.w	10000c3a <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000a86:	4a2e      	ldr	r2, [pc, #184]	; (10000b40 <HAL_GPIO_Init+0x238>)
10000a88:	69fb      	ldr	r3, [r7, #28]
10000a8a:	089b      	lsrs	r3, r3, #2
10000a8c:	3318      	adds	r3, #24
10000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000a94:	69fb      	ldr	r3, [r7, #28]
10000a96:	f003 0303 	and.w	r3, r3, #3
10000a9a:	00db      	lsls	r3, r3, #3
10000a9c:	22ff      	movs	r2, #255	; 0xff
10000a9e:	fa02 f303 	lsl.w	r3, r2, r3
10000aa2:	43db      	mvns	r3, r3
10000aa4:	69ba      	ldr	r2, [r7, #24]
10000aa6:	4013      	ands	r3, r2
10000aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10000aaa:	687b      	ldr	r3, [r7, #4]
10000aac:	4a25      	ldr	r2, [pc, #148]	; (10000b44 <HAL_GPIO_Init+0x23c>)
10000aae:	4293      	cmp	r3, r2
10000ab0:	d05e      	beq.n	10000b70 <HAL_GPIO_Init+0x268>
10000ab2:	687b      	ldr	r3, [r7, #4]
10000ab4:	4a24      	ldr	r2, [pc, #144]	; (10000b48 <HAL_GPIO_Init+0x240>)
10000ab6:	4293      	cmp	r3, r2
10000ab8:	d03d      	beq.n	10000b36 <HAL_GPIO_Init+0x22e>
10000aba:	687b      	ldr	r3, [r7, #4]
10000abc:	4a23      	ldr	r2, [pc, #140]	; (10000b4c <HAL_GPIO_Init+0x244>)
10000abe:	4293      	cmp	r3, r2
10000ac0:	d037      	beq.n	10000b32 <HAL_GPIO_Init+0x22a>
10000ac2:	687b      	ldr	r3, [r7, #4]
10000ac4:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000ac8:	d031      	beq.n	10000b2e <HAL_GPIO_Init+0x226>
10000aca:	687b      	ldr	r3, [r7, #4]
10000acc:	4a20      	ldr	r2, [pc, #128]	; (10000b50 <HAL_GPIO_Init+0x248>)
10000ace:	4293      	cmp	r3, r2
10000ad0:	d02b      	beq.n	10000b2a <HAL_GPIO_Init+0x222>
10000ad2:	687b      	ldr	r3, [r7, #4]
10000ad4:	4a1f      	ldr	r2, [pc, #124]	; (10000b54 <HAL_GPIO_Init+0x24c>)
10000ad6:	4293      	cmp	r3, r2
10000ad8:	d025      	beq.n	10000b26 <HAL_GPIO_Init+0x21e>
10000ada:	687b      	ldr	r3, [r7, #4]
10000adc:	4a1e      	ldr	r2, [pc, #120]	; (10000b58 <HAL_GPIO_Init+0x250>)
10000ade:	4293      	cmp	r3, r2
10000ae0:	d01f      	beq.n	10000b22 <HAL_GPIO_Init+0x21a>
10000ae2:	687b      	ldr	r3, [r7, #4]
10000ae4:	4a1d      	ldr	r2, [pc, #116]	; (10000b5c <HAL_GPIO_Init+0x254>)
10000ae6:	4293      	cmp	r3, r2
10000ae8:	d019      	beq.n	10000b1e <HAL_GPIO_Init+0x216>
10000aea:	687b      	ldr	r3, [r7, #4]
10000aec:	4a1c      	ldr	r2, [pc, #112]	; (10000b60 <HAL_GPIO_Init+0x258>)
10000aee:	4293      	cmp	r3, r2
10000af0:	d013      	beq.n	10000b1a <HAL_GPIO_Init+0x212>
10000af2:	687b      	ldr	r3, [r7, #4]
10000af4:	4a1b      	ldr	r2, [pc, #108]	; (10000b64 <HAL_GPIO_Init+0x25c>)
10000af6:	4293      	cmp	r3, r2
10000af8:	d00d      	beq.n	10000b16 <HAL_GPIO_Init+0x20e>
10000afa:	687b      	ldr	r3, [r7, #4]
10000afc:	4a1a      	ldr	r2, [pc, #104]	; (10000b68 <HAL_GPIO_Init+0x260>)
10000afe:	4293      	cmp	r3, r2
10000b00:	d007      	beq.n	10000b12 <HAL_GPIO_Init+0x20a>
10000b02:	687b      	ldr	r3, [r7, #4]
10000b04:	4a19      	ldr	r2, [pc, #100]	; (10000b6c <HAL_GPIO_Init+0x264>)
10000b06:	4293      	cmp	r3, r2
10000b08:	d101      	bne.n	10000b0e <HAL_GPIO_Init+0x206>
10000b0a:	230b      	movs	r3, #11
10000b0c:	e031      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b0e:	2319      	movs	r3, #25
10000b10:	e02f      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b12:	230a      	movs	r3, #10
10000b14:	e02d      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b16:	2309      	movs	r3, #9
10000b18:	e02b      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b1a:	2308      	movs	r3, #8
10000b1c:	e029      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b1e:	2307      	movs	r3, #7
10000b20:	e027      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b22:	2306      	movs	r3, #6
10000b24:	e025      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b26:	2305      	movs	r3, #5
10000b28:	e023      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b2a:	2304      	movs	r3, #4
10000b2c:	e021      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b2e:	2303      	movs	r3, #3
10000b30:	e01f      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b32:	2302      	movs	r3, #2
10000b34:	e01d      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b36:	2301      	movs	r3, #1
10000b38:	e01b      	b.n	10000b72 <HAL_GPIO_Init+0x26a>
10000b3a:	bf00      	nop
10000b3c:	5000d0c0 	.word	0x5000d0c0
10000b40:	5000d000 	.word	0x5000d000
10000b44:	50002000 	.word	0x50002000
10000b48:	50003000 	.word	0x50003000
10000b4c:	50004000 	.word	0x50004000
10000b50:	50006000 	.word	0x50006000
10000b54:	50007000 	.word	0x50007000
10000b58:	50008000 	.word	0x50008000
10000b5c:	50009000 	.word	0x50009000
10000b60:	5000a000 	.word	0x5000a000
10000b64:	5000b000 	.word	0x5000b000
10000b68:	5000c000 	.word	0x5000c000
10000b6c:	54004000 	.word	0x54004000
10000b70:	2300      	movs	r3, #0
10000b72:	69fa      	ldr	r2, [r7, #28]
10000b74:	f002 0203 	and.w	r2, r2, #3
10000b78:	00d2      	lsls	r2, r2, #3
10000b7a:	4093      	lsls	r3, r2
10000b7c:	461a      	mov	r2, r3
10000b7e:	69bb      	ldr	r3, [r7, #24]
10000b80:	4313      	orrs	r3, r2
10000b82:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000b84:	4934      	ldr	r1, [pc, #208]	; (10000c58 <HAL_GPIO_Init+0x350>)
10000b86:	69fb      	ldr	r3, [r7, #28]
10000b88:	089b      	lsrs	r3, r3, #2
10000b8a:	3318      	adds	r3, #24
10000b8c:	69ba      	ldr	r2, [r7, #24]
10000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000b92:	697b      	ldr	r3, [r7, #20]
10000b94:	681b      	ldr	r3, [r3, #0]
10000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000b98:	68fb      	ldr	r3, [r7, #12]
10000b9a:	43db      	mvns	r3, r3
10000b9c:	69ba      	ldr	r2, [r7, #24]
10000b9e:	4013      	ands	r3, r2
10000ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000ba2:	683b      	ldr	r3, [r7, #0]
10000ba4:	685b      	ldr	r3, [r3, #4]
10000ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10000baa:	2b00      	cmp	r3, #0
10000bac:	d003      	beq.n	10000bb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10000bae:	69ba      	ldr	r2, [r7, #24]
10000bb0:	68fb      	ldr	r3, [r7, #12]
10000bb2:	4313      	orrs	r3, r2
10000bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000bb6:	697b      	ldr	r3, [r7, #20]
10000bb8:	69ba      	ldr	r2, [r7, #24]
10000bba:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10000bbc:	697b      	ldr	r3, [r7, #20]
10000bbe:	685b      	ldr	r3, [r3, #4]
10000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000bc2:	68fb      	ldr	r3, [r7, #12]
10000bc4:	43db      	mvns	r3, r3
10000bc6:	69ba      	ldr	r2, [r7, #24]
10000bc8:	4013      	ands	r3, r2
10000bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000bcc:	683b      	ldr	r3, [r7, #0]
10000bce:	685b      	ldr	r3, [r3, #4]
10000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000bd4:	2b00      	cmp	r3, #0
10000bd6:	d003      	beq.n	10000be0 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000bd8:	69ba      	ldr	r2, [r7, #24]
10000bda:	68fb      	ldr	r3, [r7, #12]
10000bdc:	4313      	orrs	r3, r2
10000bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000be0:	697b      	ldr	r3, [r7, #20]
10000be2:	69ba      	ldr	r2, [r7, #24]
10000be4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000be6:	4b1c      	ldr	r3, [pc, #112]	; (10000c58 <HAL_GPIO_Init+0x350>)
10000be8:	681b      	ldr	r3, [r3, #0]
10000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000bec:	68fb      	ldr	r3, [r7, #12]
10000bee:	43db      	mvns	r3, r3
10000bf0:	69ba      	ldr	r2, [r7, #24]
10000bf2:	4013      	ands	r3, r2
10000bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000bf6:	683b      	ldr	r3, [r7, #0]
10000bf8:	685b      	ldr	r3, [r3, #4]
10000bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000bfe:	2b00      	cmp	r3, #0
10000c00:	d003      	beq.n	10000c0a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000c02:	69ba      	ldr	r2, [r7, #24]
10000c04:	68fb      	ldr	r3, [r7, #12]
10000c06:	4313      	orrs	r3, r2
10000c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000c0a:	4a13      	ldr	r2, [pc, #76]	; (10000c58 <HAL_GPIO_Init+0x350>)
10000c0c:	69bb      	ldr	r3, [r7, #24]
10000c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000c10:	4b11      	ldr	r3, [pc, #68]	; (10000c58 <HAL_GPIO_Init+0x350>)
10000c12:	685b      	ldr	r3, [r3, #4]
10000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000c16:	68fb      	ldr	r3, [r7, #12]
10000c18:	43db      	mvns	r3, r3
10000c1a:	69ba      	ldr	r2, [r7, #24]
10000c1c:	4013      	ands	r3, r2
10000c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000c20:	683b      	ldr	r3, [r7, #0]
10000c22:	685b      	ldr	r3, [r3, #4]
10000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10000c28:	2b00      	cmp	r3, #0
10000c2a:	d003      	beq.n	10000c34 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000c2c:	69ba      	ldr	r2, [r7, #24]
10000c2e:	68fb      	ldr	r3, [r7, #12]
10000c30:	4313      	orrs	r3, r2
10000c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000c34:	4a08      	ldr	r2, [pc, #32]	; (10000c58 <HAL_GPIO_Init+0x350>)
10000c36:	69bb      	ldr	r3, [r7, #24]
10000c38:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000c3a:	69fb      	ldr	r3, [r7, #28]
10000c3c:	3301      	adds	r3, #1
10000c3e:	61fb      	str	r3, [r7, #28]
10000c40:	69fb      	ldr	r3, [r7, #28]
10000c42:	2b0f      	cmp	r3, #15
10000c44:	f67f ae6a 	bls.w	1000091c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000c48:	bf00      	nop
10000c4a:	bf00      	nop
10000c4c:	3724      	adds	r7, #36	; 0x24
10000c4e:	46bd      	mov	sp, r7
10000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c54:	4770      	bx	lr
10000c56:	bf00      	nop
10000c58:	5000d000 	.word	0x5000d000

10000c5c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000c5c:	b580      	push	{r7, lr}
10000c5e:	b084      	sub	sp, #16
10000c60:	af00      	add	r7, sp, #0
10000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000c64:	2300      	movs	r3, #0
10000c66:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000c68:	687b      	ldr	r3, [r7, #4]
10000c6a:	2b00      	cmp	r3, #0
10000c6c:	d101      	bne.n	10000c72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000c6e:	2301      	movs	r3, #1
10000c70:	e320      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000c72:	687b      	ldr	r3, [r7, #4]
10000c74:	681b      	ldr	r3, [r3, #0]
10000c76:	f003 0301 	and.w	r3, r3, #1
10000c7a:	2b00      	cmp	r3, #0
10000c7c:	f000 8081 	beq.w	10000d82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c84:	6a1b      	ldr	r3, [r3, #32]
10000c86:	f003 0303 	and.w	r3, r3, #3
10000c8a:	2b01      	cmp	r3, #1
10000c8c:	d107      	bne.n	10000c9e <HAL_RCC_OscConfig+0x42>
10000c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c92:	6a1b      	ldr	r3, [r3, #32]
10000c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c9c:	d054      	beq.n	10000d48 <HAL_RCC_OscConfig+0xec>
10000c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000ca4:	f003 0307 	and.w	r3, r3, #7
10000ca8:	2b01      	cmp	r3, #1
10000caa:	d107      	bne.n	10000cbc <HAL_RCC_OscConfig+0x60>
10000cac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000cba:	d045      	beq.n	10000d48 <HAL_RCC_OscConfig+0xec>
10000cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000cc2:	f003 0303 	and.w	r3, r3, #3
10000cc6:	2b01      	cmp	r3, #1
10000cc8:	d107      	bne.n	10000cda <HAL_RCC_OscConfig+0x7e>
10000cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000cd8:	d036      	beq.n	10000d48 <HAL_RCC_OscConfig+0xec>
10000cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000ce0:	f003 0303 	and.w	r3, r3, #3
10000ce4:	2b01      	cmp	r3, #1
10000ce6:	d10f      	bne.n	10000d08 <HAL_RCC_OscConfig+0xac>
10000ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000cf0:	f003 0302 	and.w	r3, r3, #2
10000cf4:	2b02      	cmp	r3, #2
10000cf6:	d027      	beq.n	10000d48 <HAL_RCC_OscConfig+0xec>
10000cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000d00:	f003 0302 	and.w	r3, r3, #2
10000d04:	2b02      	cmp	r3, #2
10000d06:	d01f      	beq.n	10000d48 <HAL_RCC_OscConfig+0xec>
10000d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d0c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000d10:	f003 0303 	and.w	r3, r3, #3
10000d14:	2b01      	cmp	r3, #1
10000d16:	d107      	bne.n	10000d28 <HAL_RCC_OscConfig+0xcc>
10000d18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d1c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000d20:	f003 0302 	and.w	r3, r3, #2
10000d24:	2b02      	cmp	r3, #2
10000d26:	d00f      	beq.n	10000d48 <HAL_RCC_OscConfig+0xec>
10000d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d2c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000d30:	f003 0303 	and.w	r3, r3, #3
10000d34:	2b01      	cmp	r3, #1
10000d36:	d117      	bne.n	10000d68 <HAL_RCC_OscConfig+0x10c>
10000d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d3c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000d40:	f003 0302 	and.w	r3, r3, #2
10000d44:	2b02      	cmp	r3, #2
10000d46:	d10f      	bne.n	10000d68 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d4c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000d58:	d112      	bne.n	10000d80 <HAL_RCC_OscConfig+0x124>
10000d5a:	687b      	ldr	r3, [r7, #4]
10000d5c:	685b      	ldr	r3, [r3, #4]
10000d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000d62:	d00d      	beq.n	10000d80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000d64:	2301      	movs	r3, #1
10000d66:	e2a5      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000d68:	687b      	ldr	r3, [r7, #4]
10000d6a:	685b      	ldr	r3, [r3, #4]
10000d6c:	4618      	mov	r0, r3
10000d6e:	f000 faa7 	bl	100012c0 <HAL_RCC_HSEConfig>
10000d72:	4603      	mov	r3, r0
10000d74:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000d76:	7bfb      	ldrb	r3, [r7, #15]
10000d78:	2b00      	cmp	r3, #0
10000d7a:	d002      	beq.n	10000d82 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000d7c:	7bfb      	ldrb	r3, [r7, #15]
10000d7e:	e299      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000d80:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000d82:	687b      	ldr	r3, [r7, #4]
10000d84:	681b      	ldr	r3, [r3, #0]
10000d86:	f003 0302 	and.w	r3, r3, #2
10000d8a:	2b00      	cmp	r3, #0
10000d8c:	f000 814e 	beq.w	1000102c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d94:	6a1b      	ldr	r3, [r3, #32]
10000d96:	f003 0303 	and.w	r3, r3, #3
10000d9a:	2b00      	cmp	r3, #0
10000d9c:	d107      	bne.n	10000dae <HAL_RCC_OscConfig+0x152>
10000d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000da2:	6a1b      	ldr	r3, [r3, #32]
10000da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000dac:	d055      	beq.n	10000e5a <HAL_RCC_OscConfig+0x1fe>
10000dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000db4:	f003 0307 	and.w	r3, r3, #7
10000db8:	2b00      	cmp	r3, #0
10000dba:	d107      	bne.n	10000dcc <HAL_RCC_OscConfig+0x170>
10000dbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000dca:	d046      	beq.n	10000e5a <HAL_RCC_OscConfig+0x1fe>
10000dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000dd2:	f003 0303 	and.w	r3, r3, #3
10000dd6:	2b00      	cmp	r3, #0
10000dd8:	d107      	bne.n	10000dea <HAL_RCC_OscConfig+0x18e>
10000dda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000de8:	d037      	beq.n	10000e5a <HAL_RCC_OscConfig+0x1fe>
10000dea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000df0:	f003 0303 	and.w	r3, r3, #3
10000df4:	2b00      	cmp	r3, #0
10000df6:	d10f      	bne.n	10000e18 <HAL_RCC_OscConfig+0x1bc>
10000df8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000e00:	f003 0302 	and.w	r3, r3, #2
10000e04:	2b02      	cmp	r3, #2
10000e06:	d028      	beq.n	10000e5a <HAL_RCC_OscConfig+0x1fe>
10000e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000e10:	f003 0302 	and.w	r3, r3, #2
10000e14:	2b02      	cmp	r3, #2
10000e16:	d020      	beq.n	10000e5a <HAL_RCC_OscConfig+0x1fe>
10000e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e1c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000e20:	f003 0303 	and.w	r3, r3, #3
10000e24:	2b00      	cmp	r3, #0
10000e26:	d107      	bne.n	10000e38 <HAL_RCC_OscConfig+0x1dc>
10000e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e2c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000e30:	f003 0302 	and.w	r3, r3, #2
10000e34:	2b02      	cmp	r3, #2
10000e36:	d010      	beq.n	10000e5a <HAL_RCC_OscConfig+0x1fe>
10000e38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e3c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000e40:	f003 0303 	and.w	r3, r3, #3
10000e44:	2b00      	cmp	r3, #0
10000e46:	f040 8088 	bne.w	10000f5a <HAL_RCC_OscConfig+0x2fe>
10000e4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e4e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000e52:	f003 0302 	and.w	r3, r3, #2
10000e56:	2b02      	cmp	r3, #2
10000e58:	d17f      	bne.n	10000f5a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000e5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e5e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e62:	f003 0301 	and.w	r3, r3, #1
10000e66:	2b01      	cmp	r3, #1
10000e68:	d105      	bne.n	10000e76 <HAL_RCC_OscConfig+0x21a>
10000e6a:	687b      	ldr	r3, [r7, #4]
10000e6c:	68db      	ldr	r3, [r3, #12]
10000e6e:	2b01      	cmp	r3, #1
10000e70:	d001      	beq.n	10000e76 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000e72:	2301      	movs	r3, #1
10000e74:	e21e      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e7a:	699b      	ldr	r3, [r3, #24]
10000e7c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000e80:	687b      	ldr	r3, [r7, #4]
10000e82:	691b      	ldr	r3, [r3, #16]
10000e84:	021b      	lsls	r3, r3, #8
10000e86:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e8a:	4313      	orrs	r3, r2
10000e8c:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000e94:	f003 0303 	and.w	r3, r3, #3
10000e98:	2b00      	cmp	r3, #0
10000e9a:	d10f      	bne.n	10000ebc <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000e9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000ea4:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000ea8:	2b02      	cmp	r3, #2
10000eaa:	d047      	beq.n	10000f3c <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000eac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000eb4:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000eb8:	2b02      	cmp	r3, #2
10000eba:	d03f      	beq.n	10000f3c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ec0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000ec4:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000ec8:	2b00      	cmp	r3, #0
10000eca:	d107      	bne.n	10000edc <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ed0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000ed4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000ed8:	2b02      	cmp	r3, #2
10000eda:	d02f      	beq.n	10000f3c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ee0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000ee4:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000ee8:	2b00      	cmp	r3, #0
10000eea:	d107      	bne.n	10000efc <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ef0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000ef4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000ef8:	2b02      	cmp	r3, #2
10000efa:	d01f      	beq.n	10000f3c <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f00:	699b      	ldr	r3, [r3, #24]
10000f02:	f023 0203 	bic.w	r2, r3, #3
10000f06:	687b      	ldr	r3, [r7, #4]
10000f08:	695b      	ldr	r3, [r3, #20]
10000f0a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f0e:	4313      	orrs	r3, r2
10000f10:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000f12:	f7ff fbdb 	bl	100006cc <HAL_GetTick>
10000f16:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000f18:	e008      	b.n	10000f2c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000f1a:	f7ff fbd7 	bl	100006cc <HAL_GetTick>
10000f1e:	4602      	mov	r2, r0
10000f20:	68bb      	ldr	r3, [r7, #8]
10000f22:	1ad3      	subs	r3, r2, r3
10000f24:	2b64      	cmp	r3, #100	; 0x64
10000f26:	d901      	bls.n	10000f2c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000f28:	2303      	movs	r3, #3
10000f2a:	e1c3      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f34:	f003 0304 	and.w	r3, r3, #4
10000f38:	2b04      	cmp	r3, #4
10000f3a:	d1ee      	bne.n	10000f1a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000f3c:	f001 fa6a 	bl	10002414 <HAL_RCC_GetSystemCoreClockFreq>
10000f40:	4603      	mov	r3, r0
10000f42:	4ab3      	ldr	r2, [pc, #716]	; (10001210 <HAL_RCC_OscConfig+0x5b4>)
10000f44:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000f46:	4bb3      	ldr	r3, [pc, #716]	; (10001214 <HAL_RCC_OscConfig+0x5b8>)
10000f48:	681b      	ldr	r3, [r3, #0]
10000f4a:	4618      	mov	r0, r3
10000f4c:	f7ff fb74 	bl	10000638 <HAL_InitTick>
10000f50:	4603      	mov	r3, r0
10000f52:	2b00      	cmp	r3, #0
10000f54:	d069      	beq.n	1000102a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000f56:	2301      	movs	r3, #1
10000f58:	e1ac      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000f5a:	687b      	ldr	r3, [r7, #4]
10000f5c:	68db      	ldr	r3, [r3, #12]
10000f5e:	2b00      	cmp	r3, #0
10000f60:	d049      	beq.n	10000ff6 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000f62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f66:	68db      	ldr	r3, [r3, #12]
10000f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f6c:	f043 0301 	orr.w	r3, r3, #1
10000f70:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f72:	f7ff fbab 	bl	100006cc <HAL_GetTick>
10000f76:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000f78:	e008      	b.n	10000f8c <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000f7a:	f7ff fba7 	bl	100006cc <HAL_GetTick>
10000f7e:	4602      	mov	r2, r0
10000f80:	68bb      	ldr	r3, [r7, #8]
10000f82:	1ad3      	subs	r3, r2, r3
10000f84:	2b64      	cmp	r3, #100	; 0x64
10000f86:	d901      	bls.n	10000f8c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000f88:	2303      	movs	r3, #3
10000f8a:	e193      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f90:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f94:	f003 0301 	and.w	r3, r3, #1
10000f98:	2b01      	cmp	r3, #1
10000f9a:	d1ee      	bne.n	10000f7a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fa0:	699b      	ldr	r3, [r3, #24]
10000fa2:	f023 0203 	bic.w	r2, r3, #3
10000fa6:	687b      	ldr	r3, [r7, #4]
10000fa8:	695b      	ldr	r3, [r3, #20]
10000faa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000fae:	4313      	orrs	r3, r2
10000fb0:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000fb2:	f7ff fb8b 	bl	100006cc <HAL_GetTick>
10000fb6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000fb8:	e008      	b.n	10000fcc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000fba:	f7ff fb87 	bl	100006cc <HAL_GetTick>
10000fbe:	4602      	mov	r2, r0
10000fc0:	68bb      	ldr	r3, [r7, #8]
10000fc2:	1ad3      	subs	r3, r2, r3
10000fc4:	2b64      	cmp	r3, #100	; 0x64
10000fc6:	d901      	bls.n	10000fcc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000fc8:	2303      	movs	r3, #3
10000fca:	e173      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fd0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000fd4:	f003 0304 	and.w	r3, r3, #4
10000fd8:	2b04      	cmp	r3, #4
10000fda:	d1ee      	bne.n	10000fba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fe0:	699b      	ldr	r3, [r3, #24]
10000fe2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000fe6:	687b      	ldr	r3, [r7, #4]
10000fe8:	691b      	ldr	r3, [r3, #16]
10000fea:	021b      	lsls	r3, r3, #8
10000fec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000ff0:	4313      	orrs	r3, r2
10000ff2:	618b      	str	r3, [r1, #24]
10000ff4:	e01a      	b.n	1000102c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ffa:	2201      	movs	r2, #1
10000ffc:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000ffe:	f7ff fb65 	bl	100006cc <HAL_GetTick>
10001002:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001004:	e008      	b.n	10001018 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001006:	f7ff fb61 	bl	100006cc <HAL_GetTick>
1000100a:	4602      	mov	r2, r0
1000100c:	68bb      	ldr	r3, [r7, #8]
1000100e:	1ad3      	subs	r3, r2, r3
10001010:	2b64      	cmp	r3, #100	; 0x64
10001012:	d901      	bls.n	10001018 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10001014:	2303      	movs	r3, #3
10001016:	e14d      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001018:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000101c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001020:	f003 0301 	and.w	r3, r3, #1
10001024:	2b01      	cmp	r3, #1
10001026:	d0ee      	beq.n	10001006 <HAL_RCC_OscConfig+0x3aa>
10001028:	e000      	b.n	1000102c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000102a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
1000102c:	687b      	ldr	r3, [r7, #4]
1000102e:	681b      	ldr	r3, [r3, #0]
10001030:	f003 0310 	and.w	r3, r3, #16
10001034:	2b00      	cmp	r3, #0
10001036:	f000 8091 	beq.w	1000115c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000103a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000103e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001042:	f003 0303 	and.w	r3, r3, #3
10001046:	2b02      	cmp	r3, #2
10001048:	d107      	bne.n	1000105a <HAL_RCC_OscConfig+0x3fe>
1000104a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000104e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001052:	f003 0302 	and.w	r3, r3, #2
10001056:	2b02      	cmp	r3, #2
10001058:	d01e      	beq.n	10001098 <HAL_RCC_OscConfig+0x43c>
1000105a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000105e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001060:	f003 0303 	and.w	r3, r3, #3
10001064:	2b02      	cmp	r3, #2
10001066:	d107      	bne.n	10001078 <HAL_RCC_OscConfig+0x41c>
10001068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000106e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001076:	d00f      	beq.n	10001098 <HAL_RCC_OscConfig+0x43c>
10001078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000107c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001080:	f003 0303 	and.w	r3, r3, #3
10001084:	2b02      	cmp	r3, #2
10001086:	d122      	bne.n	100010ce <HAL_RCC_OscConfig+0x472>
10001088:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000108c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001090:	f003 0302 	and.w	r3, r3, #2
10001094:	2b02      	cmp	r3, #2
10001096:	d11a      	bne.n	100010ce <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000109c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100010a0:	f003 0310 	and.w	r3, r3, #16
100010a4:	2b10      	cmp	r3, #16
100010a6:	d105      	bne.n	100010b4 <HAL_RCC_OscConfig+0x458>
100010a8:	687b      	ldr	r3, [r7, #4]
100010aa:	69db      	ldr	r3, [r3, #28]
100010ac:	2b10      	cmp	r3, #16
100010ae:	d001      	beq.n	100010b4 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
100010b0:	2301      	movs	r3, #1
100010b2:	e0ff      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100010b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010b8:	69db      	ldr	r3, [r3, #28]
100010ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
100010be:	687b      	ldr	r3, [r7, #4]
100010c0:	6a1b      	ldr	r3, [r3, #32]
100010c2:	021b      	lsls	r3, r3, #8
100010c4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100010c8:	4313      	orrs	r3, r2
100010ca:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100010cc:	e046      	b.n	1000115c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
100010ce:	687b      	ldr	r3, [r7, #4]
100010d0:	69db      	ldr	r3, [r3, #28]
100010d2:	2b00      	cmp	r3, #0
100010d4:	d029      	beq.n	1000112a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
100010d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010da:	68db      	ldr	r3, [r3, #12]
100010dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100010e0:	f043 0310 	orr.w	r3, r3, #16
100010e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100010e6:	f7ff faf1 	bl	100006cc <HAL_GetTick>
100010ea:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100010ec:	e008      	b.n	10001100 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100010ee:	f7ff faed 	bl	100006cc <HAL_GetTick>
100010f2:	4602      	mov	r2, r0
100010f4:	68bb      	ldr	r3, [r7, #8]
100010f6:	1ad3      	subs	r3, r2, r3
100010f8:	2b64      	cmp	r3, #100	; 0x64
100010fa:	d901      	bls.n	10001100 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100010fc:	2303      	movs	r3, #3
100010fe:	e0d9      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001104:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001108:	f003 0310 	and.w	r3, r3, #16
1000110c:	2b10      	cmp	r3, #16
1000110e:	d1ee      	bne.n	100010ee <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001114:	69db      	ldr	r3, [r3, #28]
10001116:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
1000111a:	687b      	ldr	r3, [r7, #4]
1000111c:	6a1b      	ldr	r3, [r3, #32]
1000111e:	021b      	lsls	r3, r3, #8
10001120:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001124:	4313      	orrs	r3, r2
10001126:	61cb      	str	r3, [r1, #28]
10001128:	e018      	b.n	1000115c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
1000112a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000112e:	2210      	movs	r2, #16
10001130:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001132:	f7ff facb 	bl	100006cc <HAL_GetTick>
10001136:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001138:	e008      	b.n	1000114c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000113a:	f7ff fac7 	bl	100006cc <HAL_GetTick>
1000113e:	4602      	mov	r2, r0
10001140:	68bb      	ldr	r3, [r7, #8]
10001142:	1ad3      	subs	r3, r2, r3
10001144:	2b64      	cmp	r3, #100	; 0x64
10001146:	d901      	bls.n	1000114c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10001148:	2303      	movs	r3, #3
1000114a:	e0b3      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000114c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001150:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001154:	f003 0310 	and.w	r3, r3, #16
10001158:	2b10      	cmp	r3, #16
1000115a:	d0ee      	beq.n	1000113a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1000115c:	687b      	ldr	r3, [r7, #4]
1000115e:	681b      	ldr	r3, [r3, #0]
10001160:	f003 0308 	and.w	r3, r3, #8
10001164:	2b00      	cmp	r3, #0
10001166:	d042      	beq.n	100011ee <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001168:	687b      	ldr	r3, [r7, #4]
1000116a:	699b      	ldr	r3, [r3, #24]
1000116c:	2b00      	cmp	r3, #0
1000116e:	d01f      	beq.n	100011b0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001174:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000117c:	f043 0301 	orr.w	r3, r3, #1
10001180:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001184:	f7ff faa2 	bl	100006cc <HAL_GetTick>
10001188:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000118a:	e008      	b.n	1000119e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000118c:	f7ff fa9e 	bl	100006cc <HAL_GetTick>
10001190:	4602      	mov	r2, r0
10001192:	68bb      	ldr	r3, [r7, #8]
10001194:	1ad3      	subs	r3, r2, r3
10001196:	2b64      	cmp	r3, #100	; 0x64
10001198:	d901      	bls.n	1000119e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000119a:	2303      	movs	r3, #3
1000119c:	e08a      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000119e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100011a6:	f003 0302 	and.w	r3, r3, #2
100011aa:	2b02      	cmp	r3, #2
100011ac:	d1ee      	bne.n	1000118c <HAL_RCC_OscConfig+0x530>
100011ae:	e01e      	b.n	100011ee <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100011b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011b4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100011b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011bc:	f023 0301 	bic.w	r3, r3, #1
100011c0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100011c4:	f7ff fa82 	bl	100006cc <HAL_GetTick>
100011c8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100011ca:	e008      	b.n	100011de <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100011cc:	f7ff fa7e 	bl	100006cc <HAL_GetTick>
100011d0:	4602      	mov	r2, r0
100011d2:	68bb      	ldr	r3, [r7, #8]
100011d4:	1ad3      	subs	r3, r2, r3
100011d6:	2b64      	cmp	r3, #100	; 0x64
100011d8:	d901      	bls.n	100011de <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100011da:	2303      	movs	r3, #3
100011dc:	e06a      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100011de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100011e6:	f003 0302 	and.w	r3, r3, #2
100011ea:	2b02      	cmp	r3, #2
100011ec:	d0ee      	beq.n	100011cc <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100011ee:	687b      	ldr	r3, [r7, #4]
100011f0:	681b      	ldr	r3, [r3, #0]
100011f2:	f003 0304 	and.w	r3, r3, #4
100011f6:	2b00      	cmp	r3, #0
100011f8:	d02b      	beq.n	10001252 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100011fa:	4b07      	ldr	r3, [pc, #28]	; (10001218 <HAL_RCC_OscConfig+0x5bc>)
100011fc:	681b      	ldr	r3, [r3, #0]
100011fe:	4a06      	ldr	r2, [pc, #24]	; (10001218 <HAL_RCC_OscConfig+0x5bc>)
10001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10001204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10001206:	f7ff fa61 	bl	100006cc <HAL_GetTick>
1000120a:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000120c:	e00f      	b.n	1000122e <HAL_RCC_OscConfig+0x5d2>
1000120e:	bf00      	nop
10001210:	10020000 	.word	0x10020000
10001214:	10020004 	.word	0x10020004
10001218:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
1000121c:	f7ff fa56 	bl	100006cc <HAL_GetTick>
10001220:	4602      	mov	r2, r0
10001222:	68bb      	ldr	r3, [r7, #8]
10001224:	1ad3      	subs	r3, r2, r3
10001226:	2b64      	cmp	r3, #100	; 0x64
10001228:	d901      	bls.n	1000122e <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000122a:	2303      	movs	r3, #3
1000122c:	e042      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000122e:	4b23      	ldr	r3, [pc, #140]	; (100012bc <HAL_RCC_OscConfig+0x660>)
10001230:	681b      	ldr	r3, [r3, #0]
10001232:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001236:	2b00      	cmp	r3, #0
10001238:	d0f0      	beq.n	1000121c <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000123a:	687b      	ldr	r3, [r7, #4]
1000123c:	689b      	ldr	r3, [r3, #8]
1000123e:	4618      	mov	r0, r3
10001240:	f000 f8a9 	bl	10001396 <HAL_RCC_LSEConfig>
10001244:	4603      	mov	r3, r0
10001246:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10001248:	7bfb      	ldrb	r3, [r7, #15]
1000124a:	2b00      	cmp	r3, #0
1000124c:	d001      	beq.n	10001252 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
1000124e:	7bfb      	ldrb	r3, [r7, #15]
10001250:	e030      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001252:	687b      	ldr	r3, [r7, #4]
10001254:	3324      	adds	r3, #36	; 0x24
10001256:	4618      	mov	r0, r3
10001258:	f000 f91a 	bl	10001490 <RCC_PLL1_Config>
1000125c:	4603      	mov	r3, r0
1000125e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001260:	7bfb      	ldrb	r3, [r7, #15]
10001262:	2b00      	cmp	r3, #0
10001264:	d001      	beq.n	1000126a <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001266:	7bfb      	ldrb	r3, [r7, #15]
10001268:	e024      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000126a:	687b      	ldr	r3, [r7, #4]
1000126c:	3360      	adds	r3, #96	; 0x60
1000126e:	4618      	mov	r0, r3
10001270:	f001 f96c 	bl	1000254c <RCCEx_PLL2_Config>
10001274:	4603      	mov	r3, r0
10001276:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001278:	7bfb      	ldrb	r3, [r7, #15]
1000127a:	2b00      	cmp	r3, #0
1000127c:	d001      	beq.n	10001282 <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000127e:	7bfb      	ldrb	r3, [r7, #15]
10001280:	e018      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001282:	687b      	ldr	r3, [r7, #4]
10001284:	339c      	adds	r3, #156	; 0x9c
10001286:	4618      	mov	r0, r3
10001288:	f001 fae2 	bl	10002850 <RCCEx_PLL3_Config>
1000128c:	4603      	mov	r3, r0
1000128e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001290:	7bfb      	ldrb	r3, [r7, #15]
10001292:	2b00      	cmp	r3, #0
10001294:	d001      	beq.n	1000129a <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10001296:	7bfb      	ldrb	r3, [r7, #15]
10001298:	e00c      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	33d8      	adds	r3, #216	; 0xd8
1000129e:	4618      	mov	r0, r3
100012a0:	f001 fc40 	bl	10002b24 <RCCEx_PLL4_Config>
100012a4:	4603      	mov	r3, r0
100012a6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100012a8:	7bfb      	ldrb	r3, [r7, #15]
100012aa:	2b00      	cmp	r3, #0
100012ac:	d001      	beq.n	100012b2 <HAL_RCC_OscConfig+0x656>
  {
    return result;
100012ae:	7bfb      	ldrb	r3, [r7, #15]
100012b0:	e000      	b.n	100012b4 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
100012b2:	2300      	movs	r3, #0
}
100012b4:	4618      	mov	r0, r3
100012b6:	3710      	adds	r7, #16
100012b8:	46bd      	mov	sp, r7
100012ba:	bd80      	pop	{r7, pc}
100012bc:	50001000 	.word	0x50001000

100012c0 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100012c0:	b580      	push	{r7, lr}
100012c2:	b084      	sub	sp, #16
100012c4:	af00      	add	r7, sp, #0
100012c6:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100012c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
100012d0:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100012d2:	f7ff f9fb 	bl	100006cc <HAL_GetTick>
100012d6:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100012d8:	e008      	b.n	100012ec <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100012da:	f7ff f9f7 	bl	100006cc <HAL_GetTick>
100012de:	4602      	mov	r2, r0
100012e0:	68fb      	ldr	r3, [r7, #12]
100012e2:	1ad3      	subs	r3, r2, r3
100012e4:	2b64      	cmp	r3, #100	; 0x64
100012e6:	d901      	bls.n	100012ec <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100012e8:	2303      	movs	r3, #3
100012ea:	e050      	b.n	1000138e <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100012ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100012f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
100012f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100012fc:	d0ed      	beq.n	100012da <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100012fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001302:	f44f 6290 	mov.w	r2, #1152	; 0x480
10001306:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10001308:	687b      	ldr	r3, [r7, #4]
1000130a:	2b00      	cmp	r3, #0
1000130c:	d03e      	beq.n	1000138c <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
1000130e:	687b      	ldr	r3, [r7, #4]
10001310:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10001314:	d108      	bne.n	10001328 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000131a:	68db      	ldr	r3, [r3, #12]
1000131c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10001324:	60d3      	str	r3, [r2, #12]
10001326:	e013      	b.n	10001350 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10001328:	687b      	ldr	r3, [r7, #4]
1000132a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
1000132e:	d10f      	bne.n	10001350 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001330:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001334:	68db      	ldr	r3, [r3, #12]
10001336:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000133a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000133e:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001344:	68db      	ldr	r3, [r3, #12]
10001346:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1000134e:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001354:	68db      	ldr	r3, [r3, #12]
10001356:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000135e:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001360:	f7ff f9b4 	bl	100006cc <HAL_GetTick>
10001364:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001366:	e008      	b.n	1000137a <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001368:	f7ff f9b0 	bl	100006cc <HAL_GetTick>
1000136c:	4602      	mov	r2, r0
1000136e:	68fb      	ldr	r3, [r7, #12]
10001370:	1ad3      	subs	r3, r2, r3
10001372:	2b64      	cmp	r3, #100	; 0x64
10001374:	d901      	bls.n	1000137a <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001376:	2303      	movs	r3, #3
10001378:	e009      	b.n	1000138e <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000137a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000137e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000138a:	d1ed      	bne.n	10001368 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
1000138c:	2300      	movs	r3, #0
}
1000138e:	4618      	mov	r0, r3
10001390:	3710      	adds	r7, #16
10001392:	46bd      	mov	sp, r7
10001394:	bd80      	pop	{r7, pc}

10001396 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10001396:	b580      	push	{r7, lr}
10001398:	b084      	sub	sp, #16
1000139a:	af00      	add	r7, sp, #0
1000139c:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000139e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013aa:	f023 0301 	bic.w	r3, r3, #1
100013ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100013b2:	f7ff f98b 	bl	100006cc <HAL_GetTick>
100013b6:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100013b8:	e00a      	b.n	100013d0 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100013ba:	f7ff f987 	bl	100006cc <HAL_GetTick>
100013be:	4602      	mov	r2, r0
100013c0:	68fb      	ldr	r3, [r7, #12]
100013c2:	1ad3      	subs	r3, r2, r3
100013c4:	f241 3288 	movw	r2, #5000	; 0x1388
100013c8:	4293      	cmp	r3, r2
100013ca:	d901      	bls.n	100013d0 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100013cc:	2303      	movs	r3, #3
100013ce:	e05b      	b.n	10001488 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100013d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013d8:	f003 0304 	and.w	r3, r3, #4
100013dc:	2b04      	cmp	r3, #4
100013de:	d0ec      	beq.n	100013ba <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100013e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100013e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013ec:	f023 030a 	bic.w	r3, r3, #10
100013f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100013f4:	687b      	ldr	r3, [r7, #4]
100013f6:	2b00      	cmp	r3, #0
100013f8:	d045      	beq.n	10001486 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100013fa:	687b      	ldr	r3, [r7, #4]
100013fc:	2b03      	cmp	r3, #3
100013fe:	d10a      	bne.n	10001416 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001404:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001408:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000140c:	f043 0302 	orr.w	r3, r3, #2
10001410:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10001414:	e016      	b.n	10001444 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10001416:	687b      	ldr	r3, [r7, #4]
10001418:	2b0b      	cmp	r3, #11
1000141a:	d113      	bne.n	10001444 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
1000141c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001420:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001424:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001428:	f043 0308 	orr.w	r3, r3, #8
1000142c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001430:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001434:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001438:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000143c:	f043 0302 	orr.w	r3, r3, #2
10001440:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001444:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000144c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001450:	f043 0301 	orr.w	r3, r3, #1
10001454:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001458:	f7ff f938 	bl	100006cc <HAL_GetTick>
1000145c:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000145e:	e00a      	b.n	10001476 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001460:	f7ff f934 	bl	100006cc <HAL_GetTick>
10001464:	4602      	mov	r2, r0
10001466:	68fb      	ldr	r3, [r7, #12]
10001468:	1ad3      	subs	r3, r2, r3
1000146a:	f241 3288 	movw	r2, #5000	; 0x1388
1000146e:	4293      	cmp	r3, r2
10001470:	d901      	bls.n	10001476 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001472:	2303      	movs	r3, #3
10001474:	e008      	b.n	10001488 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000147a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000147e:	f003 0304 	and.w	r3, r3, #4
10001482:	2b04      	cmp	r3, #4
10001484:	d1ec      	bne.n	10001460 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10001486:	2300      	movs	r3, #0
}
10001488:	4618      	mov	r0, r3
1000148a:	3710      	adds	r7, #16
1000148c:	46bd      	mov	sp, r7
1000148e:	bd80      	pop	{r7, pc}

10001490 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001490:	b580      	push	{r7, lr}
10001492:	b084      	sub	sp, #16
10001494:	af00      	add	r7, sp, #0
10001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10001498:	687b      	ldr	r3, [r7, #4]
1000149a:	681b      	ldr	r3, [r3, #0]
1000149c:	2b00      	cmp	r3, #0
1000149e:	f000 8174 	beq.w	1000178a <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100014a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a6:	6a1b      	ldr	r3, [r3, #32]
100014a8:	f003 0303 	and.w	r3, r3, #3
100014ac:	2b02      	cmp	r3, #2
100014ae:	d108      	bne.n	100014c2 <RCC_PLL1_Config+0x32>
100014b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014b4:	6a1b      	ldr	r3, [r3, #32]
100014b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100014ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100014be:	f000 8162 	beq.w	10001786 <RCC_PLL1_Config+0x2f6>
100014c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014c6:	6a1b      	ldr	r3, [r3, #32]
100014c8:	f003 0303 	and.w	r3, r3, #3
100014cc:	2b03      	cmp	r3, #3
100014ce:	d108      	bne.n	100014e2 <RCC_PLL1_Config+0x52>
100014d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014d4:	6a1b      	ldr	r3, [r3, #32]
100014d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100014da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100014de:	f000 8152 	beq.w	10001786 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100014e2:	687b      	ldr	r3, [r7, #4]
100014e4:	681b      	ldr	r3, [r3, #0]
100014e6:	2b02      	cmp	r3, #2
100014e8:	f040 8123 	bne.w	10001732 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100014ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100014fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000150c:	f023 0301 	bic.w	r3, r3, #1
10001510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001514:	f7ff f8da 	bl	100006cc <HAL_GetTick>
10001518:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000151a:	e008      	b.n	1000152e <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000151c:	f7ff f8d6 	bl	100006cc <HAL_GetTick>
10001520:	4602      	mov	r2, r0
10001522:	68fb      	ldr	r3, [r7, #12]
10001524:	1ad3      	subs	r3, r2, r3
10001526:	2b64      	cmp	r3, #100	; 0x64
10001528:	d901      	bls.n	1000152e <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000152a:	2303      	movs	r3, #3
1000152c:	e12e      	b.n	1000178c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000152e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001536:	f003 0302 	and.w	r3, r3, #2
1000153a:	2b02      	cmp	r3, #2
1000153c:	d0ee      	beq.n	1000151c <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
1000153e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001544:	f003 0307 	and.w	r3, r3, #7
10001548:	2b02      	cmp	r3, #2
1000154a:	d112      	bne.n	10001572 <RCC_PLL1_Config+0xe2>
1000154c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000155a:	d10a      	bne.n	10001572 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000155c:	687b      	ldr	r3, [r7, #4]
1000155e:	685a      	ldr	r2, [r3, #4]
10001560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001566:	f003 0303 	and.w	r3, r3, #3
1000156a:	429a      	cmp	r2, r3
1000156c:	d00c      	beq.n	10001588 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000156e:	2301      	movs	r3, #1
10001570:	e10c      	b.n	1000178c <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001578:	f023 0203 	bic.w	r2, r3, #3
1000157c:	687b      	ldr	r3, [r7, #4]
1000157e:	685b      	ldr	r3, [r3, #4]
10001580:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001584:	4313      	orrs	r3, r2
10001586:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001588:	e008      	b.n	1000159c <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000158a:	f7ff f89f 	bl	100006cc <HAL_GetTick>
1000158e:	4602      	mov	r2, r0
10001590:	68fb      	ldr	r3, [r7, #12]
10001592:	1ad3      	subs	r3, r2, r3
10001594:	2b64      	cmp	r3, #100	; 0x64
10001596:	d901      	bls.n	1000159c <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10001598:	2303      	movs	r3, #3
1000159a:	e0f7      	b.n	1000178c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000159c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100015a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100015a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100015aa:	d1ee      	bne.n	1000158a <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
100015ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
100015b4:	4b77      	ldr	r3, [pc, #476]	; (10001794 <RCC_PLL1_Config+0x304>)
100015b6:	4013      	ands	r3, r2
100015b8:	687a      	ldr	r2, [r7, #4]
100015ba:	68d2      	ldr	r2, [r2, #12]
100015bc:	1e51      	subs	r1, r2, #1
100015be:	687a      	ldr	r2, [r7, #4]
100015c0:	6892      	ldr	r2, [r2, #8]
100015c2:	3a01      	subs	r2, #1
100015c4:	0412      	lsls	r2, r2, #16
100015c6:	430a      	orrs	r2, r1
100015c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100015cc:	4313      	orrs	r3, r2
100015ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
100015d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100015da:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100015de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100015e2:	687a      	ldr	r2, [r7, #4]
100015e4:	6912      	ldr	r2, [r2, #16]
100015e6:	1e51      	subs	r1, r2, #1
100015e8:	687a      	ldr	r2, [r7, #4]
100015ea:	6952      	ldr	r2, [r2, #20]
100015ec:	3a01      	subs	r2, #1
100015ee:	0212      	lsls	r2, r2, #8
100015f0:	4311      	orrs	r1, r2
100015f2:	687a      	ldr	r2, [r7, #4]
100015f4:	6992      	ldr	r2, [r2, #24]
100015f6:	3a01      	subs	r2, #1
100015f8:	0412      	lsls	r2, r2, #16
100015fa:	430a      	orrs	r2, r1
100015fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001600:	4313      	orrs	r3, r2
10001602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10001606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000160a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000160e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000161a:	687b      	ldr	r3, [r7, #4]
1000161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000161e:	2b02      	cmp	r3, #2
10001620:	d003      	beq.n	1000162a <RCC_PLL1_Config+0x19a>
10001622:	687b      	ldr	r3, [r7, #4]
10001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001626:	2b00      	cmp	r3, #0
10001628:	d10c      	bne.n	10001644 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000162a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000162e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000163a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000163e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10001642:	e00f      	b.n	10001664 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10001644:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000164c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001650:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001654:	687a      	ldr	r2, [r7, #4]
10001656:	6a12      	ldr	r2, [r2, #32]
10001658:	00d2      	lsls	r2, r2, #3
1000165a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000165e:	4313      	orrs	r3, r2
10001660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000166c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001674:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001678:	687b      	ldr	r3, [r7, #4]
1000167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000167c:	2b02      	cmp	r3, #2
1000167e:	d124      	bne.n	100016ca <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001680:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10001688:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000168c:	687b      	ldr	r3, [r7, #4]
1000168e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001690:	687b      	ldr	r3, [r7, #4]
10001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001694:	4319      	orrs	r1, r3
10001696:	687b      	ldr	r3, [r7, #4]
10001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000169a:	4319      	orrs	r1, r3
1000169c:	687b      	ldr	r3, [r7, #4]
1000169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100016a0:	4319      	orrs	r1, r3
100016a2:	687b      	ldr	r3, [r7, #4]
100016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100016a6:	041b      	lsls	r3, r3, #16
100016a8:	430b      	orrs	r3, r1
100016aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100016ae:	4313      	orrs	r3, r2
100016b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100016b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016c0:	f043 0304 	orr.w	r3, r3, #4
100016c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
100016c8:	e009      	b.n	100016de <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100016ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016d6:	f023 0304 	bic.w	r3, r3, #4
100016da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100016de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100016e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016ea:	f043 0301 	orr.w	r3, r3, #1
100016ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100016f2:	f7fe ffeb 	bl	100006cc <HAL_GetTick>
100016f6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100016f8:	e008      	b.n	1000170c <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100016fa:	f7fe ffe7 	bl	100006cc <HAL_GetTick>
100016fe:	4602      	mov	r2, r0
10001700:	68fb      	ldr	r3, [r7, #12]
10001702:	1ad3      	subs	r3, r2, r3
10001704:	2b64      	cmp	r3, #100	; 0x64
10001706:	d901      	bls.n	1000170c <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10001708:	2303      	movs	r3, #3
1000170a:	e03f      	b.n	1000178c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000170c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001714:	f003 0302 	and.w	r3, r3, #2
10001718:	2b02      	cmp	r3, #2
1000171a:	d1ee      	bne.n	100016fa <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000171c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001728:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000172c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001730:	e02b      	b.n	1000178a <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001732:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000173a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000173e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001742:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10001746:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000174a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000174e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001752:	f023 0301 	bic.w	r3, r3, #1
10001756:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000175a:	f7fe ffb7 	bl	100006cc <HAL_GetTick>
1000175e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001760:	e008      	b.n	10001774 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001762:	f7fe ffb3 	bl	100006cc <HAL_GetTick>
10001766:	4602      	mov	r2, r0
10001768:	68fb      	ldr	r3, [r7, #12]
1000176a:	1ad3      	subs	r3, r2, r3
1000176c:	2b64      	cmp	r3, #100	; 0x64
1000176e:	d901      	bls.n	10001774 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001770:	2303      	movs	r3, #3
10001772:	e00b      	b.n	1000178c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000177c:	f003 0302 	and.w	r3, r3, #2
10001780:	2b02      	cmp	r3, #2
10001782:	d0ee      	beq.n	10001762 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001784:	e001      	b.n	1000178a <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001786:	2301      	movs	r3, #1
10001788:	e000      	b.n	1000178c <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000178a:	2300      	movs	r3, #0

}
1000178c:	4618      	mov	r0, r3
1000178e:	3710      	adds	r7, #16
10001790:	46bd      	mov	sp, r7
10001792:	bd80      	pop	{r7, pc}
10001794:	ffc0fe00 	.word	0xffc0fe00

10001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10001798:	b580      	push	{r7, lr}
1000179a:	b084      	sub	sp, #16
1000179c:	af00      	add	r7, sp, #0
1000179e:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100017a0:	2300      	movs	r3, #0
100017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100017a4:	687b      	ldr	r3, [r7, #4]
100017a6:	2b00      	cmp	r3, #0
100017a8:	d101      	bne.n	100017ae <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100017aa:	2301      	movs	r3, #1
100017ac:	e102      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100017ae:	687b      	ldr	r3, [r7, #4]
100017b0:	681b      	ldr	r3, [r3, #0]
100017b2:	f003 0301 	and.w	r3, r3, #1
100017b6:	2b00      	cmp	r3, #0
100017b8:	d00b      	beq.n	100017d2 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100017ba:	687b      	ldr	r3, [r7, #4]
100017bc:	3304      	adds	r3, #4
100017be:	4618      	mov	r0, r3
100017c0:	f000 f8fc 	bl	100019bc <RCC_MPUConfig>
100017c4:	4603      	mov	r3, r0
100017c6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100017c8:	7bfb      	ldrb	r3, [r7, #15]
100017ca:	2b00      	cmp	r3, #0
100017cc:	d001      	beq.n	100017d2 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100017ce:	7bfb      	ldrb	r3, [r7, #15]
100017d0:	e0f0      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100017d2:	687b      	ldr	r3, [r7, #4]
100017d4:	681b      	ldr	r3, [r3, #0]
100017d6:	f003 0302 	and.w	r3, r3, #2
100017da:	2b00      	cmp	r3, #0
100017dc:	d00b      	beq.n	100017f6 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100017de:	687b      	ldr	r3, [r7, #4]
100017e0:	330c      	adds	r3, #12
100017e2:	4618      	mov	r0, r3
100017e4:	f000 f960 	bl	10001aa8 <RCC_AXISSConfig>
100017e8:	4603      	mov	r3, r0
100017ea:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100017ec:	7bfb      	ldrb	r3, [r7, #15]
100017ee:	2b00      	cmp	r3, #0
100017f0:	d001      	beq.n	100017f6 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100017f2:	7bfb      	ldrb	r3, [r7, #15]
100017f4:	e0de      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100017f6:	687b      	ldr	r3, [r7, #4]
100017f8:	681b      	ldr	r3, [r3, #0]
100017fa:	f003 0304 	and.w	r3, r3, #4
100017fe:	2b00      	cmp	r3, #0
10001800:	d00b      	beq.n	1000181a <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10001802:	687b      	ldr	r3, [r7, #4]
10001804:	3314      	adds	r3, #20
10001806:	4618      	mov	r0, r3
10001808:	f000 f9e6 	bl	10001bd8 <RCC_MCUConfig>
1000180c:	4603      	mov	r3, r0
1000180e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001810:	7bfb      	ldrb	r3, [r7, #15]
10001812:	2b00      	cmp	r3, #0
10001814:	d001      	beq.n	1000181a <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10001816:	7bfb      	ldrb	r3, [r7, #15]
10001818:	e0cc      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000181a:	687b      	ldr	r3, [r7, #4]
1000181c:	681b      	ldr	r3, [r3, #0]
1000181e:	f003 0308 	and.w	r3, r3, #8
10001822:	2b00      	cmp	r3, #0
10001824:	d020      	beq.n	10001868 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10001826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000182c:	f023 0207 	bic.w	r2, r3, #7
10001830:	687b      	ldr	r3, [r7, #4]
10001832:	69db      	ldr	r3, [r3, #28]
10001834:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001838:	4313      	orrs	r3, r2
1000183a:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000183c:	f7fe ff46 	bl	100006cc <HAL_GetTick>
10001840:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001842:	e009      	b.n	10001858 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001844:	f7fe ff42 	bl	100006cc <HAL_GetTick>
10001848:	4602      	mov	r2, r0
1000184a:	68bb      	ldr	r3, [r7, #8]
1000184c:	1ad3      	subs	r3, r2, r3
1000184e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001852:	d901      	bls.n	10001858 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001854:	2303      	movs	r3, #3
10001856:	e0ad      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001858:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000185e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001866:	d1ed      	bne.n	10001844 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10001868:	687b      	ldr	r3, [r7, #4]
1000186a:	681b      	ldr	r3, [r3, #0]
1000186c:	f003 0310 	and.w	r3, r3, #16
10001870:	2b00      	cmp	r3, #0
10001872:	d020      	beq.n	100018b6 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001874:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000187a:	f023 0207 	bic.w	r2, r3, #7
1000187e:	687b      	ldr	r3, [r7, #4]
10001880:	6a1b      	ldr	r3, [r3, #32]
10001882:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001886:	4313      	orrs	r3, r2
10001888:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000188a:	f7fe ff1f 	bl	100006cc <HAL_GetTick>
1000188e:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001890:	e009      	b.n	100018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001892:	f7fe ff1b 	bl	100006cc <HAL_GetTick>
10001896:	4602      	mov	r2, r0
10001898:	68bb      	ldr	r3, [r7, #8]
1000189a:	1ad3      	subs	r3, r2, r3
1000189c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100018a0:	d901      	bls.n	100018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100018a2:	2303      	movs	r3, #3
100018a4:	e086      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100018a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100018ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100018b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100018b4:	d1ed      	bne.n	10001892 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100018b6:	687b      	ldr	r3, [r7, #4]
100018b8:	681b      	ldr	r3, [r3, #0]
100018ba:	f003 0320 	and.w	r3, r3, #32
100018be:	2b00      	cmp	r3, #0
100018c0:	d023      	beq.n	1000190a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
100018c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018c6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100018ca:	f023 0207 	bic.w	r2, r3, #7
100018ce:	687b      	ldr	r3, [r7, #4]
100018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100018d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100018d6:	4313      	orrs	r3, r2
100018d8:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100018dc:	f7fe fef6 	bl	100006cc <HAL_GetTick>
100018e0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100018e2:	e009      	b.n	100018f8 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018e4:	f7fe fef2 	bl	100006cc <HAL_GetTick>
100018e8:	4602      	mov	r2, r0
100018ea:	68bb      	ldr	r3, [r7, #8]
100018ec:	1ad3      	subs	r3, r2, r3
100018ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100018f2:	d901      	bls.n	100018f8 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100018f4:	2303      	movs	r3, #3
100018f6:	e05d      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100018f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018fc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001908:	d1ec      	bne.n	100018e4 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000190a:	687b      	ldr	r3, [r7, #4]
1000190c:	681b      	ldr	r3, [r3, #0]
1000190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
10001912:	2b00      	cmp	r3, #0
10001914:	d023      	beq.n	1000195e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10001916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000191a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000191e:	f023 0207 	bic.w	r2, r3, #7
10001922:	687b      	ldr	r3, [r7, #4]
10001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001926:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000192a:	4313      	orrs	r3, r2
1000192c:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001930:	f7fe fecc 	bl	100006cc <HAL_GetTick>
10001934:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001936:	e009      	b.n	1000194c <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001938:	f7fe fec8 	bl	100006cc <HAL_GetTick>
1000193c:	4602      	mov	r2, r0
1000193e:	68bb      	ldr	r3, [r7, #8]
10001940:	1ad3      	subs	r3, r2, r3
10001942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001946:	d901      	bls.n	1000194c <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001948:	2303      	movs	r3, #3
1000194a:	e033      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000194c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001950:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000195c:	d1ec      	bne.n	10001938 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000195e:	687b      	ldr	r3, [r7, #4]
10001960:	681b      	ldr	r3, [r3, #0]
10001962:	f003 0380 	and.w	r3, r3, #128	; 0x80
10001966:	2b00      	cmp	r3, #0
10001968:	d023      	beq.n	100019b2 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000196a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000196e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001972:	f023 0207 	bic.w	r2, r3, #7
10001976:	687b      	ldr	r3, [r7, #4]
10001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000197a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000197e:	4313      	orrs	r3, r2
10001980:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001984:	f7fe fea2 	bl	100006cc <HAL_GetTick>
10001988:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000198a:	e009      	b.n	100019a0 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000198c:	f7fe fe9e 	bl	100006cc <HAL_GetTick>
10001990:	4602      	mov	r2, r0
10001992:	68bb      	ldr	r3, [r7, #8]
10001994:	1ad3      	subs	r3, r2, r3
10001996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000199a:	d901      	bls.n	100019a0 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
1000199c:	2303      	movs	r3, #3
1000199e:	e009      	b.n	100019b4 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100019a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019a4:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100019a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100019ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100019b0:	d1ec      	bne.n	1000198c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100019b2:	2300      	movs	r3, #0
}
100019b4:	4618      	mov	r0, r3
100019b6:	3710      	adds	r7, #16
100019b8:	46bd      	mov	sp, r7
100019ba:	bd80      	pop	{r7, pc}

100019bc <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
100019bc:	b580      	push	{r7, lr}
100019be:	b084      	sub	sp, #16
100019c0:	af00      	add	r7, sp, #0
100019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
100019c4:	687b      	ldr	r3, [r7, #4]
100019c6:	681b      	ldr	r3, [r3, #0]
100019c8:	2b03      	cmp	r3, #3
100019ca:	d840      	bhi.n	10001a4e <RCC_MPUConfig+0x92>
100019cc:	a201      	add	r2, pc, #4	; (adr r2, 100019d4 <RCC_MPUConfig+0x18>)
100019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100019d2:	bf00      	nop
100019d4:	100019e5 	.word	0x100019e5
100019d8:	100019f9 	.word	0x100019f9
100019dc:	10001a0f 	.word	0x10001a0f
100019e0:	10001a23 	.word	0x10001a23
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100019e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100019ec:	f003 0301 	and.w	r3, r3, #1
100019f0:	2b01      	cmp	r3, #1
100019f2:	d02e      	beq.n	10001a52 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100019f4:	2301      	movs	r3, #1
100019f6:	e053      	b.n	10001aa0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100019f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001a08:	d025      	beq.n	10001a56 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001a0a:	2301      	movs	r3, #1
10001a0c:	e048      	b.n	10001aa0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001a16:	f003 0302 	and.w	r3, r3, #2
10001a1a:	2b02      	cmp	r3, #2
10001a1c:	d01d      	beq.n	10001a5a <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001a1e:	2301      	movs	r3, #1
10001a20:	e03e      	b.n	10001aa0 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001a2a:	f003 0302 	and.w	r3, r3, #2
10001a2e:	2b02      	cmp	r3, #2
10001a30:	d001      	beq.n	10001a36 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001a32:	2301      	movs	r3, #1
10001a34:	e034      	b.n	10001aa0 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001a3c:	f023 0207 	bic.w	r2, r3, #7
10001a40:	687b      	ldr	r3, [r7, #4]
10001a42:	685b      	ldr	r3, [r3, #4]
10001a44:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a48:	4313      	orrs	r3, r2
10001a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10001a4c:	e006      	b.n	10001a5c <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001a4e:	2301      	movs	r3, #1
10001a50:	e026      	b.n	10001aa0 <RCC_MPUConfig+0xe4>
      break;
10001a52:	bf00      	nop
10001a54:	e002      	b.n	10001a5c <RCC_MPUConfig+0xa0>
      break;
10001a56:	bf00      	nop
10001a58:	e000      	b.n	10001a5c <RCC_MPUConfig+0xa0>
      break;
10001a5a:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a60:	6a1b      	ldr	r3, [r3, #32]
10001a62:	f023 0203 	bic.w	r2, r3, #3
10001a66:	687b      	ldr	r3, [r7, #4]
10001a68:	681b      	ldr	r3, [r3, #0]
10001a6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a6e:	4313      	orrs	r3, r2
10001a70:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a72:	f7fe fe2b 	bl	100006cc <HAL_GetTick>
10001a76:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001a78:	e009      	b.n	10001a8e <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a7a:	f7fe fe27 	bl	100006cc <HAL_GetTick>
10001a7e:	4602      	mov	r2, r0
10001a80:	68fb      	ldr	r3, [r7, #12]
10001a82:	1ad3      	subs	r3, r2, r3
10001a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a88:	d901      	bls.n	10001a8e <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001a8a:	2303      	movs	r3, #3
10001a8c:	e008      	b.n	10001aa0 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a92:	6a1b      	ldr	r3, [r3, #32]
10001a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a9c:	d1ed      	bne.n	10001a7a <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001a9e:	2300      	movs	r3, #0
}
10001aa0:	4618      	mov	r0, r3
10001aa2:	3710      	adds	r7, #16
10001aa4:	46bd      	mov	sp, r7
10001aa6:	bd80      	pop	{r7, pc}

10001aa8 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001aa8:	b580      	push	{r7, lr}
10001aaa:	b084      	sub	sp, #16
10001aac:	af00      	add	r7, sp, #0
10001aae:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001ab0:	687b      	ldr	r3, [r7, #4]
10001ab2:	681b      	ldr	r3, [r3, #0]
10001ab4:	2b02      	cmp	r3, #2
10001ab6:	d01b      	beq.n	10001af0 <RCC_AXISSConfig+0x48>
10001ab8:	2b02      	cmp	r3, #2
10001aba:	d823      	bhi.n	10001b04 <RCC_AXISSConfig+0x5c>
10001abc:	2b00      	cmp	r3, #0
10001abe:	d002      	beq.n	10001ac6 <RCC_AXISSConfig+0x1e>
10001ac0:	2b01      	cmp	r3, #1
10001ac2:	d00a      	beq.n	10001ada <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001ac4:	e01e      	b.n	10001b04 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aca:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ace:	f003 0301 	and.w	r3, r3, #1
10001ad2:	2b01      	cmp	r3, #1
10001ad4:	d018      	beq.n	10001b08 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001ad6:	2301      	movs	r3, #1
10001ad8:	e079      	b.n	10001bce <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ade:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001aea:	d00f      	beq.n	10001b0c <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001aec:	2301      	movs	r3, #1
10001aee:	e06e      	b.n	10001bce <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001af0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001af8:	f003 0302 	and.w	r3, r3, #2
10001afc:	2b02      	cmp	r3, #2
10001afe:	d007      	beq.n	10001b10 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001b00:	2301      	movs	r3, #1
10001b02:	e064      	b.n	10001bce <RCC_AXISSConfig+0x126>
      break;
10001b04:	bf00      	nop
10001b06:	e004      	b.n	10001b12 <RCC_AXISSConfig+0x6a>
      break;
10001b08:	bf00      	nop
10001b0a:	e002      	b.n	10001b12 <RCC_AXISSConfig+0x6a>
      break;
10001b0c:	bf00      	nop
10001b0e:	e000      	b.n	10001b12 <RCC_AXISSConfig+0x6a>
      break;
10001b10:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001b18:	f023 0207 	bic.w	r2, r3, #7
10001b1c:	687b      	ldr	r3, [r7, #4]
10001b1e:	681b      	ldr	r3, [r3, #0]
10001b20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b24:	4313      	orrs	r3, r2
10001b26:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001b28:	687b      	ldr	r3, [r7, #4]
10001b2a:	681b      	ldr	r3, [r3, #0]
10001b2c:	2b03      	cmp	r3, #3
10001b2e:	d016      	beq.n	10001b5e <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001b30:	f7fe fdcc 	bl	100006cc <HAL_GetTick>
10001b34:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001b36:	e009      	b.n	10001b4c <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b38:	f7fe fdc8 	bl	100006cc <HAL_GetTick>
10001b3c:	4602      	mov	r2, r0
10001b3e:	68fb      	ldr	r3, [r7, #12]
10001b40:	1ad3      	subs	r3, r2, r3
10001b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b46:	d901      	bls.n	10001b4c <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001b48:	2303      	movs	r3, #3
10001b4a:	e040      	b.n	10001bce <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b5a:	d1ed      	bne.n	10001b38 <RCC_AXISSConfig+0x90>
10001b5c:	e015      	b.n	10001b8a <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001b5e:	f7fe fdb5 	bl	100006cc <HAL_GetTick>
10001b62:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001b64:	e009      	b.n	10001b7a <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b66:	f7fe fdb1 	bl	100006cc <HAL_GetTick>
10001b6a:	4602      	mov	r2, r0
10001b6c:	68fb      	ldr	r3, [r7, #12]
10001b6e:	1ad3      	subs	r3, r2, r3
10001b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b74:	d901      	bls.n	10001b7a <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001b76:	2303      	movs	r3, #3
10001b78:	e029      	b.n	10001bce <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b88:	d0ed      	beq.n	10001b66 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001b8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001b90:	f023 0207 	bic.w	r2, r3, #7
10001b94:	687b      	ldr	r3, [r7, #4]
10001b96:	685b      	ldr	r3, [r3, #4]
10001b98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b9c:	4313      	orrs	r3, r2
10001b9e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ba0:	f7fe fd94 	bl	100006cc <HAL_GetTick>
10001ba4:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001ba6:	e009      	b.n	10001bbc <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ba8:	f7fe fd90 	bl	100006cc <HAL_GetTick>
10001bac:	4602      	mov	r2, r0
10001bae:	68fb      	ldr	r3, [r7, #12]
10001bb0:	1ad3      	subs	r3, r2, r3
10001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001bb6:	d901      	bls.n	10001bbc <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001bb8:	2303      	movs	r3, #3
10001bba:	e008      	b.n	10001bce <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001bca:	d1ed      	bne.n	10001ba8 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001bcc:	2300      	movs	r3, #0
}
10001bce:	4618      	mov	r0, r3
10001bd0:	3710      	adds	r7, #16
10001bd2:	46bd      	mov	sp, r7
10001bd4:	bd80      	pop	{r7, pc}
	...

10001bd8 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001bd8:	b580      	push	{r7, lr}
10001bda:	b084      	sub	sp, #16
10001bdc:	af00      	add	r7, sp, #0
10001bde:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001be0:	687b      	ldr	r3, [r7, #4]
10001be2:	681b      	ldr	r3, [r3, #0]
10001be4:	2b03      	cmp	r3, #3
10001be6:	d834      	bhi.n	10001c52 <RCC_MCUConfig+0x7a>
10001be8:	a201      	add	r2, pc, #4	; (adr r2, 10001bf0 <RCC_MCUConfig+0x18>)
10001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001bee:	bf00      	nop
10001bf0:	10001c01 	.word	0x10001c01
10001bf4:	10001c15 	.word	0x10001c15
10001bf8:	10001c2b 	.word	0x10001c2b
10001bfc:	10001c3f 	.word	0x10001c3f
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c08:	f003 0301 	and.w	r3, r3, #1
10001c0c:	2b01      	cmp	r3, #1
10001c0e:	d022      	beq.n	10001c56 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001c10:	2301      	movs	r3, #1
10001c12:	e081      	b.n	10001d18 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c18:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001c24:	d019      	beq.n	10001c5a <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001c26:	2301      	movs	r3, #1
10001c28:	e076      	b.n	10001d18 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c2e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c32:	f003 0310 	and.w	r3, r3, #16
10001c36:	2b10      	cmp	r3, #16
10001c38:	d011      	beq.n	10001c5e <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001c3a:	2301      	movs	r3, #1
10001c3c:	e06c      	b.n	10001d18 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001c46:	f003 0302 	and.w	r3, r3, #2
10001c4a:	2b02      	cmp	r3, #2
10001c4c:	d009      	beq.n	10001c62 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001c4e:	2301      	movs	r3, #1
10001c50:	e062      	b.n	10001d18 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001c52:	bf00      	nop
10001c54:	e006      	b.n	10001c64 <RCC_MCUConfig+0x8c>
      break;
10001c56:	bf00      	nop
10001c58:	e004      	b.n	10001c64 <RCC_MCUConfig+0x8c>
      break;
10001c5a:	bf00      	nop
10001c5c:	e002      	b.n	10001c64 <RCC_MCUConfig+0x8c>
      break;
10001c5e:	bf00      	nop
10001c60:	e000      	b.n	10001c64 <RCC_MCUConfig+0x8c>
      break;
10001c62:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001c64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c6a:	f023 0203 	bic.w	r2, r3, #3
10001c6e:	687b      	ldr	r3, [r7, #4]
10001c70:	681b      	ldr	r3, [r3, #0]
10001c72:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001c76:	4313      	orrs	r3, r2
10001c78:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001c7a:	f7fe fd27 	bl	100006cc <HAL_GetTick>
10001c7e:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001c80:	e009      	b.n	10001c96 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c82:	f7fe fd23 	bl	100006cc <HAL_GetTick>
10001c86:	4602      	mov	r2, r0
10001c88:	68fb      	ldr	r3, [r7, #12]
10001c8a:	1ad3      	subs	r3, r2, r3
10001c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001c90:	d901      	bls.n	10001c96 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001c92:	2303      	movs	r3, #3
10001c94:	e040      	b.n	10001d18 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001c96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ca4:	d1ed      	bne.n	10001c82 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001ca6:	f000 fbb5 	bl	10002414 <HAL_RCC_GetSystemCoreClockFreq>
10001caa:	4603      	mov	r3, r0
10001cac:	4a1c      	ldr	r2, [pc, #112]	; (10001d20 <RCC_MCUConfig+0x148>)
10001cae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001cb0:	4b1c      	ldr	r3, [pc, #112]	; (10001d24 <RCC_MCUConfig+0x14c>)
10001cb2:	681b      	ldr	r3, [r3, #0]
10001cb4:	4618      	mov	r0, r3
10001cb6:	f7fe fcbf 	bl	10000638 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001cba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cbe:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001cc2:	f023 020f 	bic.w	r2, r3, #15
10001cc6:	687b      	ldr	r3, [r7, #4]
10001cc8:	685b      	ldr	r3, [r3, #4]
10001cca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001cce:	4313      	orrs	r3, r2
10001cd0:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001cd4:	f7fe fcfa 	bl	100006cc <HAL_GetTick>
10001cd8:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001cda:	e009      	b.n	10001cf0 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001cdc:	f7fe fcf6 	bl	100006cc <HAL_GetTick>
10001ce0:	4602      	mov	r2, r0
10001ce2:	68fb      	ldr	r3, [r7, #12]
10001ce4:	1ad3      	subs	r3, r2, r3
10001ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001cea:	d901      	bls.n	10001cf0 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001cec:	2303      	movs	r3, #3
10001cee:	e013      	b.n	10001d18 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001cf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cf4:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d00:	d1ec      	bne.n	10001cdc <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001d02:	f000 fb87 	bl	10002414 <HAL_RCC_GetSystemCoreClockFreq>
10001d06:	4603      	mov	r3, r0
10001d08:	4a05      	ldr	r2, [pc, #20]	; (10001d20 <RCC_MCUConfig+0x148>)
10001d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001d0c:	4b05      	ldr	r3, [pc, #20]	; (10001d24 <RCC_MCUConfig+0x14c>)
10001d0e:	681b      	ldr	r3, [r3, #0]
10001d10:	4618      	mov	r0, r3
10001d12:	f7fe fc91 	bl	10000638 <HAL_InitTick>
#endif

  return HAL_OK;
10001d16:	2300      	movs	r3, #0
}
10001d18:	4618      	mov	r0, r3
10001d1a:	3710      	adds	r7, #16
10001d1c:	46bd      	mov	sp, r7
10001d1e:	bd80      	pop	{r7, pc}
10001d20:	10020000 	.word	0x10020000
10001d24:	10020004 	.word	0x10020004

10001d28 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10001d28:	b480      	push	{r7}
10001d2a:	b089      	sub	sp, #36	; 0x24
10001d2c:	af00      	add	r7, sp, #0
10001d2e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10001d30:	2300      	movs	r3, #0
10001d32:	61bb      	str	r3, [r7, #24]
10001d34:	2301      	movs	r3, #1
10001d36:	617b      	str	r3, [r7, #20]
10001d38:	2300      	movs	r3, #0
10001d3a:	613b      	str	r3, [r7, #16]
10001d3c:	2300      	movs	r3, #0
10001d3e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10001d40:	f04f 0300 	mov.w	r3, #0
10001d44:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10001d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001d4c:	f003 0303 	and.w	r3, r3, #3
10001d50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10001d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10001d5a:	0c1b      	lsrs	r3, r3, #16
10001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001d60:	3301      	adds	r3, #1
10001d62:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10001d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001d6c:	0c1b      	lsrs	r3, r3, #16
10001d6e:	f003 0301 	and.w	r3, r3, #1
10001d72:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10001d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001d7c:	08db      	lsrs	r3, r3, #3
10001d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001d82:	693a      	ldr	r2, [r7, #16]
10001d84:	fb02 f303 	mul.w	r3, r2, r3
10001d88:	ee07 3a90 	vmov	s15, r3
10001d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d90:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10001d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10001d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001da0:	3301      	adds	r3, #1
10001da2:	ee07 3a90 	vmov	s15, r3
10001da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001daa:	edd7 6a02 	vldr	s13, [r7, #8]
10001dae:	ed9f 6a51 	vldr	s12, [pc, #324]	; 10001ef4 <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10001db2:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
10001dba:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001dbe:	69bb      	ldr	r3, [r7, #24]
10001dc0:	2b02      	cmp	r3, #2
10001dc2:	d047      	beq.n	10001e54 <HAL_RCC_GetPLL2ClockFreq+0x12c>
10001dc4:	69bb      	ldr	r3, [r7, #24]
10001dc6:	2b02      	cmp	r3, #2
10001dc8:	d848      	bhi.n	10001e5c <HAL_RCC_GetPLL2ClockFreq+0x134>
10001dca:	69bb      	ldr	r3, [r7, #24]
10001dcc:	2b00      	cmp	r3, #0
10001dce:	d003      	beq.n	10001dd8 <HAL_RCC_GetPLL2ClockFreq+0xb0>
10001dd0:	69bb      	ldr	r3, [r7, #24]
10001dd2:	2b01      	cmp	r3, #1
10001dd4:	d02f      	beq.n	10001e36 <HAL_RCC_GetPLL2ClockFreq+0x10e>
10001dd6:	e041      	b.n	10001e5c <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001dd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ddc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001de0:	f003 0304 	and.w	r3, r3, #4
10001de4:	2b04      	cmp	r3, #4
10001de6:	d117      	bne.n	10001e18 <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001de8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dec:	699b      	ldr	r3, [r3, #24]
10001dee:	f003 0303 	and.w	r3, r3, #3
10001df2:	4a41      	ldr	r2, [pc, #260]	; (10001ef8 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10001df4:	fa22 f303 	lsr.w	r3, r2, r3
10001df8:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10001dfa:	68fa      	ldr	r2, [r7, #12]
10001dfc:	697b      	ldr	r3, [r7, #20]
10001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
10001e02:	ee07 3a90 	vmov	s15, r3
10001e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e0a:	ed97 7a07 	vldr	s14, [r7, #28]
10001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10001e16:	e025      	b.n	10001e64 <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10001e18:	4a37      	ldr	r2, [pc, #220]	; (10001ef8 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10001e1a:	697b      	ldr	r3, [r7, #20]
10001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
10001e20:	ee07 3a90 	vmov	s15, r3
10001e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e28:	ed97 7a07 	vldr	s14, [r7, #28]
10001e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001e34:	e016      	b.n	10001e64 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10001e36:	4a31      	ldr	r2, [pc, #196]	; (10001efc <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10001e38:	697b      	ldr	r3, [r7, #20]
10001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
10001e3e:	ee07 3a90 	vmov	s15, r3
10001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e46:	ed97 7a07 	vldr	s14, [r7, #28]
10001e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001e52:	e007      	b.n	10001e64 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10001e54:	f04f 0300 	mov.w	r3, #0
10001e58:	61fb      	str	r3, [r7, #28]
      break;
10001e5a:	e003      	b.n	10001e64 <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10001e5c:	f04f 0300 	mov.w	r3, #0
10001e60:	61fb      	str	r3, [r7, #28]
      break;
10001e62:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10001e64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001e70:	3301      	adds	r3, #1
10001e72:	ee07 3a90 	vmov	s15, r3
10001e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001e7a:	edd7 6a07 	vldr	s13, [r7, #28]
10001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001e86:	ee17 2a90 	vmov	r2, s15
10001e8a:	687b      	ldr	r3, [r7, #4]
10001e8c:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10001e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001e96:	0a1b      	lsrs	r3, r3, #8
10001e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001e9c:	3301      	adds	r3, #1
10001e9e:	ee07 3a90 	vmov	s15, r3
10001ea2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ea6:	edd7 6a07 	vldr	s13, [r7, #28]
10001eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001eb2:	ee17 2a90 	vmov	r2, s15
10001eb6:	687b      	ldr	r3, [r7, #4]
10001eb8:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10001eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001ec2:	0c1b      	lsrs	r3, r3, #16
10001ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001ec8:	3301      	adds	r3, #1
10001eca:	ee07 3a90 	vmov	s15, r3
10001ece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ed2:	edd7 6a07 	vldr	s13, [r7, #28]
10001ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001ede:	ee17 2a90 	vmov	r2, s15
10001ee2:	687b      	ldr	r3, [r7, #4]
10001ee4:	609a      	str	r2, [r3, #8]
}
10001ee6:	bf00      	nop
10001ee8:	3724      	adds	r7, #36	; 0x24
10001eea:	46bd      	mov	sp, r7
10001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ef0:	4770      	bx	lr
10001ef2:	bf00      	nop
10001ef4:	46000000 	.word	0x46000000
10001ef8:	03d09000 	.word	0x03d09000
10001efc:	016e3600 	.word	0x016e3600

10001f00 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001f00:	b480      	push	{r7}
10001f02:	b089      	sub	sp, #36	; 0x24
10001f04:	af00      	add	r7, sp, #0
10001f06:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001f08:	2300      	movs	r3, #0
10001f0a:	61bb      	str	r3, [r7, #24]
10001f0c:	2301      	movs	r3, #1
10001f0e:	617b      	str	r3, [r7, #20]
10001f10:	2300      	movs	r3, #0
10001f12:	613b      	str	r3, [r7, #16]
10001f14:	2300      	movs	r3, #0
10001f16:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001f18:	f04f 0300 	mov.w	r3, #0
10001f1c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001f1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f22:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001f26:	f003 0303 	and.w	r3, r3, #3
10001f2a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f30:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001f34:	0c1b      	lsrs	r3, r3, #16
10001f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001f3a:	3301      	adds	r3, #1
10001f3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f42:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001f46:	0c1b      	lsrs	r3, r3, #16
10001f48:	f003 0301 	and.w	r3, r3, #1
10001f4c:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f52:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001f56:	08db      	lsrs	r3, r3, #3
10001f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001f5c:	693a      	ldr	r2, [r7, #16]
10001f5e:	fb02 f303 	mul.w	r3, r2, r3
10001f62:	ee07 3a90 	vmov	s15, r3
10001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001f6a:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f72:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001f7a:	3301      	adds	r3, #1
10001f7c:	ee07 3a90 	vmov	s15, r3
10001f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001f84:	edd7 6a02 	vldr	s13, [r7, #8]
10001f88:	ed9f 6a56 	vldr	s12, [pc, #344]	; 100020e4 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001f8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
10001f94:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001f98:	69bb      	ldr	r3, [r7, #24]
10001f9a:	2b03      	cmp	r3, #3
10001f9c:	d85b      	bhi.n	10002056 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001f9e:	a201      	add	r2, pc, #4	; (adr r2, 10001fa4 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001fa4:	10001fb5 	.word	0x10001fb5
10001fa8:	10002013 	.word	0x10002013
10001fac:	10002031 	.word	0x10002031
10001fb0:	1000204f 	.word	0x1000204f
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001fbc:	f003 0304 	and.w	r3, r3, #4
10001fc0:	2b04      	cmp	r3, #4
10001fc2:	d117      	bne.n	10001ff4 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001fc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc8:	699b      	ldr	r3, [r3, #24]
10001fca:	f003 0303 	and.w	r3, r3, #3
10001fce:	4a46      	ldr	r2, [pc, #280]	; (100020e8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001fd0:	fa22 f303 	lsr.w	r3, r2, r3
10001fd4:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001fd6:	68fa      	ldr	r2, [r7, #12]
10001fd8:	697b      	ldr	r3, [r7, #20]
10001fda:	fbb2 f3f3 	udiv	r3, r2, r3
10001fde:	ee07 3a90 	vmov	s15, r3
10001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fe6:	ed97 7a07 	vldr	s14, [r7, #28]
10001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
10001fee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001ff2:	e030      	b.n	10002056 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001ff4:	4a3c      	ldr	r2, [pc, #240]	; (100020e8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001ff6:	697b      	ldr	r3, [r7, #20]
10001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
10001ffc:	ee07 3a90 	vmov	s15, r3
10002000:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002004:	ed97 7a07 	vldr	s14, [r7, #28]
10002008:	ee67 7a27 	vmul.f32	s15, s14, s15
1000200c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002010:	e021      	b.n	10002056 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10002012:	4a36      	ldr	r2, [pc, #216]	; (100020ec <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10002014:	697b      	ldr	r3, [r7, #20]
10002016:	fbb2 f3f3 	udiv	r3, r2, r3
1000201a:	ee07 3a90 	vmov	s15, r3
1000201e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002022:	ed97 7a07 	vldr	s14, [r7, #28]
10002026:	ee67 7a27 	vmul.f32	s15, s14, s15
1000202a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000202e:	e012      	b.n	10002056 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10002030:	4a2f      	ldr	r2, [pc, #188]	; (100020f0 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10002032:	697b      	ldr	r3, [r7, #20]
10002034:	fbb2 f3f3 	udiv	r3, r2, r3
10002038:	ee07 3a90 	vmov	s15, r3
1000203c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002040:	ed97 7a07 	vldr	s14, [r7, #28]
10002044:	ee67 7a27 	vmul.f32	s15, s14, s15
10002048:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000204c:	e003      	b.n	10002056 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
1000204e:	f04f 0300 	mov.w	r3, #0
10002052:	61fb      	str	r3, [r7, #28]
      break;
10002054:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10002056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000205a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000205e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002062:	3301      	adds	r3, #1
10002064:	ee07 3a90 	vmov	s15, r3
10002068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000206c:	edd7 6a07 	vldr	s13, [r7, #28]
10002070:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002078:	ee17 2a90 	vmov	r2, s15
1000207c:	687b      	ldr	r3, [r7, #4]
1000207e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10002080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002084:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002088:	0a1b      	lsrs	r3, r3, #8
1000208a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000208e:	3301      	adds	r3, #1
10002090:	ee07 3a90 	vmov	s15, r3
10002094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002098:	edd7 6a07 	vldr	s13, [r7, #28]
1000209c:	eec6 7a87 	vdiv.f32	s15, s13, s14
100020a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100020a4:	ee17 2a90 	vmov	r2, s15
100020a8:	687b      	ldr	r3, [r7, #4]
100020aa:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100020ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b0:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100020b4:	0c1b      	lsrs	r3, r3, #16
100020b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100020ba:	3301      	adds	r3, #1
100020bc:	ee07 3a90 	vmov	s15, r3
100020c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100020c4:	edd7 6a07 	vldr	s13, [r7, #28]
100020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100020cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100020d0:	ee17 2a90 	vmov	r2, s15
100020d4:	687b      	ldr	r3, [r7, #4]
100020d6:	609a      	str	r2, [r3, #8]
}
100020d8:	bf00      	nop
100020da:	3724      	adds	r7, #36	; 0x24
100020dc:	46bd      	mov	sp, r7
100020de:	f85d 7b04 	ldr.w	r7, [sp], #4
100020e2:	4770      	bx	lr
100020e4:	46000000 	.word	0x46000000
100020e8:	03d09000 	.word	0x03d09000
100020ec:	016e3600 	.word	0x016e3600
100020f0:	003d0900 	.word	0x003d0900

100020f4 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
100020f4:	b480      	push	{r7}
100020f6:	b089      	sub	sp, #36	; 0x24
100020f8:	af00      	add	r7, sp, #0
100020fa:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
100020fc:	2300      	movs	r3, #0
100020fe:	61bb      	str	r3, [r7, #24]
10002100:	2301      	movs	r3, #1
10002102:	617b      	str	r3, [r7, #20]
10002104:	2300      	movs	r3, #0
10002106:	613b      	str	r3, [r7, #16]
10002108:	2300      	movs	r3, #0
1000210a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
1000210c:	f04f 0300 	mov.w	r3, #0
10002110:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10002112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002116:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000211a:	f003 0303 	and.w	r3, r3, #3
1000211e:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10002120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002124:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10002128:	0c1b      	lsrs	r3, r3, #16
1000212a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000212e:	3301      	adds	r3, #1
10002130:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10002132:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002136:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000213a:	0c1b      	lsrs	r3, r3, #16
1000213c:	f003 0301 	and.w	r3, r3, #1
10002140:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10002142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002146:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000214a:	08db      	lsrs	r3, r3, #3
1000214c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002150:	693a      	ldr	r2, [r7, #16]
10002152:	fb02 f303 	mul.w	r3, r2, r3
10002156:	ee07 3a90 	vmov	s15, r3
1000215a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000215e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10002162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002166:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000216a:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000216e:	3301      	adds	r3, #1
10002170:	ee07 3a90 	vmov	s15, r3
10002174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002178:	edd7 6a02 	vldr	s13, [r7, #8]
1000217c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 100022f0 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
10002180:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002184:	ee77 7a27 	vadd.f32	s15, s14, s15
10002188:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
1000218c:	69bb      	ldr	r3, [r7, #24]
1000218e:	2b03      	cmp	r3, #3
10002190:	d866      	bhi.n	10002260 <HAL_RCC_GetPLL4ClockFreq+0x16c>
10002192:	a201      	add	r2, pc, #4	; (adr r2, 10002198 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
10002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002198:	100021a9 	.word	0x100021a9
1000219c:	10002207 	.word	0x10002207
100021a0:	10002225 	.word	0x10002225
100021a4:	10002243 	.word	0x10002243
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100021a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021ac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100021b0:	f003 0304 	and.w	r3, r3, #4
100021b4:	2b04      	cmp	r3, #4
100021b6:	d117      	bne.n	100021e8 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100021b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021bc:	699b      	ldr	r3, [r3, #24]
100021be:	f003 0303 	and.w	r3, r3, #3
100021c2:	4a4c      	ldr	r2, [pc, #304]	; (100022f4 <HAL_RCC_GetPLL4ClockFreq+0x200>)
100021c4:	fa22 f303 	lsr.w	r3, r2, r3
100021c8:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
100021ca:	68fa      	ldr	r2, [r7, #12]
100021cc:	697b      	ldr	r3, [r7, #20]
100021ce:	fbb2 f3f3 	udiv	r3, r2, r3
100021d2:	ee07 3a90 	vmov	s15, r3
100021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021da:	ed97 7a07 	vldr	s14, [r7, #28]
100021de:	ee67 7a27 	vmul.f32	s15, s14, s15
100021e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
100021e6:	e03b      	b.n	10002260 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
100021e8:	4a42      	ldr	r2, [pc, #264]	; (100022f4 <HAL_RCC_GetPLL4ClockFreq+0x200>)
100021ea:	697b      	ldr	r3, [r7, #20]
100021ec:	fbb2 f3f3 	udiv	r3, r2, r3
100021f0:	ee07 3a90 	vmov	s15, r3
100021f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021f8:	ed97 7a07 	vldr	s14, [r7, #28]
100021fc:	ee67 7a27 	vmul.f32	s15, s14, s15
10002200:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002204:	e02c      	b.n	10002260 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10002206:	4a3c      	ldr	r2, [pc, #240]	; (100022f8 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10002208:	697b      	ldr	r3, [r7, #20]
1000220a:	fbb2 f3f3 	udiv	r3, r2, r3
1000220e:	ee07 3a90 	vmov	s15, r3
10002212:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002216:	ed97 7a07 	vldr	s14, [r7, #28]
1000221a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000221e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002222:	e01d      	b.n	10002260 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10002224:	4a35      	ldr	r2, [pc, #212]	; (100022fc <HAL_RCC_GetPLL4ClockFreq+0x208>)
10002226:	697b      	ldr	r3, [r7, #20]
10002228:	fbb2 f3f3 	udiv	r3, r2, r3
1000222c:	ee07 3a90 	vmov	s15, r3
10002230:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002234:	ed97 7a07 	vldr	s14, [r7, #28]
10002238:	ee67 7a27 	vmul.f32	s15, s14, s15
1000223c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002240:	e00e      	b.n	10002260 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10002242:	4a2f      	ldr	r2, [pc, #188]	; (10002300 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10002244:	697b      	ldr	r3, [r7, #20]
10002246:	fbb2 f3f3 	udiv	r3, r2, r3
1000224a:	ee07 3a90 	vmov	s15, r3
1000224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002252:	ed97 7a07 	vldr	s14, [r7, #28]
10002256:	ee67 7a27 	vmul.f32	s15, s14, s15
1000225a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000225e:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10002260:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002264:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000226c:	3301      	adds	r3, #1
1000226e:	ee07 3a90 	vmov	s15, r3
10002272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002276:	edd7 6a07 	vldr	s13, [r7, #28]
1000227a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000227e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002282:	ee17 2a90 	vmov	r2, s15
10002286:	687b      	ldr	r3, [r7, #4]
10002288:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
1000228a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000228e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002292:	0a1b      	lsrs	r3, r3, #8
10002294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002298:	3301      	adds	r3, #1
1000229a:	ee07 3a90 	vmov	s15, r3
1000229e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100022a2:	edd7 6a07 	vldr	s13, [r7, #28]
100022a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
100022aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100022ae:	ee17 2a90 	vmov	r2, s15
100022b2:	687b      	ldr	r3, [r7, #4]
100022b4:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
100022b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022ba:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100022be:	0c1b      	lsrs	r3, r3, #16
100022c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100022c4:	3301      	adds	r3, #1
100022c6:	ee07 3a90 	vmov	s15, r3
100022ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100022ce:	edd7 6a07 	vldr	s13, [r7, #28]
100022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
100022d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100022da:	ee17 2a90 	vmov	r2, s15
100022de:	687b      	ldr	r3, [r7, #4]
100022e0:	609a      	str	r2, [r3, #8]
}
100022e2:	bf00      	nop
100022e4:	3724      	adds	r7, #36	; 0x24
100022e6:	46bd      	mov	sp, r7
100022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100022ec:	4770      	bx	lr
100022ee:	bf00      	nop
100022f0:	46000000 	.word	0x46000000
100022f4:	03d09000 	.word	0x03d09000
100022f8:	016e3600 	.word	0x016e3600
100022fc:	003d0900 	.word	0x003d0900
10002300:	00bb8000 	.word	0x00bb8000

10002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10002304:	b580      	push	{r7, lr}
10002306:	b082      	sub	sp, #8
10002308:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
1000230a:	2300      	movs	r3, #0
1000230c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
1000230e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002312:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002316:	f003 0307 	and.w	r3, r3, #7
1000231a:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	2b04      	cmp	r3, #4
10002320:	d901      	bls.n	10002326 <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10002322:	2304      	movs	r3, #4
10002324:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10002326:	f000 f85a 	bl	100023de <HAL_RCC_GetMCUFreq>
1000232a:	4602      	mov	r2, r0
1000232c:	687b      	ldr	r3, [r7, #4]
1000232e:	fa22 f303 	lsr.w	r3, r2, r3
}
10002332:	4618      	mov	r0, r3
10002334:	3708      	adds	r7, #8
10002336:	46bd      	mov	sp, r7
10002338:	bd80      	pop	{r7, pc}

1000233a <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
1000233a:	b580      	push	{r7, lr}
1000233c:	b082      	sub	sp, #8
1000233e:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10002340:	2300      	movs	r3, #0
10002342:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10002344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002348:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000234c:	f003 0307 	and.w	r3, r3, #7
10002350:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	2b04      	cmp	r3, #4
10002356:	d901      	bls.n	1000235c <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
10002358:	2304      	movs	r3, #4
1000235a:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
1000235c:	f000 f83f 	bl	100023de <HAL_RCC_GetMCUFreq>
10002360:	4602      	mov	r2, r0
10002362:	687b      	ldr	r3, [r7, #4]
10002364:	fa22 f303 	lsr.w	r3, r2, r3
}
10002368:	4618      	mov	r0, r3
1000236a:	3708      	adds	r7, #8
1000236c:	46bd      	mov	sp, r7
1000236e:	bd80      	pop	{r7, pc}

10002370 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
10002370:	b580      	push	{r7, lr}
10002372:	b082      	sub	sp, #8
10002374:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
10002376:	2300      	movs	r3, #0
10002378:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
1000237a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002380:	f003 0307 	and.w	r3, r3, #7
10002384:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
10002386:	687b      	ldr	r3, [r7, #4]
10002388:	2b04      	cmp	r3, #4
1000238a:	d901      	bls.n	10002390 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
1000238c:	2304      	movs	r3, #4
1000238e:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
10002390:	f000 f808 	bl	100023a4 <HAL_RCC_GetACLKFreq>
10002394:	4602      	mov	r2, r0
10002396:	687b      	ldr	r3, [r7, #4]
10002398:	fa22 f303 	lsr.w	r3, r2, r3
}
1000239c:	4618      	mov	r0, r3
1000239e:	3708      	adds	r7, #8
100023a0:	46bd      	mov	sp, r7
100023a2:	bd80      	pop	{r7, pc}

100023a4 <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
100023a4:	b580      	push	{r7, lr}
100023a6:	b082      	sub	sp, #8
100023a8:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
100023aa:	2300      	movs	r3, #0
100023ac:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
100023ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100023b4:	f003 0307 	and.w	r3, r3, #7
100023b8:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
100023ba:	687b      	ldr	r3, [r7, #4]
100023bc:	2b03      	cmp	r3, #3
100023be:	d901      	bls.n	100023c4 <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
100023c0:	2303      	movs	r3, #3
100023c2:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
100023c4:	687b      	ldr	r3, [r7, #4]
100023c6:	3301      	adds	r3, #1
100023c8:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
100023ca:	f000 f82b 	bl	10002424 <HAL_RCC_GetAXISSFreq>
100023ce:	4602      	mov	r2, r0
100023d0:	687b      	ldr	r3, [r7, #4]
100023d2:	fbb2 f3f3 	udiv	r3, r2, r3
}
100023d6:	4618      	mov	r0, r3
100023d8:	3708      	adds	r7, #8
100023da:	46bd      	mov	sp, r7
100023dc:	bd80      	pop	{r7, pc}

100023de <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100023de:	b580      	push	{r7, lr}
100023e0:	b082      	sub	sp, #8
100023e2:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100023e4:	2300      	movs	r3, #0
100023e6:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100023e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ec:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
100023f0:	f003 030f 	and.w	r3, r3, #15
100023f4:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100023f6:	687b      	ldr	r3, [r7, #4]
100023f8:	2b09      	cmp	r3, #9
100023fa:	d901      	bls.n	10002400 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100023fc:	2309      	movs	r3, #9
100023fe:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10002400:	f000 f84e 	bl	100024a0 <HAL_RCC_GetMCUSSFreq>
10002404:	4602      	mov	r2, r0
10002406:	687b      	ldr	r3, [r7, #4]
10002408:	fa22 f303 	lsr.w	r3, r2, r3
}
1000240c:	4618      	mov	r0, r3
1000240e:	3708      	adds	r7, #8
10002410:	46bd      	mov	sp, r7
10002412:	bd80      	pop	{r7, pc}

10002414 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002414:	b580      	push	{r7, lr}
10002416:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10002418:	f7ff ffe1 	bl	100023de <HAL_RCC_GetMCUFreq>
1000241c:	4603      	mov	r3, r0
#endif
}
1000241e:	4618      	mov	r0, r3
10002420:	bd80      	pop	{r7, pc}
	...

10002424 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10002424:	b580      	push	{r7, lr}
10002426:	b084      	sub	sp, #16
10002428:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
1000242a:	2300      	movs	r3, #0
1000242c:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
1000242e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002434:	f003 0307 	and.w	r3, r3, #7
10002438:	2b02      	cmp	r3, #2
1000243a:	d006      	beq.n	1000244a <HAL_RCC_GetAXISSFreq+0x26>
1000243c:	2b02      	cmp	r3, #2
1000243e:	d823      	bhi.n	10002488 <HAL_RCC_GetAXISSFreq+0x64>
10002440:	2b00      	cmp	r3, #0
10002442:	d009      	beq.n	10002458 <HAL_RCC_GetAXISSFreq+0x34>
10002444:	2b01      	cmp	r3, #1
10002446:	d01c      	beq.n	10002482 <HAL_RCC_GetAXISSFreq+0x5e>
10002448:	e01e      	b.n	10002488 <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
1000244a:	463b      	mov	r3, r7
1000244c:	4618      	mov	r0, r3
1000244e:	f7ff fc6b 	bl	10001d28 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10002452:	683b      	ldr	r3, [r7, #0]
10002454:	60fb      	str	r3, [r7, #12]
      break;
10002456:	e01a      	b.n	1000248e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000245c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002460:	f003 0304 	and.w	r3, r3, #4
10002464:	2b04      	cmp	r3, #4
10002466:	d109      	bne.n	1000247c <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000246c:	699b      	ldr	r3, [r3, #24]
1000246e:	f003 0303 	and.w	r3, r3, #3
10002472:	4a09      	ldr	r2, [pc, #36]	; (10002498 <HAL_RCC_GetAXISSFreq+0x74>)
10002474:	fa22 f303 	lsr.w	r3, r2, r3
10002478:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
1000247a:	e008      	b.n	1000248e <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
1000247c:	4b06      	ldr	r3, [pc, #24]	; (10002498 <HAL_RCC_GetAXISSFreq+0x74>)
1000247e:	60fb      	str	r3, [r7, #12]
      break;
10002480:	e005      	b.n	1000248e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
10002482:	4b06      	ldr	r3, [pc, #24]	; (1000249c <HAL_RCC_GetAXISSFreq+0x78>)
10002484:	60fb      	str	r3, [r7, #12]
      break;
10002486:	e002      	b.n	1000248e <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10002488:	2300      	movs	r3, #0
1000248a:	60fb      	str	r3, [r7, #12]
      break;
1000248c:	bf00      	nop
  }

  return axissfreq;
1000248e:	68fb      	ldr	r3, [r7, #12]
}
10002490:	4618      	mov	r0, r3
10002492:	3710      	adds	r7, #16
10002494:	46bd      	mov	sp, r7
10002496:	bd80      	pop	{r7, pc}
10002498:	03d09000 	.word	0x03d09000
1000249c:	016e3600 	.word	0x016e3600

100024a0 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
100024a0:	b580      	push	{r7, lr}
100024a2:	b084      	sub	sp, #16
100024a4:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100024a6:	2300      	movs	r3, #0
100024a8:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100024aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100024b0:	f003 0303 	and.w	r3, r3, #3
100024b4:	2b03      	cmp	r3, #3
100024b6:	d822      	bhi.n	100024fe <HAL_RCC_GetMCUSSFreq+0x5e>
100024b8:	a201      	add	r2, pc, #4	; (adr r2, 100024c0 <HAL_RCC_GetMCUSSFreq+0x20>)
100024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100024be:	bf00      	nop
100024c0:	100024df 	.word	0x100024df
100024c4:	100024f3 	.word	0x100024f3
100024c8:	100024f9 	.word	0x100024f9
100024cc:	100024d1 	.word	0x100024d1
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100024d0:	463b      	mov	r3, r7
100024d2:	4618      	mov	r0, r3
100024d4:	f7ff fd14 	bl	10001f00 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
100024d8:	683b      	ldr	r3, [r7, #0]
100024da:	60fb      	str	r3, [r7, #12]
      break;
100024dc:	e00f      	b.n	100024fe <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100024de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024e2:	699b      	ldr	r3, [r3, #24]
100024e4:	f003 0303 	and.w	r3, r3, #3
100024e8:	4a07      	ldr	r2, [pc, #28]	; (10002508 <HAL_RCC_GetMCUSSFreq+0x68>)
100024ea:	fa22 f303 	lsr.w	r3, r2, r3
100024ee:	60fb      	str	r3, [r7, #12]

      break;
100024f0:	e005      	b.n	100024fe <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100024f2:	4b06      	ldr	r3, [pc, #24]	; (1000250c <HAL_RCC_GetMCUSSFreq+0x6c>)
100024f4:	60fb      	str	r3, [r7, #12]
      break;
100024f6:	e002      	b.n	100024fe <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100024f8:	4b05      	ldr	r3, [pc, #20]	; (10002510 <HAL_RCC_GetMCUSSFreq+0x70>)
100024fa:	60fb      	str	r3, [r7, #12]
      break;
100024fc:	bf00      	nop
  }

  return mcussfreq;
100024fe:	68fb      	ldr	r3, [r7, #12]
}
10002500:	4618      	mov	r0, r3
10002502:	3710      	adds	r7, #16
10002504:	46bd      	mov	sp, r7
10002506:	bd80      	pop	{r7, pc}
10002508:	03d09000 	.word	0x03d09000
1000250c:	016e3600 	.word	0x016e3600
10002510:	003d0900 	.word	0x003d0900

10002514 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10002514:	b580      	push	{r7, lr}
10002516:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10002518:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000251c:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10002524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002528:	d107      	bne.n	1000253a <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000252a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000252e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10002532:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10002536:	f000 f802 	bl	1000253e <HAL_RCC_WAKEUP_Callback>
  }
}
1000253a:	bf00      	nop
1000253c:	bd80      	pop	{r7, pc}

1000253e <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
1000253e:	b480      	push	{r7}
10002540:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10002542:	bf00      	nop
10002544:	46bd      	mov	sp, r7
10002546:	f85d 7b04 	ldr.w	r7, [sp], #4
1000254a:	4770      	bx	lr

1000254c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
1000254c:	b580      	push	{r7, lr}
1000254e:	b084      	sub	sp, #16
10002550:	af00      	add	r7, sp, #0
10002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10002554:	687b      	ldr	r3, [r7, #4]
10002556:	681b      	ldr	r3, [r3, #0]
10002558:	2b00      	cmp	r3, #0
1000255a:	f000 8171 	beq.w	10002840 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000255e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002564:	f003 0307 	and.w	r3, r3, #7
10002568:	2b02      	cmp	r3, #2
1000256a:	d108      	bne.n	1000257e <RCCEx_PLL2_Config+0x32>
1000256c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000257a:	f000 815f 	beq.w	1000283c <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000257e:	687b      	ldr	r3, [r7, #4]
10002580:	681b      	ldr	r3, [r3, #0]
10002582:	2b02      	cmp	r3, #2
10002584:	f040 8130 	bne.w	100027e8 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10002588:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000258e:	f003 0303 	and.w	r3, r3, #3
10002592:	2b00      	cmp	r3, #0
10002594:	d008      	beq.n	100025a8 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10002596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000259c:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100025a0:	2b01      	cmp	r3, #1
100025a2:	d001      	beq.n	100025a8 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100025a4:	2301      	movs	r3, #1
100025a6:	e14c      	b.n	10002842 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100025a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100025b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100025b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100025bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100025c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025c8:	f023 0301 	bic.w	r3, r3, #1
100025cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100025d0:	f7fe f87c 	bl	100006cc <HAL_GetTick>
100025d4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100025d6:	e008      	b.n	100025ea <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025d8:	f7fe f878 	bl	100006cc <HAL_GetTick>
100025dc:	4602      	mov	r2, r0
100025de:	68fb      	ldr	r3, [r7, #12]
100025e0:	1ad3      	subs	r3, r2, r3
100025e2:	2b64      	cmp	r3, #100	; 0x64
100025e4:	d901      	bls.n	100025ea <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100025e6:	2303      	movs	r3, #3
100025e8:	e12b      	b.n	10002842 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100025ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100025f2:	f003 0302 	and.w	r3, r3, #2
100025f6:	2b02      	cmp	r3, #2
100025f8:	d0ee      	beq.n	100025d8 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100025fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025fe:	6a1b      	ldr	r3, [r3, #32]
10002600:	f003 0303 	and.w	r3, r3, #3
10002604:	2b02      	cmp	r3, #2
10002606:	d107      	bne.n	10002618 <RCCEx_PLL2_Config+0xcc>
10002608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000260c:	6a1b      	ldr	r3, [r3, #32]
1000260e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002616:	d00e      	beq.n	10002636 <RCCEx_PLL2_Config+0xea>
10002618:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000261c:	6a1b      	ldr	r3, [r3, #32]
1000261e:	f003 0303 	and.w	r3, r3, #3
10002622:	2b03      	cmp	r3, #3
10002624:	d112      	bne.n	1000264c <RCCEx_PLL2_Config+0x100>
10002626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000262a:	6a1b      	ldr	r3, [r3, #32]
1000262c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002634:	d10a      	bne.n	1000264c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002636:	687b      	ldr	r3, [r7, #4]
10002638:	685a      	ldr	r2, [r3, #4]
1000263a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002640:	f003 0303 	and.w	r3, r3, #3
10002644:	429a      	cmp	r2, r3
10002646:	d00c      	beq.n	10002662 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10002648:	2301      	movs	r3, #1
1000264a:	e0fa      	b.n	10002842 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
1000264c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002652:	f023 0203 	bic.w	r2, r3, #3
10002656:	687b      	ldr	r3, [r7, #4]
10002658:	685b      	ldr	r3, [r3, #4]
1000265a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000265e:	4313      	orrs	r3, r2
10002660:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10002662:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002666:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
1000266a:	4b78      	ldr	r3, [pc, #480]	; (1000284c <RCCEx_PLL2_Config+0x300>)
1000266c:	4013      	ands	r3, r2
1000266e:	687a      	ldr	r2, [r7, #4]
10002670:	68d2      	ldr	r2, [r2, #12]
10002672:	1e51      	subs	r1, r2, #1
10002674:	687a      	ldr	r2, [r7, #4]
10002676:	6892      	ldr	r2, [r2, #8]
10002678:	3a01      	subs	r2, #1
1000267a:	0412      	lsls	r2, r2, #16
1000267c:	430a      	orrs	r2, r1
1000267e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002682:	4313      	orrs	r3, r2
10002684:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10002688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000268c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10002690:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002698:	687a      	ldr	r2, [r7, #4]
1000269a:	6912      	ldr	r2, [r2, #16]
1000269c:	1e51      	subs	r1, r2, #1
1000269e:	687a      	ldr	r2, [r7, #4]
100026a0:	6952      	ldr	r2, [r2, #20]
100026a2:	3a01      	subs	r2, #1
100026a4:	0212      	lsls	r2, r2, #8
100026a6:	4311      	orrs	r1, r2
100026a8:	687a      	ldr	r2, [r7, #4]
100026aa:	6992      	ldr	r2, [r2, #24]
100026ac:	3a01      	subs	r2, #1
100026ae:	0412      	lsls	r2, r2, #16
100026b0:	430a      	orrs	r2, r1
100026b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100026b6:	4313      	orrs	r3, r2
100026b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100026bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100026c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100026cc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
100026d0:	687b      	ldr	r3, [r7, #4]
100026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100026d4:	2b02      	cmp	r3, #2
100026d6:	d003      	beq.n	100026e0 <RCCEx_PLL2_Config+0x194>
100026d8:	687b      	ldr	r3, [r7, #4]
100026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100026dc:	2b00      	cmp	r3, #0
100026de:	d10c      	bne.n	100026fa <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100026e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100026e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100026f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100026f4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
100026f8:	e00f      	b.n	1000271a <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100026fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002706:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000270a:	687a      	ldr	r2, [r7, #4]
1000270c:	6a12      	ldr	r2, [r2, #32]
1000270e:	00d2      	lsls	r2, r2, #3
10002710:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002714:	4313      	orrs	r3, r2
10002716:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000271a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000271e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002722:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000272a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000272e:	687b      	ldr	r3, [r7, #4]
10002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002732:	2b02      	cmp	r3, #2
10002734:	d124      	bne.n	10002780 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10002736:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000273a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000273e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002746:	687b      	ldr	r3, [r7, #4]
10002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000274a:	4319      	orrs	r1, r3
1000274c:	687b      	ldr	r3, [r7, #4]
1000274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002750:	4319      	orrs	r1, r3
10002752:	687b      	ldr	r3, [r7, #4]
10002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002756:	4319      	orrs	r1, r3
10002758:	687b      	ldr	r3, [r7, #4]
1000275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000275c:	041b      	lsls	r3, r3, #16
1000275e:	430b      	orrs	r3, r1
10002760:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002764:	4313      	orrs	r3, r2
10002766:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000276a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002776:	f043 0304 	orr.w	r3, r3, #4
1000277a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
1000277e:	e009      	b.n	10002794 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002780:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002788:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000278c:	f023 0304 	bic.w	r3, r3, #4
10002790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000279c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027a0:	f043 0301 	orr.w	r3, r3, #1
100027a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100027a8:	f7fd ff90 	bl	100006cc <HAL_GetTick>
100027ac:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100027ae:	e008      	b.n	100027c2 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100027b0:	f7fd ff8c 	bl	100006cc <HAL_GetTick>
100027b4:	4602      	mov	r2, r0
100027b6:	68fb      	ldr	r3, [r7, #12]
100027b8:	1ad3      	subs	r3, r2, r3
100027ba:	2b64      	cmp	r3, #100	; 0x64
100027bc:	d901      	bls.n	100027c2 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100027be:	2303      	movs	r3, #3
100027c0:	e03f      	b.n	10002842 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100027c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100027ca:	f003 0302 	and.w	r3, r3, #2
100027ce:	2b02      	cmp	r3, #2
100027d0:	d1ee      	bne.n	100027b0 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100027d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100027da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027de:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100027e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100027e6:	e02b      	b.n	10002840 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100027e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100027f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100027f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100027fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002808:	f023 0301 	bic.w	r3, r3, #1
1000280c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002810:	f7fd ff5c 	bl	100006cc <HAL_GetTick>
10002814:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002816:	e008      	b.n	1000282a <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002818:	f7fd ff58 	bl	100006cc <HAL_GetTick>
1000281c:	4602      	mov	r2, r0
1000281e:	68fb      	ldr	r3, [r7, #12]
10002820:	1ad3      	subs	r3, r2, r3
10002822:	2b64      	cmp	r3, #100	; 0x64
10002824:	d901      	bls.n	1000282a <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10002826:	2303      	movs	r3, #3
10002828:	e00b      	b.n	10002842 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000282a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002832:	f003 0302 	and.w	r3, r3, #2
10002836:	2b02      	cmp	r3, #2
10002838:	d0ee      	beq.n	10002818 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000283a:	e001      	b.n	10002840 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000283c:	2301      	movs	r3, #1
1000283e:	e000      	b.n	10002842 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002840:	2300      	movs	r3, #0

}
10002842:	4618      	mov	r0, r3
10002844:	3710      	adds	r7, #16
10002846:	46bd      	mov	sp, r7
10002848:	bd80      	pop	{r7, pc}
1000284a:	bf00      	nop
1000284c:	ffc0fe00 	.word	0xffc0fe00

10002850 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10002850:	b580      	push	{r7, lr}
10002852:	b084      	sub	sp, #16
10002854:	af00      	add	r7, sp, #0
10002856:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10002858:	687b      	ldr	r3, [r7, #4]
1000285a:	681b      	ldr	r3, [r3, #0]
1000285c:	2b00      	cmp	r3, #0
1000285e:	f000 815a 	beq.w	10002b16 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10002862:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002868:	f003 0303 	and.w	r3, r3, #3
1000286c:	2b03      	cmp	r3, #3
1000286e:	d108      	bne.n	10002882 <RCCEx_PLL3_Config+0x32>
10002870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000287a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000287e:	f000 8148 	beq.w	10002b12 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002882:	687b      	ldr	r3, [r7, #4]
10002884:	681b      	ldr	r3, [r3, #0]
10002886:	2b02      	cmp	r3, #2
10002888:	f040 8119 	bne.w	10002abe <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000288c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002890:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000289c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100028a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100028a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028ac:	f023 0301 	bic.w	r3, r3, #1
100028b0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100028b4:	f7fd ff0a 	bl	100006cc <HAL_GetTick>
100028b8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100028ba:	e008      	b.n	100028ce <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100028bc:	f7fd ff06 	bl	100006cc <HAL_GetTick>
100028c0:	4602      	mov	r2, r0
100028c2:	68fb      	ldr	r3, [r7, #12]
100028c4:	1ad3      	subs	r3, r2, r3
100028c6:	2b64      	cmp	r3, #100	; 0x64
100028c8:	d901      	bls.n	100028ce <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100028ca:	2303      	movs	r3, #3
100028cc:	e124      	b.n	10002b18 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100028ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100028d6:	f003 0302 	and.w	r3, r3, #2
100028da:	2b02      	cmp	r3, #2
100028dc:	d0ee      	beq.n	100028bc <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100028de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028e2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100028e6:	f023 0203 	bic.w	r2, r3, #3
100028ea:	687b      	ldr	r3, [r7, #4]
100028ec:	685b      	ldr	r3, [r3, #4]
100028ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028f2:	4313      	orrs	r3, r2
100028f4:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100028f8:	e008      	b.n	1000290c <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100028fa:	f7fd fee7 	bl	100006cc <HAL_GetTick>
100028fe:	4602      	mov	r2, r0
10002900:	68fb      	ldr	r3, [r7, #12]
10002902:	1ad3      	subs	r3, r2, r3
10002904:	2b64      	cmp	r3, #100	; 0x64
10002906:	d901      	bls.n	1000290c <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10002908:	2303      	movs	r3, #3
1000290a:	e105      	b.n	10002b18 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000290c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002910:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000291c:	d1ed      	bne.n	100028fa <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000291e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002922:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002926:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000292a:	687b      	ldr	r3, [r7, #4]
1000292c:	69db      	ldr	r3, [r3, #28]
1000292e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002932:	4313      	orrs	r3, r2
10002934:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10002938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000293c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10002940:	4b77      	ldr	r3, [pc, #476]	; (10002b20 <RCCEx_PLL3_Config+0x2d0>)
10002942:	4013      	ands	r3, r2
10002944:	687a      	ldr	r2, [r7, #4]
10002946:	68d2      	ldr	r2, [r2, #12]
10002948:	1e51      	subs	r1, r2, #1
1000294a:	687a      	ldr	r2, [r7, #4]
1000294c:	6892      	ldr	r2, [r2, #8]
1000294e:	3a01      	subs	r2, #1
10002950:	0412      	lsls	r2, r2, #16
10002952:	430a      	orrs	r2, r1
10002954:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002958:	4313      	orrs	r3, r2
1000295a:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
1000295e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002962:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002966:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000296a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000296e:	687a      	ldr	r2, [r7, #4]
10002970:	6912      	ldr	r2, [r2, #16]
10002972:	1e51      	subs	r1, r2, #1
10002974:	687a      	ldr	r2, [r7, #4]
10002976:	6952      	ldr	r2, [r2, #20]
10002978:	3a01      	subs	r2, #1
1000297a:	0212      	lsls	r2, r2, #8
1000297c:	4311      	orrs	r1, r2
1000297e:	687a      	ldr	r2, [r7, #4]
10002980:	6992      	ldr	r2, [r2, #24]
10002982:	3a01      	subs	r2, #1
10002984:	0412      	lsls	r2, r2, #16
10002986:	430a      	orrs	r2, r1
10002988:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000298c:	4313      	orrs	r3, r2
1000298e:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002992:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002996:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000299a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000299e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100029a2:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100029a6:	687b      	ldr	r3, [r7, #4]
100029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100029aa:	2b02      	cmp	r3, #2
100029ac:	d003      	beq.n	100029b6 <RCCEx_PLL3_Config+0x166>
100029ae:	687b      	ldr	r3, [r7, #4]
100029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100029b2:	2b00      	cmp	r3, #0
100029b4:	d10c      	bne.n	100029d0 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100029b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ba:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100029be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100029c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100029ca:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
100029ce:	e00f      	b.n	100029f0 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100029d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029d4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100029d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100029dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100029e0:	687a      	ldr	r2, [r7, #4]
100029e2:	6a12      	ldr	r2, [r2, #32]
100029e4:	00d2      	lsls	r2, r2, #3
100029e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100029ea:	4313      	orrs	r3, r2
100029ec:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
100029f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029f4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100029f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002a00:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002a04:	687b      	ldr	r3, [r7, #4]
10002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002a08:	2b02      	cmp	r3, #2
10002a0a:	d124      	bne.n	10002a56 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002a0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a10:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10002a14:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002a18:	687b      	ldr	r3, [r7, #4]
10002a1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002a1c:	687b      	ldr	r3, [r7, #4]
10002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002a20:	4319      	orrs	r1, r3
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002a26:	4319      	orrs	r1, r3
10002a28:	687b      	ldr	r3, [r7, #4]
10002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002a2c:	4319      	orrs	r1, r3
10002a2e:	687b      	ldr	r3, [r7, #4]
10002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002a32:	041b      	lsls	r3, r3, #16
10002a34:	430b      	orrs	r3, r1
10002a36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002a3a:	4313      	orrs	r3, r2
10002a3c:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a44:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a4c:	f043 0304 	orr.w	r3, r3, #4
10002a50:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10002a54:	e009      	b.n	10002a6a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10002a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a5a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a62:	f023 0304 	bic.w	r3, r3, #4
10002a66:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10002a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a6e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a76:	f043 0301 	orr.w	r3, r3, #1
10002a7a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002a7e:	f7fd fe25 	bl	100006cc <HAL_GetTick>
10002a82:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002a84:	e008      	b.n	10002a98 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002a86:	f7fd fe21 	bl	100006cc <HAL_GetTick>
10002a8a:	4602      	mov	r2, r0
10002a8c:	68fb      	ldr	r3, [r7, #12]
10002a8e:	1ad3      	subs	r3, r2, r3
10002a90:	2b64      	cmp	r3, #100	; 0x64
10002a92:	d901      	bls.n	10002a98 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002a94:	2303      	movs	r3, #3
10002a96:	e03f      	b.n	10002b18 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002a98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a9c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002aa0:	f003 0302 	and.w	r3, r3, #2
10002aa4:	2b02      	cmp	r3, #2
10002aa6:	d1ee      	bne.n	10002a86 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ab0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ab4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002ab8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002abc:	e02b      	b.n	10002b16 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ac2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ac6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002ace:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002ad2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ad6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ada:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ade:	f023 0301 	bic.w	r3, r3, #1
10002ae2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002ae6:	f7fd fdf1 	bl	100006cc <HAL_GetTick>
10002aea:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002aec:	e008      	b.n	10002b00 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002aee:	f7fd fded 	bl	100006cc <HAL_GetTick>
10002af2:	4602      	mov	r2, r0
10002af4:	68fb      	ldr	r3, [r7, #12]
10002af6:	1ad3      	subs	r3, r2, r3
10002af8:	2b64      	cmp	r3, #100	; 0x64
10002afa:	d901      	bls.n	10002b00 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002afc:	2303      	movs	r3, #3
10002afe:	e00b      	b.n	10002b18 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b04:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002b08:	f003 0302 	and.w	r3, r3, #2
10002b0c:	2b02      	cmp	r3, #2
10002b0e:	d0ee      	beq.n	10002aee <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002b10:	e001      	b.n	10002b16 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002b12:	2301      	movs	r3, #1
10002b14:	e000      	b.n	10002b18 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002b16:	2300      	movs	r3, #0
}
10002b18:	4618      	mov	r0, r3
10002b1a:	3710      	adds	r7, #16
10002b1c:	46bd      	mov	sp, r7
10002b1e:	bd80      	pop	{r7, pc}
10002b20:	ffc0fe00 	.word	0xffc0fe00

10002b24 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002b24:	b580      	push	{r7, lr}
10002b26:	b084      	sub	sp, #16
10002b28:	af00      	add	r7, sp, #0
10002b2a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002b2c:	687b      	ldr	r3, [r7, #4]
10002b2e:	681b      	ldr	r3, [r3, #0]
10002b30:	2b00      	cmp	r3, #0
10002b32:	f000 8147 	beq.w	10002dc4 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002b36:	687b      	ldr	r3, [r7, #4]
10002b38:	681b      	ldr	r3, [r3, #0]
10002b3a:	2b02      	cmp	r3, #2
10002b3c:	f040 8119 	bne.w	10002d72 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b44:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002b48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002b50:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002b54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002b5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002b60:	f023 0301 	bic.w	r3, r3, #1
10002b64:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b68:	f7fd fdb0 	bl	100006cc <HAL_GetTick>
10002b6c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002b6e:	e008      	b.n	10002b82 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b70:	f7fd fdac 	bl	100006cc <HAL_GetTick>
10002b74:	4602      	mov	r2, r0
10002b76:	68fb      	ldr	r3, [r7, #12]
10002b78:	1ad3      	subs	r3, r2, r3
10002b7a:	2b64      	cmp	r3, #100	; 0x64
10002b7c:	d901      	bls.n	10002b82 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002b7e:	2303      	movs	r3, #3
10002b80:	e121      	b.n	10002dc6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002b82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b86:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002b8a:	f003 0302 	and.w	r3, r3, #2
10002b8e:	2b02      	cmp	r3, #2
10002b90:	d0ee      	beq.n	10002b70 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002b92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b96:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002b9a:	f023 0203 	bic.w	r2, r3, #3
10002b9e:	687b      	ldr	r3, [r7, #4]
10002ba0:	685b      	ldr	r3, [r3, #4]
10002ba2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002ba6:	4313      	orrs	r3, r2
10002ba8:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002bac:	e008      	b.n	10002bc0 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002bae:	f7fd fd8d 	bl	100006cc <HAL_GetTick>
10002bb2:	4602      	mov	r2, r0
10002bb4:	68fb      	ldr	r3, [r7, #12]
10002bb6:	1ad3      	subs	r3, r2, r3
10002bb8:	2b64      	cmp	r3, #100	; 0x64
10002bba:	d901      	bls.n	10002bc0 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002bbc:	2303      	movs	r3, #3
10002bbe:	e102      	b.n	10002dc6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bc4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002bd0:	d1ed      	bne.n	10002bae <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bd6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10002bda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002bde:	687b      	ldr	r3, [r7, #4]
10002be0:	69db      	ldr	r3, [r3, #28]
10002be2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002be6:	4313      	orrs	r3, r2
10002be8:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002bec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bf0:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002bf4:	4b76      	ldr	r3, [pc, #472]	; (10002dd0 <RCCEx_PLL4_Config+0x2ac>)
10002bf6:	4013      	ands	r3, r2
10002bf8:	687a      	ldr	r2, [r7, #4]
10002bfa:	68d2      	ldr	r2, [r2, #12]
10002bfc:	1e51      	subs	r1, r2, #1
10002bfe:	687a      	ldr	r2, [r7, #4]
10002c00:	6892      	ldr	r2, [r2, #8]
10002c02:	3a01      	subs	r2, #1
10002c04:	0412      	lsls	r2, r2, #16
10002c06:	430a      	orrs	r2, r1
10002c08:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c0c:	4313      	orrs	r3, r2
10002c0e:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10002c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c16:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002c1a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002c1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002c22:	687a      	ldr	r2, [r7, #4]
10002c24:	6912      	ldr	r2, [r2, #16]
10002c26:	1e51      	subs	r1, r2, #1
10002c28:	687a      	ldr	r2, [r7, #4]
10002c2a:	6952      	ldr	r2, [r2, #20]
10002c2c:	3a01      	subs	r2, #1
10002c2e:	0212      	lsls	r2, r2, #8
10002c30:	4311      	orrs	r1, r2
10002c32:	687a      	ldr	r2, [r7, #4]
10002c34:	6992      	ldr	r2, [r2, #24]
10002c36:	3a01      	subs	r2, #1
10002c38:	0412      	lsls	r2, r2, #16
10002c3a:	430a      	orrs	r2, r1
10002c3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c40:	4313      	orrs	r3, r2
10002c42:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c4a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002c4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002c56:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002c5a:	687b      	ldr	r3, [r7, #4]
10002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002c5e:	2b02      	cmp	r3, #2
10002c60:	d003      	beq.n	10002c6a <RCCEx_PLL4_Config+0x146>
10002c62:	687b      	ldr	r3, [r7, #4]
10002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002c66:	2b00      	cmp	r3, #0
10002c68:	d10c      	bne.n	10002c84 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c6e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002c7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002c7e:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002c82:	e00f      	b.n	10002ca4 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002c84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c88:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002c8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002c90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002c94:	687a      	ldr	r2, [r7, #4]
10002c96:	6a12      	ldr	r2, [r2, #32]
10002c98:	00d2      	lsls	r2, r2, #3
10002c9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c9e:	4313      	orrs	r3, r2
10002ca0:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ca8:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002cac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002cb4:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002cb8:	687b      	ldr	r3, [r7, #4]
10002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002cbc:	2b02      	cmp	r3, #2
10002cbe:	d124      	bne.n	10002d0a <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cc4:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10002cc8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002ccc:	687b      	ldr	r3, [r7, #4]
10002cce:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002cd0:	687b      	ldr	r3, [r7, #4]
10002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002cd4:	4319      	orrs	r1, r3
10002cd6:	687b      	ldr	r3, [r7, #4]
10002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002cda:	4319      	orrs	r1, r3
10002cdc:	687b      	ldr	r3, [r7, #4]
10002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002ce0:	4319      	orrs	r1, r3
10002ce2:	687b      	ldr	r3, [r7, #4]
10002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002ce6:	041b      	lsls	r3, r3, #16
10002ce8:	430b      	orrs	r3, r1
10002cea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002cee:	4313      	orrs	r3, r2
10002cf0:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002cf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cf8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002cfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d00:	f043 0304 	orr.w	r3, r3, #4
10002d04:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002d08:	e009      	b.n	10002d1e <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002d0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d0e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d16:	f023 0304 	bic.w	r3, r3, #4
10002d1a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d22:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d2a:	f043 0301 	orr.w	r3, r3, #1
10002d2e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002d32:	f7fd fccb 	bl	100006cc <HAL_GetTick>
10002d36:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002d38:	e008      	b.n	10002d4c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002d3a:	f7fd fcc7 	bl	100006cc <HAL_GetTick>
10002d3e:	4602      	mov	r2, r0
10002d40:	68fb      	ldr	r3, [r7, #12]
10002d42:	1ad3      	subs	r3, r2, r3
10002d44:	2b64      	cmp	r3, #100	; 0x64
10002d46:	d901      	bls.n	10002d4c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002d48:	2303      	movs	r3, #3
10002d4a:	e03c      	b.n	10002dc6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d50:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d54:	f003 0302 	and.w	r3, r3, #2
10002d58:	2b02      	cmp	r3, #2
10002d5a:	d1ee      	bne.n	10002d3a <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002d5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d60:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d68:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002d6c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002d70:	e028      	b.n	10002dc4 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d76:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002d82:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d8a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d92:	f023 0301 	bic.w	r3, r3, #1
10002d96:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002d9a:	f7fd fc97 	bl	100006cc <HAL_GetTick>
10002d9e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002da0:	e008      	b.n	10002db4 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002da2:	f7fd fc93 	bl	100006cc <HAL_GetTick>
10002da6:	4602      	mov	r2, r0
10002da8:	68fb      	ldr	r3, [r7, #12]
10002daa:	1ad3      	subs	r3, r2, r3
10002dac:	2b64      	cmp	r3, #100	; 0x64
10002dae:	d901      	bls.n	10002db4 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002db0:	2303      	movs	r3, #3
10002db2:	e008      	b.n	10002dc6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002db8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002dbc:	f003 0302 	and.w	r3, r3, #2
10002dc0:	2b02      	cmp	r3, #2
10002dc2:	d0ee      	beq.n	10002da2 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002dc4:	2300      	movs	r3, #0
}
10002dc6:	4618      	mov	r0, r3
10002dc8:	3710      	adds	r7, #16
10002dca:	46bd      	mov	sp, r7
10002dcc:	bd80      	pop	{r7, pc}
10002dce:	bf00      	nop
10002dd0:	ffc0fe00 	.word	0xffc0fe00

10002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10002dd8:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10002ddc:	af00      	add	r7, sp, #0
10002dde:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002de6:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10002de8:	2300      	movs	r3, #0
10002dea:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10002dee:	2300      	movs	r3, #0
10002df0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10002df4:	2300      	movs	r3, #0
10002df6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10002dfa:	2300      	movs	r3, #0
10002dfc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10002e00:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002e04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002e08:	681b      	ldr	r3, [r3, #0]
10002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
10002e0e:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
10002e12:	2500      	movs	r5, #0
10002e14:	ea54 0305 	orrs.w	r3, r4, r5
10002e18:	d011      	beq.n	10002e3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10002e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10002e22:	f023 0103 	bic.w	r1, r3, #3
10002e26:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002e2e:	681b      	ldr	r3, [r3, #0]
10002e30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10002e34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002e38:	430b      	orrs	r3, r1
10002e3a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10002e3e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002e46:	681b      	ldr	r3, [r3, #0]
10002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
10002e4c:	f002 0810 	and.w	r8, r2, #16
10002e50:	f04f 0900 	mov.w	r9, #0
10002e54:	ea58 0309 	orrs.w	r3, r8, r9
10002e58:	d038      	beq.n	10002ecc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10002e5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002e62:	681b      	ldr	r3, [r3, #0]
10002e64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10002e68:	2b01      	cmp	r3, #1
10002e6a:	d11d      	bne.n	10002ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002e6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002e74:	681b      	ldr	r3, [r3, #0]
10002e76:	3380      	adds	r3, #128	; 0x80
10002e78:	4618      	mov	r0, r3
10002e7a:	f7ff fe53 	bl	10002b24 <RCCEx_PLL4_Config>
10002e7e:	4603      	mov	r3, r0
10002e80:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10002e84:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10002e88:	2b00      	cmp	r3, #0
10002e8a:	d003      	beq.n	10002e94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10002e8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10002e90:	f001 be2a 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002ea4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10002ea8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002eac:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10002eb0:	f023 0107 	bic.w	r1, r3, #7
10002eb4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002ebc:	681b      	ldr	r3, [r3, #0]
10002ebe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10002ec2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ec6:	430b      	orrs	r3, r1
10002ec8:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10002ecc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002ed4:	681b      	ldr	r3, [r3, #0]
10002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
10002eda:	f002 0a20 	and.w	sl, r2, #32
10002ede:	f04f 0b00 	mov.w	fp, #0
10002ee2:	ea5a 030b 	orrs.w	r3, sl, fp
10002ee6:	d038      	beq.n	10002f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10002ee8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002ef0:	681b      	ldr	r3, [r3, #0]
10002ef2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002ef6:	2b01      	cmp	r3, #1
10002ef8:	d11d      	bne.n	10002f36 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002efa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002f02:	681b      	ldr	r3, [r3, #0]
10002f04:	3380      	adds	r3, #128	; 0x80
10002f06:	4618      	mov	r0, r3
10002f08:	f7ff fe0c 	bl	10002b24 <RCCEx_PLL4_Config>
10002f0c:	4603      	mov	r3, r0
10002f0e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10002f12:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10002f16:	2b00      	cmp	r3, #0
10002f18:	d003      	beq.n	10002f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10002f1a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10002f1e:	f001 bde3 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f26:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002f2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002f32:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10002f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f3a:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10002f3e:	f023 0107 	bic.w	r1, r3, #7
10002f42:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002f4a:	681b      	ldr	r3, [r3, #0]
10002f4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002f50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002f54:	430b      	orrs	r3, r1
10002f56:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10002f5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002f5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002f62:	681b      	ldr	r3, [r3, #0]
10002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
10002f68:	2100      	movs	r1, #0
10002f6a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10002f6e:	f003 0320 	and.w	r3, r3, #32
10002f72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
10002f76:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
10002f7a:	460b      	mov	r3, r1
10002f7c:	4313      	orrs	r3, r2
10002f7e:	d038      	beq.n	10002ff2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10002f80:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002f88:	681b      	ldr	r3, [r3, #0]
10002f8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10002f8e:	2b01      	cmp	r3, #1
10002f90:	d11d      	bne.n	10002fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002f92:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002f9a:	681b      	ldr	r3, [r3, #0]
10002f9c:	3344      	adds	r3, #68	; 0x44
10002f9e:	4618      	mov	r0, r3
10002fa0:	f7ff fc56 	bl	10002850 <RCCEx_PLL3_Config>
10002fa4:	4603      	mov	r3, r0
10002fa6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10002faa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10002fae:	2b00      	cmp	r3, #0
10002fb0:	d003      	beq.n	10002fba <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10002fb2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10002fb6:	f001 bd97 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fbe:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002fc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002fc6:	f043 0320 	orr.w	r3, r3, #32
10002fca:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10002fce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002fd6:	f023 0107 	bic.w	r1, r3, #7
10002fda:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002fe2:	681b      	ldr	r3, [r3, #0]
10002fe4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10002fe8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002fec:	430b      	orrs	r3, r1
10002fee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10002ff2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10002ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10002ffa:	681b      	ldr	r3, [r3, #0]
10002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
10003000:	f002 0380 	and.w	r3, r2, #128	; 0x80
10003004:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10003008:	2300      	movs	r3, #0
1000300a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
1000300e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
10003012:	460b      	mov	r3, r1
10003014:	4313      	orrs	r3, r2
10003016:	d07e      	beq.n	10003116 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10003018:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000301c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003020:	681b      	ldr	r3, [r3, #0]
10003022:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003026:	2b04      	cmp	r3, #4
10003028:	d044      	beq.n	100030b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
1000302a:	2b04      	cmp	r3, #4
1000302c:	d861      	bhi.n	100030f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
1000302e:	2b00      	cmp	r3, #0
10003030:	d002      	beq.n	10003038 <HAL_RCCEx_PeriphCLKConfig+0x264>
10003032:	2b01      	cmp	r3, #1
10003034:	d01f      	beq.n	10003076 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10003036:	e05c      	b.n	100030f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003038:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000303c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003040:	681b      	ldr	r3, [r3, #0]
10003042:	3380      	adds	r3, #128	; 0x80
10003044:	4618      	mov	r0, r3
10003046:	f7ff fd6d 	bl	10002b24 <RCCEx_PLL4_Config>
1000304a:	4603      	mov	r3, r0
1000304c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003050:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003054:	2b00      	cmp	r3, #0
10003056:	d003      	beq.n	10003060 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10003058:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000305c:	f001 bd44 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003060:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003064:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000306c:	f043 0320 	orr.w	r3, r3, #32
10003070:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003074:	e03d      	b.n	100030f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003076:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000307a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000307e:	681b      	ldr	r3, [r3, #0]
10003080:	3344      	adds	r3, #68	; 0x44
10003082:	4618      	mov	r0, r3
10003084:	f7ff fbe4 	bl	10002850 <RCCEx_PLL3_Config>
10003088:	4603      	mov	r3, r0
1000308a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000308e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003092:	2b00      	cmp	r3, #0
10003094:	d003      	beq.n	1000309e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10003096:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000309a:	f001 bd25 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000309e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100030a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100030aa:	f043 0320 	orr.w	r3, r3, #32
100030ae:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100030b2:	e01e      	b.n	100030f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100030b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100030b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100030bc:	681b      	ldr	r3, [r3, #0]
100030be:	3344      	adds	r3, #68	; 0x44
100030c0:	4618      	mov	r0, r3
100030c2:	f7ff fbc5 	bl	10002850 <RCCEx_PLL3_Config>
100030c6:	4603      	mov	r3, r0
100030c8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100030cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100030d0:	2b00      	cmp	r3, #0
100030d2:	d003      	beq.n	100030dc <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
100030d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100030d8:	f001 bd06 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100030dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100030e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100030ec:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100030f0:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
100030f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030f6:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
100030fa:	f023 0107 	bic.w	r1, r3, #7
100030fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003106:	681b      	ldr	r3, [r3, #0]
10003108:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
1000310c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003110:	430b      	orrs	r3, r1
10003112:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10003116:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000311a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000311e:	681b      	ldr	r3, [r3, #0]
10003120:	e9d3 2300 	ldrd	r2, r3, [r3]
10003124:	f402 7380 	and.w	r3, r2, #256	; 0x100
10003128:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
1000312c:	2300      	movs	r3, #0
1000312e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
10003132:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
10003136:	460b      	mov	r3, r1
10003138:	4313      	orrs	r3, r2
1000313a:	d07e      	beq.n	1000323a <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
1000313c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003144:	681b      	ldr	r3, [r3, #0]
10003146:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
1000314a:	2b05      	cmp	r3, #5
1000314c:	d044      	beq.n	100031d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
1000314e:	2b05      	cmp	r3, #5
10003150:	d861      	bhi.n	10003216 <HAL_RCCEx_PeriphCLKConfig+0x442>
10003152:	2b00      	cmp	r3, #0
10003154:	d002      	beq.n	1000315c <HAL_RCCEx_PeriphCLKConfig+0x388>
10003156:	2b01      	cmp	r3, #1
10003158:	d01f      	beq.n	1000319a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
1000315a:	e05c      	b.n	10003216 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000315c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003164:	681b      	ldr	r3, [r3, #0]
10003166:	3380      	adds	r3, #128	; 0x80
10003168:	4618      	mov	r0, r3
1000316a:	f7ff fcdb 	bl	10002b24 <RCCEx_PLL4_Config>
1000316e:	4603      	mov	r3, r0
10003170:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003174:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003178:	2b00      	cmp	r3, #0
1000317a:	d003      	beq.n	10003184 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
1000317c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003180:	f001 bcb2 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003184:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003188:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000318c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003190:	f043 0320 	orr.w	r3, r3, #32
10003194:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003198:	e03d      	b.n	10003216 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000319a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000319e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100031a2:	681b      	ldr	r3, [r3, #0]
100031a4:	3344      	adds	r3, #68	; 0x44
100031a6:	4618      	mov	r0, r3
100031a8:	f7ff fb52 	bl	10002850 <RCCEx_PLL3_Config>
100031ac:	4603      	mov	r3, r0
100031ae:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100031b2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100031b6:	2b00      	cmp	r3, #0
100031b8:	d003      	beq.n	100031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
100031ba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100031be:	f001 bc93 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100031c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031c6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100031ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100031ce:	f043 0320 	orr.w	r3, r3, #32
100031d2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100031d6:	e01e      	b.n	10003216 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100031d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100031dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100031e0:	681b      	ldr	r3, [r3, #0]
100031e2:	3344      	adds	r3, #68	; 0x44
100031e4:	4618      	mov	r0, r3
100031e6:	f7ff fb33 	bl	10002850 <RCCEx_PLL3_Config>
100031ea:	4603      	mov	r3, r0
100031ec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100031f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100031f4:	2b00      	cmp	r3, #0
100031f6:	d003      	beq.n	10003200 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
100031f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100031fc:	f001 bc74 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003204:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000320c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003210:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003214:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10003216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000321a:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
1000321e:	f023 0107 	bic.w	r1, r3, #7
10003222:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000322a:	681b      	ldr	r3, [r3, #0]
1000322c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10003230:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003234:	430b      	orrs	r3, r1
10003236:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
1000323a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000323e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003242:	681b      	ldr	r3, [r3, #0]
10003244:	e9d3 2300 	ldrd	r2, r3, [r3]
10003248:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
1000324c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
10003250:	2300      	movs	r3, #0
10003252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
10003256:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
1000325a:	460b      	mov	r3, r1
1000325c:	4313      	orrs	r3, r2
1000325e:	d07e      	beq.n	1000335e <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003260:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003268:	681b      	ldr	r3, [r3, #0]
1000326a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
1000326e:	2b04      	cmp	r3, #4
10003270:	d044      	beq.n	100032fc <HAL_RCCEx_PeriphCLKConfig+0x528>
10003272:	2b04      	cmp	r3, #4
10003274:	d861      	bhi.n	1000333a <HAL_RCCEx_PeriphCLKConfig+0x566>
10003276:	2b00      	cmp	r3, #0
10003278:	d002      	beq.n	10003280 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
1000327a:	2b01      	cmp	r3, #1
1000327c:	d01f      	beq.n	100032be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
1000327e:	e05c      	b.n	1000333a <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003280:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003288:	681b      	ldr	r3, [r3, #0]
1000328a:	3380      	adds	r3, #128	; 0x80
1000328c:	4618      	mov	r0, r3
1000328e:	f7ff fc49 	bl	10002b24 <RCCEx_PLL4_Config>
10003292:	4603      	mov	r3, r0
10003294:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003298:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000329c:	2b00      	cmp	r3, #0
1000329e:	d003      	beq.n	100032a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100032a0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100032a4:	f001 bc20 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100032a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032ac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100032b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100032b4:	f043 0320 	orr.w	r3, r3, #32
100032b8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100032bc:	e03d      	b.n	1000333a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100032be:	f507 7312 	add.w	r3, r7, #584	; 0x248
100032c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100032c6:	681b      	ldr	r3, [r3, #0]
100032c8:	3344      	adds	r3, #68	; 0x44
100032ca:	4618      	mov	r0, r3
100032cc:	f7ff fac0 	bl	10002850 <RCCEx_PLL3_Config>
100032d0:	4603      	mov	r3, r0
100032d2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100032d6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100032da:	2b00      	cmp	r3, #0
100032dc:	d003      	beq.n	100032e6 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
100032de:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100032e2:	f001 bc01 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100032e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100032ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100032f2:	f043 0320 	orr.w	r3, r3, #32
100032f6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100032fa:	e01e      	b.n	1000333a <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100032fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003304:	681b      	ldr	r3, [r3, #0]
10003306:	3344      	adds	r3, #68	; 0x44
10003308:	4618      	mov	r0, r3
1000330a:	f7ff faa1 	bl	10002850 <RCCEx_PLL3_Config>
1000330e:	4603      	mov	r3, r0
10003310:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003314:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003318:	2b00      	cmp	r3, #0
1000331a:	d003      	beq.n	10003324 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
1000331c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003320:	f001 bbe2 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003328:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000332c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003334:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003338:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
1000333a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000333e:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
10003342:	f023 0107 	bic.w	r1, r3, #7
10003346:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000334a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000334e:	681b      	ldr	r3, [r3, #0]
10003350:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10003354:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003358:	430b      	orrs	r3, r1
1000335a:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
1000335e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003366:	681b      	ldr	r3, [r3, #0]
10003368:	e9d3 2300 	ldrd	r2, r3, [r3]
1000336c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
10003370:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
10003374:	2300      	movs	r3, #0
10003376:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
1000337a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
1000337e:	460b      	mov	r3, r1
10003380:	4313      	orrs	r3, r2
10003382:	d07e      	beq.n	10003482 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10003384:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000338c:	681b      	ldr	r3, [r3, #0]
1000338e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10003392:	2b04      	cmp	r3, #4
10003394:	d044      	beq.n	10003420 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10003396:	2b04      	cmp	r3, #4
10003398:	d861      	bhi.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000339a:	2b00      	cmp	r3, #0
1000339c:	d002      	beq.n	100033a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
1000339e:	2b01      	cmp	r3, #1
100033a0:	d01f      	beq.n	100033e2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
100033a2:	e05c      	b.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100033a4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100033a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100033ac:	681b      	ldr	r3, [r3, #0]
100033ae:	3380      	adds	r3, #128	; 0x80
100033b0:	4618      	mov	r0, r3
100033b2:	f7ff fbb7 	bl	10002b24 <RCCEx_PLL4_Config>
100033b6:	4603      	mov	r3, r0
100033b8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100033bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100033c0:	2b00      	cmp	r3, #0
100033c2:	d003      	beq.n	100033cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
100033c4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100033c8:	f001 bb8e 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100033cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100033d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100033d8:	f043 0320 	orr.w	r3, r3, #32
100033dc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100033e0:	e03d      	b.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100033e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100033e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100033ea:	681b      	ldr	r3, [r3, #0]
100033ec:	3344      	adds	r3, #68	; 0x44
100033ee:	4618      	mov	r0, r3
100033f0:	f7ff fa2e 	bl	10002850 <RCCEx_PLL3_Config>
100033f4:	4603      	mov	r3, r0
100033f6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100033fa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100033fe:	2b00      	cmp	r3, #0
10003400:	d003      	beq.n	1000340a <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10003402:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003406:	f001 bb6f 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000340a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000340e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003412:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003416:	f043 0320 	orr.w	r3, r3, #32
1000341a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000341e:	e01e      	b.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003420:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003428:	681b      	ldr	r3, [r3, #0]
1000342a:	3344      	adds	r3, #68	; 0x44
1000342c:	4618      	mov	r0, r3
1000342e:	f7ff fa0f 	bl	10002850 <RCCEx_PLL3_Config>
10003432:	4603      	mov	r3, r0
10003434:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003438:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000343c:	2b00      	cmp	r3, #0
1000343e:	d003      	beq.n	10003448 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10003440:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003444:	f001 bb50 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000344c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003458:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000345c:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
1000345e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003462:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10003466:	f023 0107 	bic.w	r1, r3, #7
1000346a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000346e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003472:	681b      	ldr	r3, [r3, #0]
10003474:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10003478:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000347c:	430b      	orrs	r3, r1
1000347e:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10003482:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000348a:	681b      	ldr	r3, [r3, #0]
1000348c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003490:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
10003494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
10003498:	2300      	movs	r3, #0
1000349a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
1000349e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
100034a2:	460b      	mov	r3, r1
100034a4:	4313      	orrs	r3, r2
100034a6:	d07e      	beq.n	100035a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100034a8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100034ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100034b0:	681b      	ldr	r3, [r3, #0]
100034b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100034b6:	2b04      	cmp	r3, #4
100034b8:	d044      	beq.n	10003544 <HAL_RCCEx_PeriphCLKConfig+0x770>
100034ba:	2b04      	cmp	r3, #4
100034bc:	d861      	bhi.n	10003582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
100034be:	2b00      	cmp	r3, #0
100034c0:	d002      	beq.n	100034c8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
100034c2:	2b01      	cmp	r3, #1
100034c4:	d01f      	beq.n	10003506 <HAL_RCCEx_PeriphCLKConfig+0x732>
100034c6:	e05c      	b.n	10003582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100034c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100034cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100034d0:	681b      	ldr	r3, [r3, #0]
100034d2:	3380      	adds	r3, #128	; 0x80
100034d4:	4618      	mov	r0, r3
100034d6:	f7ff fb25 	bl	10002b24 <RCCEx_PLL4_Config>
100034da:	4603      	mov	r3, r0
100034dc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100034e0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100034e4:	2b00      	cmp	r3, #0
100034e6:	d003      	beq.n	100034f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
100034e8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100034ec:	f001 bafc 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100034f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100034f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034fc:	f043 0310 	orr.w	r3, r3, #16
10003500:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003504:	e03d      	b.n	10003582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003506:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000350a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000350e:	681b      	ldr	r3, [r3, #0]
10003510:	3344      	adds	r3, #68	; 0x44
10003512:	4618      	mov	r0, r3
10003514:	f7ff f99c 	bl	10002850 <RCCEx_PLL3_Config>
10003518:	4603      	mov	r3, r0
1000351a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000351e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003522:	2b00      	cmp	r3, #0
10003524:	d003      	beq.n	1000352e <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10003526:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000352a:	f001 badd 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000352e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003532:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000353a:	f043 0320 	orr.w	r3, r3, #32
1000353e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003542:	e01e      	b.n	10003582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003544:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000354c:	681b      	ldr	r3, [r3, #0]
1000354e:	3344      	adds	r3, #68	; 0x44
10003550:	4618      	mov	r0, r3
10003552:	f7ff f97d 	bl	10002850 <RCCEx_PLL3_Config>
10003556:	4603      	mov	r3, r0
10003558:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000355c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003560:	2b00      	cmp	r3, #0
10003562:	d003      	beq.n	1000356c <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10003564:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003568:	f001 babe 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000356c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003570:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003574:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000357c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003580:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10003582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003586:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
1000358a:	f023 0107 	bic.w	r1, r3, #7
1000358e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003596:	681b      	ldr	r3, [r3, #0]
10003598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
1000359c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035a0:	430b      	orrs	r3, r1
100035a2:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100035a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100035aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100035ae:	681b      	ldr	r3, [r3, #0]
100035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
100035b4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
100035b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
100035bc:	2300      	movs	r3, #0
100035be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
100035c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
100035c6:	460b      	mov	r3, r1
100035c8:	4313      	orrs	r3, r2
100035ca:	d07e      	beq.n	100036ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
100035cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100035d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100035d4:	681b      	ldr	r3, [r3, #0]
100035d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100035da:	2b04      	cmp	r3, #4
100035dc:	d044      	beq.n	10003668 <HAL_RCCEx_PeriphCLKConfig+0x894>
100035de:	2b04      	cmp	r3, #4
100035e0:	d861      	bhi.n	100036a6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
100035e2:	2b00      	cmp	r3, #0
100035e4:	d002      	beq.n	100035ec <HAL_RCCEx_PeriphCLKConfig+0x818>
100035e6:	2b01      	cmp	r3, #1
100035e8:	d01f      	beq.n	1000362a <HAL_RCCEx_PeriphCLKConfig+0x856>
100035ea:	e05c      	b.n	100036a6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100035ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
100035f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100035f4:	681b      	ldr	r3, [r3, #0]
100035f6:	3380      	adds	r3, #128	; 0x80
100035f8:	4618      	mov	r0, r3
100035fa:	f7ff fa93 	bl	10002b24 <RCCEx_PLL4_Config>
100035fe:	4603      	mov	r3, r0
10003600:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003604:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003608:	2b00      	cmp	r3, #0
1000360a:	d003      	beq.n	10003614 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
1000360c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003610:	f001 ba6a 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003614:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003618:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000361c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003620:	f043 0310 	orr.w	r3, r3, #16
10003624:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003628:	e03d      	b.n	100036a6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000362a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000362e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003632:	681b      	ldr	r3, [r3, #0]
10003634:	3344      	adds	r3, #68	; 0x44
10003636:	4618      	mov	r0, r3
10003638:	f7ff f90a 	bl	10002850 <RCCEx_PLL3_Config>
1000363c:	4603      	mov	r3, r0
1000363e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003642:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003646:	2b00      	cmp	r3, #0
10003648:	d003      	beq.n	10003652 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
1000364a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000364e:	f001 ba4b 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003656:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000365a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000365e:	f043 0320 	orr.w	r3, r3, #32
10003662:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003666:	e01e      	b.n	100036a6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003668:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000366c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003670:	681b      	ldr	r3, [r3, #0]
10003672:	3344      	adds	r3, #68	; 0x44
10003674:	4618      	mov	r0, r3
10003676:	f7ff f8eb 	bl	10002850 <RCCEx_PLL3_Config>
1000367a:	4603      	mov	r3, r0
1000367c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003680:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003684:	2b00      	cmp	r3, #0
10003686:	d003      	beq.n	10003690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10003688:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000368c:	f001 ba2c 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003690:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003694:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003698:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100036a0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100036a4:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100036a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036aa:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
100036ae:	f023 0107 	bic.w	r1, r3, #7
100036b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100036b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100036ba:	681b      	ldr	r3, [r3, #0]
100036bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100036c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036c4:	430b      	orrs	r3, r1
100036c6:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100036ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100036ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100036d2:	681b      	ldr	r3, [r3, #0]
100036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
100036d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
100036dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
100036e0:	2300      	movs	r3, #0
100036e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
100036e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
100036ea:	460b      	mov	r3, r1
100036ec:	4313      	orrs	r3, r2
100036ee:	d038      	beq.n	10003762 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
100036f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100036f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100036f8:	681b      	ldr	r3, [r3, #0]
100036fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100036fe:	2b01      	cmp	r3, #1
10003700:	d11d      	bne.n	1000373e <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003702:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000370a:	681b      	ldr	r3, [r3, #0]
1000370c:	3380      	adds	r3, #128	; 0x80
1000370e:	4618      	mov	r0, r3
10003710:	f7ff fa08 	bl	10002b24 <RCCEx_PLL4_Config>
10003714:	4603      	mov	r3, r0
10003716:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000371a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000371e:	2b00      	cmp	r3, #0
10003720:	d003      	beq.n	1000372a <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10003722:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003726:	f001 b9df 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000372a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000372e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003736:	f043 0320 	orr.w	r3, r3, #32
1000373a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
1000373e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003742:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10003746:	f023 0107 	bic.w	r1, r3, #7
1000374a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000374e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003752:	681b      	ldr	r3, [r3, #0]
10003754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10003758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000375c:	430b      	orrs	r3, r1
1000375e:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10003762:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000376a:	681b      	ldr	r3, [r3, #0]
1000376c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003770:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
10003774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
10003778:	2300      	movs	r3, #0
1000377a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
1000377e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
10003782:	460b      	mov	r3, r1
10003784:	4313      	orrs	r3, r2
10003786:	d05b      	beq.n	10003840 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10003788:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000378c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003790:	681b      	ldr	r3, [r3, #0]
10003792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10003796:	2b01      	cmp	r3, #1
10003798:	d002      	beq.n	100037a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
1000379a:	2b05      	cmp	r3, #5
1000379c:	d01f      	beq.n	100037de <HAL_RCCEx_PeriphCLKConfig+0xa0a>
1000379e:	e03d      	b.n	1000381c <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100037a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100037a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100037a8:	681b      	ldr	r3, [r3, #0]
100037aa:	3380      	adds	r3, #128	; 0x80
100037ac:	4618      	mov	r0, r3
100037ae:	f7ff f9b9 	bl	10002b24 <RCCEx_PLL4_Config>
100037b2:	4603      	mov	r3, r0
100037b4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100037b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100037bc:	2b00      	cmp	r3, #0
100037be:	d003      	beq.n	100037c8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100037c0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100037c4:	f001 b990 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100037c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100037d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037d4:	f043 0320 	orr.w	r3, r3, #32
100037d8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100037dc:	e01e      	b.n	1000381c <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100037de:	f507 7312 	add.w	r3, r7, #584	; 0x248
100037e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100037e6:	681b      	ldr	r3, [r3, #0]
100037e8:	3344      	adds	r3, #68	; 0x44
100037ea:	4618      	mov	r0, r3
100037ec:	f7ff f830 	bl	10002850 <RCCEx_PLL3_Config>
100037f0:	4603      	mov	r3, r0
100037f2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100037f6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100037fa:	2b00      	cmp	r3, #0
100037fc:	d003      	beq.n	10003806 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
100037fe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003802:	f001 b971 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003806:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000380a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000380e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003812:	f043 0320 	orr.w	r3, r3, #32
10003816:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000381a:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
1000381c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003820:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10003824:	f023 0107 	bic.w	r1, r3, #7
10003828:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000382c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003830:	681b      	ldr	r3, [r3, #0]
10003832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
10003836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000383a:	430b      	orrs	r3, r1
1000383c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10003840:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003848:	681b      	ldr	r3, [r3, #0]
1000384a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000384e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
10003852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
10003856:	2300      	movs	r3, #0
10003858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
1000385c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
10003860:	460b      	mov	r3, r1
10003862:	4313      	orrs	r3, r2
10003864:	d038      	beq.n	100038d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10003866:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000386a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000386e:	681b      	ldr	r3, [r3, #0]
10003870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10003874:	2b01      	cmp	r3, #1
10003876:	d11d      	bne.n	100038b4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003878:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000387c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003880:	681b      	ldr	r3, [r3, #0]
10003882:	3380      	adds	r3, #128	; 0x80
10003884:	4618      	mov	r0, r3
10003886:	f7ff f94d 	bl	10002b24 <RCCEx_PLL4_Config>
1000388a:	4603      	mov	r3, r0
1000388c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003890:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003894:	2b00      	cmp	r3, #0
10003896:	d003      	beq.n	100038a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10003898:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000389c:	f001 b924 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100038a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038a4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100038a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100038ac:	f043 0320 	orr.w	r3, r3, #32
100038b0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100038b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038b8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
100038bc:	f023 0107 	bic.w	r1, r3, #7
100038c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100038c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100038c8:	681b      	ldr	r3, [r3, #0]
100038ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100038ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100038d2:	430b      	orrs	r3, r1
100038d4:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
100038d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100038dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100038e0:	681b      	ldr	r3, [r3, #0]
100038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100038e6:	f002 0302 	and.w	r3, r2, #2
100038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
100038ee:	2300      	movs	r3, #0
100038f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
100038f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
100038f8:	460b      	mov	r3, r1
100038fa:	4313      	orrs	r3, r2
100038fc:	d038      	beq.n	10003970 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
100038fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003906:	681b      	ldr	r3, [r3, #0]
10003908:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
1000390c:	2b01      	cmp	r3, #1
1000390e:	d11d      	bne.n	1000394c <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003910:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003918:	681b      	ldr	r3, [r3, #0]
1000391a:	3380      	adds	r3, #128	; 0x80
1000391c:	4618      	mov	r0, r3
1000391e:	f7ff f901 	bl	10002b24 <RCCEx_PLL4_Config>
10003922:	4603      	mov	r3, r0
10003924:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003928:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000392c:	2b00      	cmp	r3, #0
1000392e:	d003      	beq.n	10003938 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10003930:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003934:	f001 b8d8 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000393c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003944:	f043 0320 	orr.w	r3, r3, #32
10003948:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
1000394c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003950:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10003954:	f023 0107 	bic.w	r1, r3, #7
10003958:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000395c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003960:	681b      	ldr	r3, [r3, #0]
10003962:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10003966:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000396a:	430b      	orrs	r3, r1
1000396c:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10003970:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003978:	681b      	ldr	r3, [r3, #0]
1000397a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000397e:	f002 0304 	and.w	r3, r2, #4
10003982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
10003986:	2300      	movs	r3, #0
10003988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
1000398c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
10003990:	460b      	mov	r3, r1
10003992:	4313      	orrs	r3, r2
10003994:	d038      	beq.n	10003a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10003996:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000399a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000399e:	681b      	ldr	r3, [r3, #0]
100039a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100039a4:	2b01      	cmp	r3, #1
100039a6:	d11d      	bne.n	100039e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100039a8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100039ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100039b0:	681b      	ldr	r3, [r3, #0]
100039b2:	3380      	adds	r3, #128	; 0x80
100039b4:	4618      	mov	r0, r3
100039b6:	f7ff f8b5 	bl	10002b24 <RCCEx_PLL4_Config>
100039ba:	4603      	mov	r3, r0
100039bc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100039c0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100039c4:	2b00      	cmp	r3, #0
100039c6:	d003      	beq.n	100039d0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
100039c8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100039cc:	f001 b88c 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100039d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039d4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039dc:	f043 0320 	orr.w	r3, r3, #32
100039e0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
100039e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100039ec:	f023 0107 	bic.w	r1, r3, #7
100039f0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100039f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100039f8:	681b      	ldr	r3, [r3, #0]
100039fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100039fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a02:	430b      	orrs	r3, r1
10003a04:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10003a08:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003a10:	681b      	ldr	r3, [r3, #0]
10003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
10003a16:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
10003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10003a1e:	2300      	movs	r3, #0
10003a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
10003a24:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
10003a28:	460b      	mov	r3, r1
10003a2a:	4313      	orrs	r3, r2
10003a2c:	d038      	beq.n	10003aa0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10003a2e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003a36:	681b      	ldr	r3, [r3, #0]
10003a38:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10003a3c:	2b01      	cmp	r3, #1
10003a3e:	d11d      	bne.n	10003a7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003a40:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003a48:	681b      	ldr	r3, [r3, #0]
10003a4a:	3380      	adds	r3, #128	; 0x80
10003a4c:	4618      	mov	r0, r3
10003a4e:	f7ff f869 	bl	10002b24 <RCCEx_PLL4_Config>
10003a52:	4603      	mov	r3, r0
10003a54:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003a58:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003a5c:	2b00      	cmp	r3, #0
10003a5e:	d003      	beq.n	10003a68 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10003a60:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003a64:	f001 b840 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003a68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a6c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003a70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a74:	f043 0320 	orr.w	r3, r3, #32
10003a78:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10003a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a80:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10003a84:	f023 0107 	bic.w	r1, r3, #7
10003a88:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003a90:	681b      	ldr	r3, [r3, #0]
10003a92:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10003a96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a9a:	430b      	orrs	r3, r1
10003a9c:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10003aa0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003aa8:	681b      	ldr	r3, [r3, #0]
10003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
10003aae:	f002 0301 	and.w	r3, r2, #1
10003ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
10003ab6:	2300      	movs	r3, #0
10003ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
10003abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
10003ac0:	460b      	mov	r3, r1
10003ac2:	4313      	orrs	r3, r2
10003ac4:	d05b      	beq.n	10003b7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10003ac6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ace:	681b      	ldr	r3, [r3, #0]
10003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10003ad4:	2b01      	cmp	r3, #1
10003ad6:	d002      	beq.n	10003ade <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10003ad8:	2b04      	cmp	r3, #4
10003ada:	d01f      	beq.n	10003b1c <HAL_RCCEx_PeriphCLKConfig+0xd48>
10003adc:	e03d      	b.n	10003b5a <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003ade:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ae6:	681b      	ldr	r3, [r3, #0]
10003ae8:	3344      	adds	r3, #68	; 0x44
10003aea:	4618      	mov	r0, r3
10003aec:	f7fe feb0 	bl	10002850 <RCCEx_PLL3_Config>
10003af0:	4603      	mov	r3, r0
10003af2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003af6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003afa:	2b00      	cmp	r3, #0
10003afc:	d003      	beq.n	10003b06 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10003afe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003b02:	f000 bff1 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003b06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b0a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b12:	f043 0320 	orr.w	r3, r3, #32
10003b16:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003b1a:	e01e      	b.n	10003b5a <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b1c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003b24:	681b      	ldr	r3, [r3, #0]
10003b26:	3380      	adds	r3, #128	; 0x80
10003b28:	4618      	mov	r0, r3
10003b2a:	f7fe fffb 	bl	10002b24 <RCCEx_PLL4_Config>
10003b2e:	4603      	mov	r3, r0
10003b30:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003b34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003b38:	2b00      	cmp	r3, #0
10003b3a:	d003      	beq.n	10003b44 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10003b3c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003b40:	f000 bfd2 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003b44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b50:	f043 0320 	orr.w	r3, r3, #32
10003b54:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003b58:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10003b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003b62:	f023 0107 	bic.w	r1, r3, #7
10003b66:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003b6e:	681b      	ldr	r3, [r3, #0]
10003b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10003b74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b78:	430b      	orrs	r3, r1
10003b7a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10003b7e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003b86:	681b      	ldr	r3, [r3, #0]
10003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
10003b8c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
10003b90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
10003b94:	2300      	movs	r3, #0
10003b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
10003b9a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
10003b9e:	460b      	mov	r3, r1
10003ba0:	4313      	orrs	r3, r2
10003ba2:	d05b      	beq.n	10003c5c <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10003ba4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003bac:	681b      	ldr	r3, [r3, #0]
10003bae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10003bb2:	2b01      	cmp	r3, #1
10003bb4:	d002      	beq.n	10003bbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
10003bb6:	2b02      	cmp	r3, #2
10003bb8:	d01f      	beq.n	10003bfa <HAL_RCCEx_PeriphCLKConfig+0xe26>
10003bba:	e03d      	b.n	10003c38 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003bbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003bc4:	681b      	ldr	r3, [r3, #0]
10003bc6:	3344      	adds	r3, #68	; 0x44
10003bc8:	4618      	mov	r0, r3
10003bca:	f7fe fe41 	bl	10002850 <RCCEx_PLL3_Config>
10003bce:	4603      	mov	r3, r0
10003bd0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003bd4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003bd8:	2b00      	cmp	r3, #0
10003bda:	d003      	beq.n	10003be4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10003bdc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003be0:	f000 bf82 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003be4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003be8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003bec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003bf4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003bf8:	e01e      	b.n	10003c38 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003bfa:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003c02:	681b      	ldr	r3, [r3, #0]
10003c04:	3380      	adds	r3, #128	; 0x80
10003c06:	4618      	mov	r0, r3
10003c08:	f7fe ff8c 	bl	10002b24 <RCCEx_PLL4_Config>
10003c0c:	4603      	mov	r3, r0
10003c0e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003c12:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003c16:	2b00      	cmp	r3, #0
10003c18:	d003      	beq.n	10003c22 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10003c1a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003c1e:	f000 bf63 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003c22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c26:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c2e:	f043 0310 	orr.w	r3, r3, #16
10003c32:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003c36:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10003c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c3c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10003c40:	f023 0107 	bic.w	r1, r3, #7
10003c44:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003c4c:	681b      	ldr	r3, [r3, #0]
10003c4e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10003c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c56:	430b      	orrs	r3, r1
10003c58:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10003c5c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003c64:	681b      	ldr	r3, [r3, #0]
10003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
10003c6a:	2100      	movs	r1, #0
10003c6c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
10003c70:	f003 0301 	and.w	r3, r3, #1
10003c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10003c78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
10003c7c:	460b      	mov	r3, r1
10003c7e:	4313      	orrs	r3, r2
10003c80:	d05b      	beq.n	10003d3a <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10003c82:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003c86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003c8a:	681b      	ldr	r3, [r3, #0]
10003c8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10003c90:	2b01      	cmp	r3, #1
10003c92:	d002      	beq.n	10003c9a <HAL_RCCEx_PeriphCLKConfig+0xec6>
10003c94:	2b02      	cmp	r3, #2
10003c96:	d01f      	beq.n	10003cd8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10003c98:	e03d      	b.n	10003d16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003c9a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ca2:	681b      	ldr	r3, [r3, #0]
10003ca4:	3344      	adds	r3, #68	; 0x44
10003ca6:	4618      	mov	r0, r3
10003ca8:	f7fe fdd2 	bl	10002850 <RCCEx_PLL3_Config>
10003cac:	4603      	mov	r3, r0
10003cae:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003cb2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003cb6:	2b00      	cmp	r3, #0
10003cb8:	d003      	beq.n	10003cc2 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10003cba:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003cbe:	f000 bf13 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cc6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003cca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003cd2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003cd6:	e01e      	b.n	10003d16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003cd8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ce0:	681b      	ldr	r3, [r3, #0]
10003ce2:	3380      	adds	r3, #128	; 0x80
10003ce4:	4618      	mov	r0, r3
10003ce6:	f7fe ff1d 	bl	10002b24 <RCCEx_PLL4_Config>
10003cea:	4603      	mov	r3, r0
10003cec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003cf0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003cf4:	2b00      	cmp	r3, #0
10003cf6:	d003      	beq.n	10003d00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10003cf8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003cfc:	f000 bef4 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003d00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d04:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003d08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d0c:	f043 0310 	orr.w	r3, r3, #16
10003d10:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003d14:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10003d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d1a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10003d1e:	f023 0107 	bic.w	r1, r3, #7
10003d22:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d2a:	681b      	ldr	r3, [r3, #0]
10003d2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10003d30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d34:	430b      	orrs	r3, r1
10003d36:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10003d3a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d42:	681b      	ldr	r3, [r3, #0]
10003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d48:	2100      	movs	r1, #0
10003d4a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
10003d4e:	f003 0302 	and.w	r3, r3, #2
10003d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10003d56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
10003d5a:	460b      	mov	r3, r1
10003d5c:	4313      	orrs	r3, r2
10003d5e:	d05b      	beq.n	10003e18 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10003d60:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d68:	681b      	ldr	r3, [r3, #0]
10003d6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10003d6e:	2b00      	cmp	r3, #0
10003d70:	d002      	beq.n	10003d78 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10003d72:	2b01      	cmp	r3, #1
10003d74:	d01f      	beq.n	10003db6 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10003d76:	e03d      	b.n	10003df4 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d78:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d80:	681b      	ldr	r3, [r3, #0]
10003d82:	3380      	adds	r3, #128	; 0x80
10003d84:	4618      	mov	r0, r3
10003d86:	f7fe fecd 	bl	10002b24 <RCCEx_PLL4_Config>
10003d8a:	4603      	mov	r3, r0
10003d8c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003d90:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003d94:	2b00      	cmp	r3, #0
10003d96:	d003      	beq.n	10003da0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10003d98:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003d9c:	f000 bea4 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003da4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003da8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003dac:	f043 0310 	orr.w	r3, r3, #16
10003db0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003db4:	e01e      	b.n	10003df4 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003db6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003dbe:	681b      	ldr	r3, [r3, #0]
10003dc0:	3344      	adds	r3, #68	; 0x44
10003dc2:	4618      	mov	r0, r3
10003dc4:	f7fe fd44 	bl	10002850 <RCCEx_PLL3_Config>
10003dc8:	4603      	mov	r3, r0
10003dca:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003dce:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003dd2:	2b00      	cmp	r3, #0
10003dd4:	d003      	beq.n	10003dde <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10003dd6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003dda:	f000 be85 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003dde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003de2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003de6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003dea:	f043 0320 	orr.w	r3, r3, #32
10003dee:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003df2:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10003df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003df8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10003dfc:	f023 0103 	bic.w	r1, r3, #3
10003e00:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e08:	681b      	ldr	r3, [r3, #0]
10003e0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10003e0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e12:	430b      	orrs	r3, r1
10003e14:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10003e18:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e20:	681b      	ldr	r3, [r3, #0]
10003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
10003e26:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
10003e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
10003e2e:	2300      	movs	r3, #0
10003e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10003e34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10003e38:	460b      	mov	r3, r1
10003e3a:	4313      	orrs	r3, r2
10003e3c:	d05b      	beq.n	10003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10003e3e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e46:	681b      	ldr	r3, [r3, #0]
10003e48:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10003e4c:	2b01      	cmp	r3, #1
10003e4e:	d002      	beq.n	10003e56 <HAL_RCCEx_PeriphCLKConfig+0x1082>
10003e50:	2b02      	cmp	r3, #2
10003e52:	d01f      	beq.n	10003e94 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10003e54:	e03d      	b.n	10003ed2 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e56:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e5e:	681b      	ldr	r3, [r3, #0]
10003e60:	3344      	adds	r3, #68	; 0x44
10003e62:	4618      	mov	r0, r3
10003e64:	f7fe fcf4 	bl	10002850 <RCCEx_PLL3_Config>
10003e68:	4603      	mov	r3, r0
10003e6a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003e6e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e72:	2b00      	cmp	r3, #0
10003e74:	d003      	beq.n	10003e7e <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10003e76:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e7a:	f000 be35 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e82:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003e86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003e8e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003e92:	e01e      	b.n	10003ed2 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e94:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e9c:	681b      	ldr	r3, [r3, #0]
10003e9e:	3380      	adds	r3, #128	; 0x80
10003ea0:	4618      	mov	r0, r3
10003ea2:	f7fe fe3f 	bl	10002b24 <RCCEx_PLL4_Config>
10003ea6:	4603      	mov	r3, r0
10003ea8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003eac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003eb0:	2b00      	cmp	r3, #0
10003eb2:	d003      	beq.n	10003ebc <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10003eb4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003eb8:	f000 be16 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ec0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ec4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ec8:	f043 0310 	orr.w	r3, r3, #16
10003ecc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003ed0:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10003ed2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ed6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10003eda:	f023 0103 	bic.w	r1, r3, #3
10003ede:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ee6:	681b      	ldr	r3, [r3, #0]
10003ee8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10003eec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ef0:	430b      	orrs	r3, r1
10003ef2:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10003ef6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003efe:	681b      	ldr	r3, [r3, #0]
10003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f04:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10003f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
10003f0c:	2300      	movs	r3, #0
10003f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10003f12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
10003f16:	460b      	mov	r3, r1
10003f18:	4313      	orrs	r3, r2
10003f1a:	d05b      	beq.n	10003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10003f1c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f24:	681b      	ldr	r3, [r3, #0]
10003f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10003f2a:	2b01      	cmp	r3, #1
10003f2c:	d002      	beq.n	10003f34 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10003f2e:	2b02      	cmp	r3, #2
10003f30:	d01f      	beq.n	10003f72 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10003f32:	e03d      	b.n	10003fb0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f34:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f3c:	681b      	ldr	r3, [r3, #0]
10003f3e:	3344      	adds	r3, #68	; 0x44
10003f40:	4618      	mov	r0, r3
10003f42:	f7fe fc85 	bl	10002850 <RCCEx_PLL3_Config>
10003f46:	4603      	mov	r3, r0
10003f48:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003f4c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f50:	2b00      	cmp	r3, #0
10003f52:	d003      	beq.n	10003f5c <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10003f54:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f58:	f000 bdc6 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003f5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f60:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003f6c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003f70:	e01e      	b.n	10003fb0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f72:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f7a:	681b      	ldr	r3, [r3, #0]
10003f7c:	3380      	adds	r3, #128	; 0x80
10003f7e:	4618      	mov	r0, r3
10003f80:	f7fe fdd0 	bl	10002b24 <RCCEx_PLL4_Config>
10003f84:	4603      	mov	r3, r0
10003f86:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003f8a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f8e:	2b00      	cmp	r3, #0
10003f90:	d003      	beq.n	10003f9a <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10003f92:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f96:	f000 bda7 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f9e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fa6:	f043 0310 	orr.w	r3, r3, #16
10003faa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003fae:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10003fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fb4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10003fb8:	f023 0103 	bic.w	r1, r3, #3
10003fbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003fc4:	681b      	ldr	r3, [r3, #0]
10003fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10003fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fce:	430b      	orrs	r3, r1
10003fd0:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10003fd4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003fdc:	681b      	ldr	r3, [r3, #0]
10003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
10003fe2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
10003fe6:	67bb      	str	r3, [r7, #120]	; 0x78
10003fe8:	2300      	movs	r3, #0
10003fea:	67fb      	str	r3, [r7, #124]	; 0x7c
10003fec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10003ff0:	460b      	mov	r3, r1
10003ff2:	4313      	orrs	r3, r2
10003ff4:	d07e      	beq.n	100040f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10003ff6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ffe:	681b      	ldr	r3, [r3, #0]
10004000:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10004004:	2b03      	cmp	r3, #3
10004006:	d044      	beq.n	10004092 <HAL_RCCEx_PeriphCLKConfig+0x12be>
10004008:	2b03      	cmp	r3, #3
1000400a:	d861      	bhi.n	100040d0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
1000400c:	2b01      	cmp	r3, #1
1000400e:	d002      	beq.n	10004016 <HAL_RCCEx_PeriphCLKConfig+0x1242>
10004010:	2b02      	cmp	r3, #2
10004012:	d01f      	beq.n	10004054 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10004014:	e05c      	b.n	100040d0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004016:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000401a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000401e:	681b      	ldr	r3, [r3, #0]
10004020:	3344      	adds	r3, #68	; 0x44
10004022:	4618      	mov	r0, r3
10004024:	f7fe fc14 	bl	10002850 <RCCEx_PLL3_Config>
10004028:	4603      	mov	r3, r0
1000402a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000402e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004032:	2b00      	cmp	r3, #0
10004034:	d003      	beq.n	1000403e <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10004036:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000403a:	f000 bd55 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000403e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004042:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000404a:	f043 0320 	orr.w	r3, r3, #32
1000404e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004052:	e03d      	b.n	100040d0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004054:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000405c:	681b      	ldr	r3, [r3, #0]
1000405e:	3380      	adds	r3, #128	; 0x80
10004060:	4618      	mov	r0, r3
10004062:	f7fe fd5f 	bl	10002b24 <RCCEx_PLL4_Config>
10004066:	4603      	mov	r3, r0
10004068:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000406c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004070:	2b00      	cmp	r3, #0
10004072:	d003      	beq.n	1000407c <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10004074:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004078:	f000 bd36 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000407c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004080:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004084:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004088:	f043 0320 	orr.w	r3, r3, #32
1000408c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004090:	e01e      	b.n	100040d0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004092:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000409a:	681b      	ldr	r3, [r3, #0]
1000409c:	3380      	adds	r3, #128	; 0x80
1000409e:	4618      	mov	r0, r3
100040a0:	f7fe fd40 	bl	10002b24 <RCCEx_PLL4_Config>
100040a4:	4603      	mov	r3, r0
100040a6:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100040aa:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100040ae:	2b00      	cmp	r3, #0
100040b0:	d003      	beq.n	100040ba <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
100040b2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100040b6:	f000 bd17 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100040ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040be:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100040c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100040ca:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100040ce:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
100040d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040d4:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
100040d8:	f023 0103 	bic.w	r1, r3, #3
100040dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100040e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100040e4:	681b      	ldr	r3, [r3, #0]
100040e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
100040ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040ee:	430b      	orrs	r3, r1
100040f0:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
100040f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100040f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100040fc:	681b      	ldr	r3, [r3, #0]
100040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
10004102:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
10004106:	673b      	str	r3, [r7, #112]	; 0x70
10004108:	2300      	movs	r3, #0
1000410a:	677b      	str	r3, [r7, #116]	; 0x74
1000410c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10004110:	460b      	mov	r3, r1
10004112:	4313      	orrs	r3, r2
10004114:	d05b      	beq.n	100041ce <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10004116:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000411a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000411e:	681b      	ldr	r3, [r3, #0]
10004120:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10004124:	2b00      	cmp	r3, #0
10004126:	d002      	beq.n	1000412e <HAL_RCCEx_PeriphCLKConfig+0x135a>
10004128:	2b01      	cmp	r3, #1
1000412a:	d01f      	beq.n	1000416c <HAL_RCCEx_PeriphCLKConfig+0x1398>
1000412c:	e03d      	b.n	100041aa <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000412e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004136:	681b      	ldr	r3, [r3, #0]
10004138:	3380      	adds	r3, #128	; 0x80
1000413a:	4618      	mov	r0, r3
1000413c:	f7fe fcf2 	bl	10002b24 <RCCEx_PLL4_Config>
10004140:	4603      	mov	r3, r0
10004142:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004146:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000414a:	2b00      	cmp	r3, #0
1000414c:	d003      	beq.n	10004156 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
1000414e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004152:	f000 bcc9 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000415a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000415e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004162:	f043 0310 	orr.w	r3, r3, #16
10004166:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000416a:	e01e      	b.n	100041aa <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000416c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004174:	681b      	ldr	r3, [r3, #0]
10004176:	3344      	adds	r3, #68	; 0x44
10004178:	4618      	mov	r0, r3
1000417a:	f7fe fb69 	bl	10002850 <RCCEx_PLL3_Config>
1000417e:	4603      	mov	r3, r0
10004180:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004184:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004188:	2b00      	cmp	r3, #0
1000418a:	d003      	beq.n	10004194 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
1000418c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004190:	f000 bcaa 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004194:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004198:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000419c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041a0:	f043 0320 	orr.w	r3, r3, #32
100041a4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100041a8:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
100041aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041ae:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
100041b2:	f023 0103 	bic.w	r1, r3, #3
100041b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100041ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100041be:	681b      	ldr	r3, [r3, #0]
100041c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
100041c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041c8:	430b      	orrs	r3, r1
100041ca:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
100041ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
100041d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100041d6:	681b      	ldr	r3, [r3, #0]
100041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
100041dc:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
100041e0:	66bb      	str	r3, [r7, #104]	; 0x68
100041e2:	2300      	movs	r3, #0
100041e4:	66fb      	str	r3, [r7, #108]	; 0x6c
100041e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
100041ea:	460b      	mov	r3, r1
100041ec:	4313      	orrs	r3, r2
100041ee:	d011      	beq.n	10004214 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
100041f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041f4:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
100041f8:	f023 0103 	bic.w	r1, r3, #3
100041fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004204:	681b      	ldr	r3, [r3, #0]
10004206:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
1000420a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000420e:	430b      	orrs	r3, r1
10004210:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10004214:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000421c:	681b      	ldr	r3, [r3, #0]
1000421e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004222:	f402 7300 	and.w	r3, r2, #512	; 0x200
10004226:	663b      	str	r3, [r7, #96]	; 0x60
10004228:	2300      	movs	r3, #0
1000422a:	667b      	str	r3, [r7, #100]	; 0x64
1000422c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10004230:	460b      	mov	r3, r1
10004232:	4313      	orrs	r3, r2
10004234:	d038      	beq.n	100042a8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10004236:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000423a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000423e:	681b      	ldr	r3, [r3, #0]
10004240:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10004244:	2b01      	cmp	r3, #1
10004246:	d11d      	bne.n	10004284 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004248:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000424c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004250:	681b      	ldr	r3, [r3, #0]
10004252:	3380      	adds	r3, #128	; 0x80
10004254:	4618      	mov	r0, r3
10004256:	f7fe fc65 	bl	10002b24 <RCCEx_PLL4_Config>
1000425a:	4603      	mov	r3, r0
1000425c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004260:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004264:	2b00      	cmp	r3, #0
10004266:	d003      	beq.n	10004270 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10004268:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000426c:	f000 bc3c 	b.w	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004274:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000427c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004280:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10004284:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004288:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
1000428c:	f023 0103 	bic.w	r1, r3, #3
10004290:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004298:	681b      	ldr	r3, [r3, #0]
1000429a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1000429e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042a2:	430b      	orrs	r3, r1
100042a4:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
100042a8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100042ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100042b0:	681b      	ldr	r3, [r3, #0]
100042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
100042b6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
100042ba:	65bb      	str	r3, [r7, #88]	; 0x58
100042bc:	2300      	movs	r3, #0
100042be:	65fb      	str	r3, [r7, #92]	; 0x5c
100042c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
100042c4:	460b      	mov	r3, r1
100042c6:	4313      	orrs	r3, r2
100042c8:	d037      	beq.n	1000433a <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100042ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100042ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100042d2:	681b      	ldr	r3, [r3, #0]
100042d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
100042d8:	2b00      	cmp	r3, #0
100042da:	d11c      	bne.n	10004316 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100042dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100042e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100042e4:	681b      	ldr	r3, [r3, #0]
100042e6:	3380      	adds	r3, #128	; 0x80
100042e8:	4618      	mov	r0, r3
100042ea:	f7fe fc1b 	bl	10002b24 <RCCEx_PLL4_Config>
100042ee:	4603      	mov	r3, r0
100042f0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100042f4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100042f8:	2b00      	cmp	r3, #0
100042fa:	d002      	beq.n	10004302 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
100042fc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004300:	e3f2      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004302:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004306:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000430a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000430e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004312:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10004316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000431a:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
1000431e:	f023 0110 	bic.w	r1, r3, #16
10004322:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000432a:	681b      	ldr	r3, [r3, #0]
1000432c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10004330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004334:	430b      	orrs	r3, r1
10004336:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
1000433a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000433e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004342:	681b      	ldr	r3, [r3, #0]
10004344:	e9d3 2300 	ldrd	r2, r3, [r3]
10004348:	2100      	movs	r1, #0
1000434a:	6539      	str	r1, [r7, #80]	; 0x50
1000434c:	f003 0304 	and.w	r3, r3, #4
10004350:	657b      	str	r3, [r7, #84]	; 0x54
10004352:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
10004356:	460b      	mov	r3, r1
10004358:	4313      	orrs	r3, r2
1000435a:	d037      	beq.n	100043cc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
1000435c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004364:	681b      	ldr	r3, [r3, #0]
10004366:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1000436a:	2b01      	cmp	r3, #1
1000436c:	d11c      	bne.n	100043a8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000436e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004376:	681b      	ldr	r3, [r3, #0]
10004378:	3380      	adds	r3, #128	; 0x80
1000437a:	4618      	mov	r0, r3
1000437c:	f7fe fbd2 	bl	10002b24 <RCCEx_PLL4_Config>
10004380:	4603      	mov	r3, r0
10004382:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004386:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000438a:	2b00      	cmp	r3, #0
1000438c:	d002      	beq.n	10004394 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
1000438e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004392:	e3a9      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004398:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000439c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100043a4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
100043a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100043b0:	f023 0103 	bic.w	r1, r3, #3
100043b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100043b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100043bc:	681b      	ldr	r3, [r3, #0]
100043be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
100043c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043c6:	430b      	orrs	r3, r1
100043c8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
100043cc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100043d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100043d4:	681b      	ldr	r3, [r3, #0]
100043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
100043da:	2100      	movs	r1, #0
100043dc:	64b9      	str	r1, [r7, #72]	; 0x48
100043de:	f003 0308 	and.w	r3, r3, #8
100043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
100043e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
100043e8:	460b      	mov	r3, r1
100043ea:	4313      	orrs	r3, r2
100043ec:	d037      	beq.n	1000445e <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
100043ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100043f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100043f6:	681b      	ldr	r3, [r3, #0]
100043f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
100043fc:	2b01      	cmp	r3, #1
100043fe:	d11c      	bne.n	1000443a <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004400:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004408:	681b      	ldr	r3, [r3, #0]
1000440a:	3380      	adds	r3, #128	; 0x80
1000440c:	4618      	mov	r0, r3
1000440e:	f7fe fb89 	bl	10002b24 <RCCEx_PLL4_Config>
10004412:	4603      	mov	r3, r0
10004414:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004418:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000441c:	2b00      	cmp	r3, #0
1000441e:	d002      	beq.n	10004426 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10004420:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004424:	e360      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000442a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000442e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004436:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000443a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000443e:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10004442:	f023 0103 	bic.w	r1, r3, #3
10004446:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000444a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000444e:	681b      	ldr	r3, [r3, #0]
10004450:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10004454:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004458:	430b      	orrs	r3, r1
1000445a:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
1000445e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004466:	681b      	ldr	r3, [r3, #0]
10004468:	e9d3 2300 	ldrd	r2, r3, [r3]
1000446c:	2100      	movs	r1, #0
1000446e:	6439      	str	r1, [r7, #64]	; 0x40
10004470:	f003 0310 	and.w	r3, r3, #16
10004474:	647b      	str	r3, [r7, #68]	; 0x44
10004476:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
1000447a:	460b      	mov	r3, r1
1000447c:	4313      	orrs	r3, r2
1000447e:	d011      	beq.n	100044a4 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10004480:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004484:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10004488:	f023 0103 	bic.w	r1, r3, #3
1000448c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004494:	681b      	ldr	r3, [r3, #0]
10004496:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
1000449a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000449e:	430b      	orrs	r3, r1
100044a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100044a4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100044a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100044ac:	681b      	ldr	r3, [r3, #0]
100044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
100044b2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
100044b6:	63bb      	str	r3, [r7, #56]	; 0x38
100044b8:	2300      	movs	r3, #0
100044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
100044bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
100044c0:	460b      	mov	r3, r1
100044c2:	4313      	orrs	r3, r2
100044c4:	d037      	beq.n	10004536 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
100044c6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100044ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100044ce:	681b      	ldr	r3, [r3, #0]
100044d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
100044d4:	2b01      	cmp	r3, #1
100044d6:	d11c      	bne.n	10004512 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100044dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100044e0:	681b      	ldr	r3, [r3, #0]
100044e2:	3380      	adds	r3, #128	; 0x80
100044e4:	4618      	mov	r0, r3
100044e6:	f7fe fb1d 	bl	10002b24 <RCCEx_PLL4_Config>
100044ea:	4603      	mov	r3, r0
100044ec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100044f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100044f4:	2b00      	cmp	r3, #0
100044f6:	d002      	beq.n	100044fe <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
100044f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100044fc:	e2f4      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100044fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004502:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004506:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000450a:	f043 0310 	orr.w	r3, r3, #16
1000450e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10004512:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004516:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
1000451a:	f023 0101 	bic.w	r1, r3, #1
1000451e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004526:	681b      	ldr	r3, [r3, #0]
10004528:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
1000452c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004530:	430b      	orrs	r3, r1
10004532:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10004536:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000453a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000453e:	681b      	ldr	r3, [r3, #0]
10004540:	e9d3 2300 	ldrd	r2, r3, [r3]
10004544:	f002 0308 	and.w	r3, r2, #8
10004548:	633b      	str	r3, [r7, #48]	; 0x30
1000454a:	2300      	movs	r3, #0
1000454c:	637b      	str	r3, [r7, #52]	; 0x34
1000454e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
10004552:	460b      	mov	r3, r1
10004554:	4313      	orrs	r3, r2
10004556:	d059      	beq.n	1000460c <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10004558:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000455c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004560:	681b      	ldr	r3, [r3, #0]
10004562:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004566:	2b00      	cmp	r3, #0
10004568:	d002      	beq.n	10004570 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000456a:	2b02      	cmp	r3, #2
1000456c:	d01e      	beq.n	100045ac <HAL_RCCEx_PeriphCLKConfig+0x17d8>
1000456e:	e03b      	b.n	100045e8 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004570:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004578:	681b      	ldr	r3, [r3, #0]
1000457a:	3380      	adds	r3, #128	; 0x80
1000457c:	4618      	mov	r0, r3
1000457e:	f7fe fad1 	bl	10002b24 <RCCEx_PLL4_Config>
10004582:	4603      	mov	r3, r0
10004584:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004588:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000458c:	2b00      	cmp	r3, #0
1000458e:	d002      	beq.n	10004596 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10004590:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004594:	e2a8      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000459a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000459e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100045a6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100045aa:	e01d      	b.n	100045e8 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100045ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
100045b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100045b4:	681b      	ldr	r3, [r3, #0]
100045b6:	3344      	adds	r3, #68	; 0x44
100045b8:	4618      	mov	r0, r3
100045ba:	f7fe f949 	bl	10002850 <RCCEx_PLL3_Config>
100045be:	4603      	mov	r3, r0
100045c0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100045c4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100045c8:	2b00      	cmp	r3, #0
100045ca:	d002      	beq.n	100045d2 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
100045cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100045d0:	e28a      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100045d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045d6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100045da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045de:	f043 0320 	orr.w	r3, r3, #32
100045e2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100045e6:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100045e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ec:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
100045f0:	f023 0103 	bic.w	r1, r3, #3
100045f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100045f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100045fc:	681b      	ldr	r3, [r3, #0]
100045fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004602:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004606:	430b      	orrs	r3, r1
10004608:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
1000460c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004614:	681b      	ldr	r3, [r3, #0]
10004616:	e9d3 2300 	ldrd	r2, r3, [r3]
1000461a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
1000461e:	62bb      	str	r3, [r7, #40]	; 0x28
10004620:	2300      	movs	r3, #0
10004622:	62fb      	str	r3, [r7, #44]	; 0x2c
10004624:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
10004628:	460b      	mov	r3, r1
1000462a:	4313      	orrs	r3, r2
1000462c:	d058      	beq.n	100046e0 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
1000462e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004636:	681b      	ldr	r3, [r3, #0]
10004638:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000463c:	2b01      	cmp	r3, #1
1000463e:	d01f      	beq.n	10004680 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10004640:	2b02      	cmp	r3, #2
10004642:	d13b      	bne.n	100046bc <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004644:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000464c:	681b      	ldr	r3, [r3, #0]
1000464e:	3344      	adds	r3, #68	; 0x44
10004650:	4618      	mov	r0, r3
10004652:	f7fe f8fd 	bl	10002850 <RCCEx_PLL3_Config>
10004656:	4603      	mov	r3, r0
10004658:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000465c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004660:	2b00      	cmp	r3, #0
10004662:	d002      	beq.n	1000466a <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10004664:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004668:	e23e      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000466a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000466e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004672:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004676:	f043 0320 	orr.w	r3, r3, #32
1000467a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000467e:	e01d      	b.n	100046bc <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004680:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004688:	681b      	ldr	r3, [r3, #0]
1000468a:	3380      	adds	r3, #128	; 0x80
1000468c:	4618      	mov	r0, r3
1000468e:	f7fe fa49 	bl	10002b24 <RCCEx_PLL4_Config>
10004692:	4603      	mov	r3, r0
10004694:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004698:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000469c:	2b00      	cmp	r3, #0
1000469e:	d002      	beq.n	100046a6 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100046a0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100046a4:	e220      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100046a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046aa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100046ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100046b2:	f043 0310 	orr.w	r3, r3, #16
100046b6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100046ba:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100046bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046c0:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
100046c4:	f023 0207 	bic.w	r2, r3, #7
100046c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100046cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100046d0:	681b      	ldr	r3, [r3, #0]
100046d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100046d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100046da:	4313      	orrs	r3, r2
100046dc:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100046e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100046e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100046e8:	681b      	ldr	r3, [r3, #0]
100046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
100046ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
100046f2:	623b      	str	r3, [r7, #32]
100046f4:	2300      	movs	r3, #0
100046f6:	627b      	str	r3, [r7, #36]	; 0x24
100046f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
100046fc:	460b      	mov	r3, r1
100046fe:	4313      	orrs	r3, r2
10004700:	d037      	beq.n	10004772 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10004702:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000470a:	681b      	ldr	r3, [r3, #0]
1000470c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10004710:	2b01      	cmp	r3, #1
10004712:	d11c      	bne.n	1000474e <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004714:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000471c:	681b      	ldr	r3, [r3, #0]
1000471e:	3380      	adds	r3, #128	; 0x80
10004720:	4618      	mov	r0, r3
10004722:	f7fe f9ff 	bl	10002b24 <RCCEx_PLL4_Config>
10004726:	4603      	mov	r3, r0
10004728:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000472c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004730:	2b00      	cmp	r3, #0
10004732:	d002      	beq.n	1000473a <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10004734:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004738:	e1d6      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000473a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000473e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004746:	f043 0320 	orr.w	r3, r3, #32
1000474a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000474e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004752:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10004756:	f023 0207 	bic.w	r2, r3, #7
1000475a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000475e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004762:	681b      	ldr	r3, [r3, #0]
10004764:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10004768:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000476c:	4313      	orrs	r3, r2
1000476e:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10004772:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000477a:	681b      	ldr	r3, [r3, #0]
1000477c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004780:	f002 0340 	and.w	r3, r2, #64	; 0x40
10004784:	61bb      	str	r3, [r7, #24]
10004786:	2300      	movs	r3, #0
10004788:	61fb      	str	r3, [r7, #28]
1000478a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
1000478e:	460b      	mov	r3, r1
10004790:	4313      	orrs	r3, r2
10004792:	d058      	beq.n	10004846 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10004794:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000479c:	681b      	ldr	r3, [r3, #0]
1000479e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100047a2:	2b01      	cmp	r3, #1
100047a4:	d01f      	beq.n	100047e6 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100047a6:	2b02      	cmp	r3, #2
100047a8:	d13b      	bne.n	10004822 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100047aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
100047ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100047b2:	681b      	ldr	r3, [r3, #0]
100047b4:	3344      	adds	r3, #68	; 0x44
100047b6:	4618      	mov	r0, r3
100047b8:	f7fe f84a 	bl	10002850 <RCCEx_PLL3_Config>
100047bc:	4603      	mov	r3, r0
100047be:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100047c2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100047c6:	2b00      	cmp	r3, #0
100047c8:	d002      	beq.n	100047d0 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100047ca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100047ce:	e18b      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100047d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047d4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100047d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100047dc:	f043 0320 	orr.w	r3, r3, #32
100047e0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100047e4:	e01d      	b.n	10004822 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100047e6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100047ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100047ee:	681b      	ldr	r3, [r3, #0]
100047f0:	3380      	adds	r3, #128	; 0x80
100047f2:	4618      	mov	r0, r3
100047f4:	f7fe f996 	bl	10002b24 <RCCEx_PLL4_Config>
100047f8:	4603      	mov	r3, r0
100047fa:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100047fe:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004802:	2b00      	cmp	r3, #0
10004804:	d002      	beq.n	1000480c <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10004806:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000480a:	e16d      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000480c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004810:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004818:	f043 0310 	orr.w	r3, r3, #16
1000481c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004820:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10004822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004826:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000482a:	f023 0207 	bic.w	r2, r3, #7
1000482e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004836:	681b      	ldr	r3, [r3, #0]
10004838:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
1000483c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004840:	4313      	orrs	r3, r2
10004842:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10004846:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000484a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000484e:	681b      	ldr	r3, [r3, #0]
10004850:	e9d3 2300 	ldrd	r2, r3, [r3]
10004854:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
10004858:	613b      	str	r3, [r7, #16]
1000485a:	2300      	movs	r3, #0
1000485c:	617b      	str	r3, [r7, #20]
1000485e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10004862:	460b      	mov	r3, r1
10004864:	4313      	orrs	r3, r2
10004866:	f000 80c6 	beq.w	100049f6 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000486a:	4ba2      	ldr	r3, [pc, #648]	; (10004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000486c:	681b      	ldr	r3, [r3, #0]
1000486e:	4aa1      	ldr	r2, [pc, #644]	; (10004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10004874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10004876:	f7fb ff29 	bl	100006cc <HAL_GetTick>
1000487a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000487e:	e00a      	b.n	10004896 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10004880:	f7fb ff24 	bl	100006cc <HAL_GetTick>
10004884:	4602      	mov	r2, r0
10004886:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
1000488a:	1ad3      	subs	r3, r2, r3
1000488c:	2b64      	cmp	r3, #100	; 0x64
1000488e:	d902      	bls.n	10004896 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10004890:	2303      	movs	r3, #3
10004892:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004896:	4b97      	ldr	r3, [pc, #604]	; (10004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004898:	681b      	ldr	r3, [r3, #0]
1000489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000489e:	2b00      	cmp	r3, #0
100048a0:	d0ee      	beq.n	10004880 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100048a2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100048a6:	2b00      	cmp	r3, #0
100048a8:	f040 80a2 	bne.w	100049f0 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100048ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100048b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100048b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100048bc:	681b      	ldr	r3, [r3, #0]
100048be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100048c2:	4053      	eors	r3, r2
100048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100048c8:	2b00      	cmp	r3, #0
100048ca:	f000 8086 	beq.w	100049da <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100048ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
100048da:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100048de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100048ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100048f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100048fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10004902:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10004906:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000490a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000490e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
10004912:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10004916:	f003 0330 	and.w	r3, r3, #48	; 0x30
1000491a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000491e:	4313      	orrs	r3, r2
10004920:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10004924:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004928:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000492c:	2204      	movs	r2, #4
1000492e:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10004930:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
10004934:	f003 020b 	and.w	r2, r3, #11
10004938:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000493c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10004940:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10004942:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004946:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
1000494a:	2200      	movs	r2, #0
1000494c:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000494e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004952:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10004956:	2200      	movs	r2, #0
10004958:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000495a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000495e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10004962:	2200      	movs	r2, #0
10004964:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10004968:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000496c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10004970:	2200      	movs	r2, #0
10004972:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10004976:	f507 7390 	add.w	r3, r7, #288	; 0x120
1000497a:	4618      	mov	r0, r3
1000497c:	f7fc f96e 	bl	10000c5c <HAL_RCC_OscConfig>
10004980:	4603      	mov	r3, r0
10004982:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
10004986:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
1000498a:	2b00      	cmp	r3, #0
1000498c:	d002      	beq.n	10004994 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
1000498e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
10004992:	e0a9      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10004994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004998:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000499c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100049a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100049a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100049a8:	681b      	ldr	r3, [r3, #0]
100049aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100049ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100049b2:	4313      	orrs	r3, r2
100049b4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
100049b8:	4b4f      	ldr	r3, [pc, #316]	; (10004af8 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
100049ba:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100049be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049c2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100049c6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
100049ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
100049ce:	400b      	ands	r3, r1
100049d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100049d4:	4313      	orrs	r3, r2
100049d6:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100049da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100049e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100049ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100049ee:	e002      	b.n	100049f6 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100049f0:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100049f4:	e078      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100049f6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100049fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100049fe:	681b      	ldr	r3, [r3, #0]
10004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a04:	f402 6380 	and.w	r3, r2, #1024	; 0x400
10004a08:	60bb      	str	r3, [r7, #8]
10004a0a:	2300      	movs	r3, #0
10004a0c:	60fb      	str	r3, [r7, #12]
10004a0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10004a12:	460b      	mov	r3, r1
10004a14:	4313      	orrs	r3, r2
10004a16:	d02a      	beq.n	10004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10004a18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a1c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10004a20:	f023 0201 	bic.w	r2, r3, #1
10004a24:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004a2c:	681b      	ldr	r3, [r3, #0]
10004a2e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
10004a32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004a36:	4313      	orrs	r3, r2
10004a38:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004a3c:	f7fb fe46 	bl	100006cc <HAL_GetTick>
10004a40:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004a44:	e00a      	b.n	10004a5c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004a46:	f7fb fe41 	bl	100006cc <HAL_GetTick>
10004a4a:	4602      	mov	r2, r0
10004a4c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10004a50:	1ad3      	subs	r3, r2, r3
10004a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004a56:	d901      	bls.n	10004a5c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10004a58:	2303      	movs	r3, #3
10004a5a:	e045      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a60:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10004a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004a6c:	d1eb      	bne.n	10004a46 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10004a6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004a76:	681b      	ldr	r3, [r3, #0]
10004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a7c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
10004a80:	603b      	str	r3, [r7, #0]
10004a82:	2300      	movs	r3, #0
10004a84:	607b      	str	r3, [r7, #4]
10004a86:	e9d7 1200 	ldrd	r1, r2, [r7]
10004a8a:	460b      	mov	r3, r1
10004a8c:	4313      	orrs	r3, r2
10004a8e:	d02a      	beq.n	10004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10004a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a94:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10004a98:	f023 0201 	bic.w	r2, r3, #1
10004a9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004aa4:	681b      	ldr	r3, [r3, #0]
10004aa6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
10004aaa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004aae:	4313      	orrs	r3, r2
10004ab0:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004ab4:	f7fb fe0a 	bl	100006cc <HAL_GetTick>
10004ab8:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004abc:	e00a      	b.n	10004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004abe:	f7fb fe05 	bl	100006cc <HAL_GetTick>
10004ac2:	4602      	mov	r2, r0
10004ac4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10004ac8:	1ad3      	subs	r3, r2, r3
10004aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004ace:	d901      	bls.n	10004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10004ad0:	2303      	movs	r3, #3
10004ad2:	e009      	b.n	10004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ad8:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10004adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10004ae4:	d1eb      	bne.n	10004abe <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10004ae6:	2300      	movs	r3, #0
}
10004ae8:	4618      	mov	r0, r3
10004aea:	f507 7712 	add.w	r7, r7, #584	; 0x248
10004aee:	46bd      	mov	sp, r7
10004af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10004af4:	50001000 	.word	0x50001000
10004af8:	7fecfdc0 	.word	0x7fecfdc0

10004afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10004afc:	b580      	push	{r7, lr}
10004afe:	b082      	sub	sp, #8
10004b00:	af00      	add	r7, sp, #0
10004b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10004b04:	687b      	ldr	r3, [r7, #4]
10004b06:	2b00      	cmp	r3, #0
10004b08:	d101      	bne.n	10004b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10004b0a:	2301      	movs	r3, #1
10004b0c:	e042      	b.n	10004b94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10004b0e:	687b      	ldr	r3, [r7, #4]
10004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10004b14:	2b00      	cmp	r3, #0
10004b16:	d106      	bne.n	10004b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10004b18:	687b      	ldr	r3, [r7, #4]
10004b1a:	2200      	movs	r2, #0
10004b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10004b20:	6878      	ldr	r0, [r7, #4]
10004b22:	f7fb fce9 	bl	100004f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10004b26:	687b      	ldr	r3, [r7, #4]
10004b28:	2224      	movs	r2, #36	; 0x24
10004b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
10004b2e:	687b      	ldr	r3, [r7, #4]
10004b30:	681b      	ldr	r3, [r3, #0]
10004b32:	681a      	ldr	r2, [r3, #0]
10004b34:	687b      	ldr	r3, [r7, #4]
10004b36:	681b      	ldr	r3, [r3, #0]
10004b38:	f022 0201 	bic.w	r2, r2, #1
10004b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10004b3e:	6878      	ldr	r0, [r7, #4]
10004b40:	f000 f8c4 	bl	10004ccc <UART_SetConfig>
10004b44:	4603      	mov	r3, r0
10004b46:	2b01      	cmp	r3, #1
10004b48:	d101      	bne.n	10004b4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10004b4a:	2301      	movs	r3, #1
10004b4c:	e022      	b.n	10004b94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10004b4e:	687b      	ldr	r3, [r7, #4]
10004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004b52:	2b00      	cmp	r3, #0
10004b54:	d002      	beq.n	10004b5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10004b56:	6878      	ldr	r0, [r7, #4]
10004b58:	f001 f95e 	bl	10005e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10004b5c:	687b      	ldr	r3, [r7, #4]
10004b5e:	681b      	ldr	r3, [r3, #0]
10004b60:	685a      	ldr	r2, [r3, #4]
10004b62:	687b      	ldr	r3, [r7, #4]
10004b64:	681b      	ldr	r3, [r3, #0]
10004b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10004b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10004b6c:	687b      	ldr	r3, [r7, #4]
10004b6e:	681b      	ldr	r3, [r3, #0]
10004b70:	689a      	ldr	r2, [r3, #8]
10004b72:	687b      	ldr	r3, [r7, #4]
10004b74:	681b      	ldr	r3, [r3, #0]
10004b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10004b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10004b7c:	687b      	ldr	r3, [r7, #4]
10004b7e:	681b      	ldr	r3, [r3, #0]
10004b80:	681a      	ldr	r2, [r3, #0]
10004b82:	687b      	ldr	r3, [r7, #4]
10004b84:	681b      	ldr	r3, [r3, #0]
10004b86:	f042 0201 	orr.w	r2, r2, #1
10004b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10004b8c:	6878      	ldr	r0, [r7, #4]
10004b8e:	f001 f9e5 	bl	10005f5c <UART_CheckIdleState>
10004b92:	4603      	mov	r3, r0
}
10004b94:	4618      	mov	r0, r3
10004b96:	3708      	adds	r7, #8
10004b98:	46bd      	mov	sp, r7
10004b9a:	bd80      	pop	{r7, pc}

10004b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10004b9c:	b580      	push	{r7, lr}
10004b9e:	b08a      	sub	sp, #40	; 0x28
10004ba0:	af02      	add	r7, sp, #8
10004ba2:	60f8      	str	r0, [r7, #12]
10004ba4:	60b9      	str	r1, [r7, #8]
10004ba6:	603b      	str	r3, [r7, #0]
10004ba8:	4613      	mov	r3, r2
10004baa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10004bac:	68fb      	ldr	r3, [r7, #12]
10004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10004bb2:	2b20      	cmp	r3, #32
10004bb4:	f040 8084 	bne.w	10004cc0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10004bb8:	68bb      	ldr	r3, [r7, #8]
10004bba:	2b00      	cmp	r3, #0
10004bbc:	d002      	beq.n	10004bc4 <HAL_UART_Transmit+0x28>
10004bbe:	88fb      	ldrh	r3, [r7, #6]
10004bc0:	2b00      	cmp	r3, #0
10004bc2:	d101      	bne.n	10004bc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10004bc4:	2301      	movs	r3, #1
10004bc6:	e07c      	b.n	10004cc2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10004bc8:	68fb      	ldr	r3, [r7, #12]
10004bca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10004bce:	2b01      	cmp	r3, #1
10004bd0:	d101      	bne.n	10004bd6 <HAL_UART_Transmit+0x3a>
10004bd2:	2302      	movs	r3, #2
10004bd4:	e075      	b.n	10004cc2 <HAL_UART_Transmit+0x126>
10004bd6:	68fb      	ldr	r3, [r7, #12]
10004bd8:	2201      	movs	r2, #1
10004bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10004bde:	68fb      	ldr	r3, [r7, #12]
10004be0:	2200      	movs	r2, #0
10004be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10004be6:	68fb      	ldr	r3, [r7, #12]
10004be8:	2221      	movs	r2, #33	; 0x21
10004bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10004bee:	f7fb fd6d 	bl	100006cc <HAL_GetTick>
10004bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10004bf4:	68fb      	ldr	r3, [r7, #12]
10004bf6:	88fa      	ldrh	r2, [r7, #6]
10004bf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10004bfc:	68fb      	ldr	r3, [r7, #12]
10004bfe:	88fa      	ldrh	r2, [r7, #6]
10004c00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10004c04:	68fb      	ldr	r3, [r7, #12]
10004c06:	689b      	ldr	r3, [r3, #8]
10004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10004c0c:	d108      	bne.n	10004c20 <HAL_UART_Transmit+0x84>
10004c0e:	68fb      	ldr	r3, [r7, #12]
10004c10:	691b      	ldr	r3, [r3, #16]
10004c12:	2b00      	cmp	r3, #0
10004c14:	d104      	bne.n	10004c20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10004c16:	2300      	movs	r3, #0
10004c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
10004c1a:	68bb      	ldr	r3, [r7, #8]
10004c1c:	61bb      	str	r3, [r7, #24]
10004c1e:	e003      	b.n	10004c28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10004c20:	68bb      	ldr	r3, [r7, #8]
10004c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10004c24:	2300      	movs	r3, #0
10004c26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10004c28:	68fb      	ldr	r3, [r7, #12]
10004c2a:	2200      	movs	r2, #0
10004c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10004c30:	e02d      	b.n	10004c8e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10004c32:	683b      	ldr	r3, [r7, #0]
10004c34:	9300      	str	r3, [sp, #0]
10004c36:	697b      	ldr	r3, [r7, #20]
10004c38:	2200      	movs	r2, #0
10004c3a:	2180      	movs	r1, #128	; 0x80
10004c3c:	68f8      	ldr	r0, [r7, #12]
10004c3e:	f001 f9d5 	bl	10005fec <UART_WaitOnFlagUntilTimeout>
10004c42:	4603      	mov	r3, r0
10004c44:	2b00      	cmp	r3, #0
10004c46:	d001      	beq.n	10004c4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10004c48:	2303      	movs	r3, #3
10004c4a:	e03a      	b.n	10004cc2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10004c4c:	69fb      	ldr	r3, [r7, #28]
10004c4e:	2b00      	cmp	r3, #0
10004c50:	d10b      	bne.n	10004c6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10004c52:	69bb      	ldr	r3, [r7, #24]
10004c54:	881a      	ldrh	r2, [r3, #0]
10004c56:	68fb      	ldr	r3, [r7, #12]
10004c58:	681b      	ldr	r3, [r3, #0]
10004c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
10004c5e:	b292      	uxth	r2, r2
10004c60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10004c62:	69bb      	ldr	r3, [r7, #24]
10004c64:	3302      	adds	r3, #2
10004c66:	61bb      	str	r3, [r7, #24]
10004c68:	e008      	b.n	10004c7c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10004c6a:	69fb      	ldr	r3, [r7, #28]
10004c6c:	781a      	ldrb	r2, [r3, #0]
10004c6e:	68fb      	ldr	r3, [r7, #12]
10004c70:	681b      	ldr	r3, [r3, #0]
10004c72:	b292      	uxth	r2, r2
10004c74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10004c76:	69fb      	ldr	r3, [r7, #28]
10004c78:	3301      	adds	r3, #1
10004c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10004c7c:	68fb      	ldr	r3, [r7, #12]
10004c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10004c82:	b29b      	uxth	r3, r3
10004c84:	3b01      	subs	r3, #1
10004c86:	b29a      	uxth	r2, r3
10004c88:	68fb      	ldr	r3, [r7, #12]
10004c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
10004c8e:	68fb      	ldr	r3, [r7, #12]
10004c90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10004c94:	b29b      	uxth	r3, r3
10004c96:	2b00      	cmp	r3, #0
10004c98:	d1cb      	bne.n	10004c32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10004c9a:	683b      	ldr	r3, [r7, #0]
10004c9c:	9300      	str	r3, [sp, #0]
10004c9e:	697b      	ldr	r3, [r7, #20]
10004ca0:	2200      	movs	r2, #0
10004ca2:	2140      	movs	r1, #64	; 0x40
10004ca4:	68f8      	ldr	r0, [r7, #12]
10004ca6:	f001 f9a1 	bl	10005fec <UART_WaitOnFlagUntilTimeout>
10004caa:	4603      	mov	r3, r0
10004cac:	2b00      	cmp	r3, #0
10004cae:	d001      	beq.n	10004cb4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10004cb0:	2303      	movs	r3, #3
10004cb2:	e006      	b.n	10004cc2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10004cb4:	68fb      	ldr	r3, [r7, #12]
10004cb6:	2220      	movs	r2, #32
10004cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
10004cbc:	2300      	movs	r3, #0
10004cbe:	e000      	b.n	10004cc2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10004cc0:	2302      	movs	r3, #2
  }
}
10004cc2:	4618      	mov	r0, r3
10004cc4:	3720      	adds	r7, #32
10004cc6:	46bd      	mov	sp, r7
10004cc8:	bd80      	pop	{r7, pc}
	...

10004ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10004ccc:	b580      	push	{r7, lr}
10004cce:	b08e      	sub	sp, #56	; 0x38
10004cd0:	af00      	add	r7, sp, #0
10004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10004cd4:	2300      	movs	r3, #0
10004cd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10004cd8:	2300      	movs	r3, #0
10004cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10004cde:	687b      	ldr	r3, [r7, #4]
10004ce0:	689a      	ldr	r2, [r3, #8]
10004ce2:	687b      	ldr	r3, [r7, #4]
10004ce4:	691b      	ldr	r3, [r3, #16]
10004ce6:	431a      	orrs	r2, r3
10004ce8:	687b      	ldr	r3, [r7, #4]
10004cea:	695b      	ldr	r3, [r3, #20]
10004cec:	431a      	orrs	r2, r3
10004cee:	687b      	ldr	r3, [r7, #4]
10004cf0:	69db      	ldr	r3, [r3, #28]
10004cf2:	4313      	orrs	r3, r2
10004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
10004cf6:	687b      	ldr	r3, [r7, #4]
10004cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10004cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004cfc:	4313      	orrs	r3, r2
10004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10004d00:	687b      	ldr	r3, [r7, #4]
10004d02:	681b      	ldr	r3, [r3, #0]
10004d04:	681a      	ldr	r2, [r3, #0]
10004d06:	4bb1      	ldr	r3, [pc, #708]	; (10004fcc <UART_SetConfig+0x300>)
10004d08:	4013      	ands	r3, r2
10004d0a:	687a      	ldr	r2, [r7, #4]
10004d0c:	6812      	ldr	r2, [r2, #0]
10004d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10004d10:	430b      	orrs	r3, r1
10004d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10004d14:	687b      	ldr	r3, [r7, #4]
10004d16:	681b      	ldr	r3, [r3, #0]
10004d18:	685b      	ldr	r3, [r3, #4]
10004d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10004d1e:	687b      	ldr	r3, [r7, #4]
10004d20:	68da      	ldr	r2, [r3, #12]
10004d22:	687b      	ldr	r3, [r7, #4]
10004d24:	681b      	ldr	r3, [r3, #0]
10004d26:	430a      	orrs	r2, r1
10004d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10004d2a:	687b      	ldr	r3, [r7, #4]
10004d2c:	699b      	ldr	r3, [r3, #24]
10004d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10004d30:	687b      	ldr	r3, [r7, #4]
10004d32:	6a1b      	ldr	r3, [r3, #32]
10004d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004d36:	4313      	orrs	r3, r2
10004d38:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10004d3a:	687b      	ldr	r3, [r7, #4]
10004d3c:	681b      	ldr	r3, [r3, #0]
10004d3e:	689b      	ldr	r3, [r3, #8]
10004d40:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10004d44:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
10004d48:	687a      	ldr	r2, [r7, #4]
10004d4a:	6812      	ldr	r2, [r2, #0]
10004d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10004d4e:	430b      	orrs	r3, r1
10004d50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10004d52:	687b      	ldr	r3, [r7, #4]
10004d54:	681b      	ldr	r3, [r3, #0]
10004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10004d58:	f023 010f 	bic.w	r1, r3, #15
10004d5c:	687b      	ldr	r3, [r7, #4]
10004d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10004d60:	687b      	ldr	r3, [r7, #4]
10004d62:	681b      	ldr	r3, [r3, #0]
10004d64:	430a      	orrs	r2, r1
10004d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10004d68:	687b      	ldr	r3, [r7, #4]
10004d6a:	681b      	ldr	r3, [r3, #0]
10004d6c:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10004d70:	d132      	bne.n	10004dd8 <UART_SetConfig+0x10c>
10004d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10004d7a:	f003 0307 	and.w	r3, r3, #7
10004d7e:	2b05      	cmp	r3, #5
10004d80:	d826      	bhi.n	10004dd0 <UART_SetConfig+0x104>
10004d82:	a201      	add	r2, pc, #4	; (adr r2, 10004d88 <UART_SetConfig+0xbc>)
10004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004d88:	10004da1 	.word	0x10004da1
10004d8c:	10004da9 	.word	0x10004da9
10004d90:	10004db1 	.word	0x10004db1
10004d94:	10004db9 	.word	0x10004db9
10004d98:	10004dc1 	.word	0x10004dc1
10004d9c:	10004dc9 	.word	0x10004dc9
10004da0:	2302      	movs	r3, #2
10004da2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004da6:	e184      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004da8:	2304      	movs	r3, #4
10004daa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004dae:	e180      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004db0:	2310      	movs	r3, #16
10004db2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004db6:	e17c      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004db8:	2320      	movs	r3, #32
10004dba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004dbe:	e178      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004dc0:	2308      	movs	r3, #8
10004dc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004dc6:	e174      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004dc8:	2340      	movs	r3, #64	; 0x40
10004dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004dce:	e170      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004dd0:	2380      	movs	r3, #128	; 0x80
10004dd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004dd6:	e16c      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004dd8:	687b      	ldr	r3, [r7, #4]
10004dda:	681b      	ldr	r3, [r3, #0]
10004ddc:	4a7c      	ldr	r2, [pc, #496]	; (10004fd0 <UART_SetConfig+0x304>)
10004dde:	4293      	cmp	r3, r2
10004de0:	d12c      	bne.n	10004e3c <UART_SetConfig+0x170>
10004de2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004de6:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10004dea:	f003 0307 	and.w	r3, r3, #7
10004dee:	2b04      	cmp	r3, #4
10004df0:	d820      	bhi.n	10004e34 <UART_SetConfig+0x168>
10004df2:	a201      	add	r2, pc, #4	; (adr r2, 10004df8 <UART_SetConfig+0x12c>)
10004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004df8:	10004e0d 	.word	0x10004e0d
10004dfc:	10004e15 	.word	0x10004e15
10004e00:	10004e1d 	.word	0x10004e1d
10004e04:	10004e25 	.word	0x10004e25
10004e08:	10004e2d 	.word	0x10004e2d
10004e0c:	2300      	movs	r3, #0
10004e0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e12:	e14e      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e14:	2308      	movs	r3, #8
10004e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e1a:	e14a      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e1c:	2310      	movs	r3, #16
10004e1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e22:	e146      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e24:	2320      	movs	r3, #32
10004e26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e2a:	e142      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e2c:	2340      	movs	r3, #64	; 0x40
10004e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e32:	e13e      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e34:	2380      	movs	r3, #128	; 0x80
10004e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e3a:	e13a      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e3c:	687b      	ldr	r3, [r7, #4]
10004e3e:	681b      	ldr	r3, [r3, #0]
10004e40:	4a64      	ldr	r2, [pc, #400]	; (10004fd4 <UART_SetConfig+0x308>)
10004e42:	4293      	cmp	r3, r2
10004e44:	d12c      	bne.n	10004ea0 <UART_SetConfig+0x1d4>
10004e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e4a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10004e4e:	f003 0307 	and.w	r3, r3, #7
10004e52:	2b04      	cmp	r3, #4
10004e54:	d820      	bhi.n	10004e98 <UART_SetConfig+0x1cc>
10004e56:	a201      	add	r2, pc, #4	; (adr r2, 10004e5c <UART_SetConfig+0x190>)
10004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004e5c:	10004e71 	.word	0x10004e71
10004e60:	10004e79 	.word	0x10004e79
10004e64:	10004e81 	.word	0x10004e81
10004e68:	10004e89 	.word	0x10004e89
10004e6c:	10004e91 	.word	0x10004e91
10004e70:	2300      	movs	r3, #0
10004e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e76:	e11c      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e78:	2308      	movs	r3, #8
10004e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e7e:	e118      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e80:	2310      	movs	r3, #16
10004e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e86:	e114      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e88:	2320      	movs	r3, #32
10004e8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e8e:	e110      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e90:	2340      	movs	r3, #64	; 0x40
10004e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e96:	e10c      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004e98:	2380      	movs	r3, #128	; 0x80
10004e9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004e9e:	e108      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004ea0:	687b      	ldr	r3, [r7, #4]
10004ea2:	681b      	ldr	r3, [r3, #0]
10004ea4:	4a4c      	ldr	r2, [pc, #304]	; (10004fd8 <UART_SetConfig+0x30c>)
10004ea6:	4293      	cmp	r3, r2
10004ea8:	d12c      	bne.n	10004f04 <UART_SetConfig+0x238>
10004eaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eae:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10004eb2:	f003 0307 	and.w	r3, r3, #7
10004eb6:	2b04      	cmp	r3, #4
10004eb8:	d820      	bhi.n	10004efc <UART_SetConfig+0x230>
10004eba:	a201      	add	r2, pc, #4	; (adr r2, 10004ec0 <UART_SetConfig+0x1f4>)
10004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004ec0:	10004ed5 	.word	0x10004ed5
10004ec4:	10004edd 	.word	0x10004edd
10004ec8:	10004ee5 	.word	0x10004ee5
10004ecc:	10004eed 	.word	0x10004eed
10004ed0:	10004ef5 	.word	0x10004ef5
10004ed4:	2300      	movs	r3, #0
10004ed6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004eda:	e0ea      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004edc:	2308      	movs	r3, #8
10004ede:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ee2:	e0e6      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004ee4:	2310      	movs	r3, #16
10004ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004eea:	e0e2      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004eec:	2320      	movs	r3, #32
10004eee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ef2:	e0de      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004ef4:	2340      	movs	r3, #64	; 0x40
10004ef6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004efa:	e0da      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004efc:	2380      	movs	r3, #128	; 0x80
10004efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f02:	e0d6      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f04:	687b      	ldr	r3, [r7, #4]
10004f06:	681b      	ldr	r3, [r3, #0]
10004f08:	4a34      	ldr	r2, [pc, #208]	; (10004fdc <UART_SetConfig+0x310>)
10004f0a:	4293      	cmp	r3, r2
10004f0c:	d12c      	bne.n	10004f68 <UART_SetConfig+0x29c>
10004f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10004f16:	f003 0307 	and.w	r3, r3, #7
10004f1a:	2b04      	cmp	r3, #4
10004f1c:	d820      	bhi.n	10004f60 <UART_SetConfig+0x294>
10004f1e:	a201      	add	r2, pc, #4	; (adr r2, 10004f24 <UART_SetConfig+0x258>)
10004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004f24:	10004f39 	.word	0x10004f39
10004f28:	10004f41 	.word	0x10004f41
10004f2c:	10004f49 	.word	0x10004f49
10004f30:	10004f51 	.word	0x10004f51
10004f34:	10004f59 	.word	0x10004f59
10004f38:	2300      	movs	r3, #0
10004f3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f3e:	e0b8      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f40:	2308      	movs	r3, #8
10004f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f46:	e0b4      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f48:	2310      	movs	r3, #16
10004f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f4e:	e0b0      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f50:	2320      	movs	r3, #32
10004f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f56:	e0ac      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f58:	2340      	movs	r3, #64	; 0x40
10004f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f5e:	e0a8      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f60:	2380      	movs	r3, #128	; 0x80
10004f62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004f66:	e0a4      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004f68:	687b      	ldr	r3, [r7, #4]
10004f6a:	681b      	ldr	r3, [r3, #0]
10004f6c:	4a1c      	ldr	r2, [pc, #112]	; (10004fe0 <UART_SetConfig+0x314>)
10004f6e:	4293      	cmp	r3, r2
10004f70:	d138      	bne.n	10004fe4 <UART_SetConfig+0x318>
10004f72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f76:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10004f7a:	f003 0307 	and.w	r3, r3, #7
10004f7e:	2b04      	cmp	r3, #4
10004f80:	d820      	bhi.n	10004fc4 <UART_SetConfig+0x2f8>
10004f82:	a201      	add	r2, pc, #4	; (adr r2, 10004f88 <UART_SetConfig+0x2bc>)
10004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004f88:	10004f9d 	.word	0x10004f9d
10004f8c:	10004fa5 	.word	0x10004fa5
10004f90:	10004fad 	.word	0x10004fad
10004f94:	10004fb5 	.word	0x10004fb5
10004f98:	10004fbd 	.word	0x10004fbd
10004f9c:	2301      	movs	r3, #1
10004f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004fa2:	e086      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004fa4:	2308      	movs	r3, #8
10004fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004faa:	e082      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004fac:	2310      	movs	r3, #16
10004fae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004fb2:	e07e      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004fb4:	2320      	movs	r3, #32
10004fb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004fba:	e07a      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004fbc:	2340      	movs	r3, #64	; 0x40
10004fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004fc2:	e076      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004fc4:	2380      	movs	r3, #128	; 0x80
10004fc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004fca:	e072      	b.n	100050b2 <UART_SetConfig+0x3e6>
10004fcc:	cfff69f3 	.word	0xcfff69f3
10004fd0:	4000e000 	.word	0x4000e000
10004fd4:	4000f000 	.word	0x4000f000
10004fd8:	40010000 	.word	0x40010000
10004fdc:	40011000 	.word	0x40011000
10004fe0:	44003000 	.word	0x44003000
10004fe4:	687b      	ldr	r3, [r7, #4]
10004fe6:	681b      	ldr	r3, [r3, #0]
10004fe8:	4aab      	ldr	r2, [pc, #684]	; (10005298 <UART_SetConfig+0x5cc>)
10004fea:	4293      	cmp	r3, r2
10004fec:	d12c      	bne.n	10005048 <UART_SetConfig+0x37c>
10004fee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ff2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10004ff6:	f003 0307 	and.w	r3, r3, #7
10004ffa:	2b04      	cmp	r3, #4
10004ffc:	d820      	bhi.n	10005040 <UART_SetConfig+0x374>
10004ffe:	a201      	add	r2, pc, #4	; (adr r2, 10005004 <UART_SetConfig+0x338>)
10005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005004:	10005019 	.word	0x10005019
10005008:	10005021 	.word	0x10005021
1000500c:	10005029 	.word	0x10005029
10005010:	10005031 	.word	0x10005031
10005014:	10005039 	.word	0x10005039
10005018:	2300      	movs	r3, #0
1000501a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000501e:	e048      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005020:	2308      	movs	r3, #8
10005022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005026:	e044      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005028:	2310      	movs	r3, #16
1000502a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000502e:	e040      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005030:	2320      	movs	r3, #32
10005032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005036:	e03c      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005038:	2340      	movs	r3, #64	; 0x40
1000503a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000503e:	e038      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005040:	2380      	movs	r3, #128	; 0x80
10005042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005046:	e034      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005048:	687b      	ldr	r3, [r7, #4]
1000504a:	681b      	ldr	r3, [r3, #0]
1000504c:	4a93      	ldr	r2, [pc, #588]	; (1000529c <UART_SetConfig+0x5d0>)
1000504e:	4293      	cmp	r3, r2
10005050:	d12c      	bne.n	100050ac <UART_SetConfig+0x3e0>
10005052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005056:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
1000505a:	f003 0307 	and.w	r3, r3, #7
1000505e:	2b04      	cmp	r3, #4
10005060:	d820      	bhi.n	100050a4 <UART_SetConfig+0x3d8>
10005062:	a201      	add	r2, pc, #4	; (adr r2, 10005068 <UART_SetConfig+0x39c>)
10005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005068:	1000507d 	.word	0x1000507d
1000506c:	10005085 	.word	0x10005085
10005070:	1000508d 	.word	0x1000508d
10005074:	10005095 	.word	0x10005095
10005078:	1000509d 	.word	0x1000509d
1000507c:	2300      	movs	r3, #0
1000507e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005082:	e016      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005084:	2308      	movs	r3, #8
10005086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000508a:	e012      	b.n	100050b2 <UART_SetConfig+0x3e6>
1000508c:	2310      	movs	r3, #16
1000508e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005092:	e00e      	b.n	100050b2 <UART_SetConfig+0x3e6>
10005094:	2320      	movs	r3, #32
10005096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000509a:	e00a      	b.n	100050b2 <UART_SetConfig+0x3e6>
1000509c:	2340      	movs	r3, #64	; 0x40
1000509e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100050a2:	e006      	b.n	100050b2 <UART_SetConfig+0x3e6>
100050a4:	2380      	movs	r3, #128	; 0x80
100050a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100050aa:	e002      	b.n	100050b2 <UART_SetConfig+0x3e6>
100050ac:	2380      	movs	r3, #128	; 0x80
100050ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
100050b2:	687b      	ldr	r3, [r7, #4]
100050b4:	69db      	ldr	r3, [r3, #28]
100050b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
100050ba:	f040 8354 	bne.w	10005766 <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
100050be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
100050c2:	2b20      	cmp	r3, #32
100050c4:	dc4a      	bgt.n	1000515c <UART_SetConfig+0x490>
100050c6:	2b00      	cmp	r3, #0
100050c8:	f2c0 832b 	blt.w	10005722 <UART_SetConfig+0xa56>
100050cc:	2b20      	cmp	r3, #32
100050ce:	f200 8328 	bhi.w	10005722 <UART_SetConfig+0xa56>
100050d2:	a201      	add	r2, pc, #4	; (adr r2, 100050d8 <UART_SetConfig+0x40c>)
100050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100050d8:	10005165 	.word	0x10005165
100050dc:	1000521d 	.word	0x1000521d
100050e0:	100052dd 	.word	0x100052dd
100050e4:	10005723 	.word	0x10005723
100050e8:	10005395 	.word	0x10005395
100050ec:	10005723 	.word	0x10005723
100050f0:	10005723 	.word	0x10005723
100050f4:	10005723 	.word	0x10005723
100050f8:	10005451 	.word	0x10005451
100050fc:	10005723 	.word	0x10005723
10005100:	10005723 	.word	0x10005723
10005104:	10005723 	.word	0x10005723
10005108:	10005723 	.word	0x10005723
1000510c:	10005723 	.word	0x10005723
10005110:	10005723 	.word	0x10005723
10005114:	10005723 	.word	0x10005723
10005118:	1000550d 	.word	0x1000550d
1000511c:	10005723 	.word	0x10005723
10005120:	10005723 	.word	0x10005723
10005124:	10005723 	.word	0x10005723
10005128:	10005723 	.word	0x10005723
1000512c:	10005723 	.word	0x10005723
10005130:	10005723 	.word	0x10005723
10005134:	10005723 	.word	0x10005723
10005138:	10005723 	.word	0x10005723
1000513c:	10005723 	.word	0x10005723
10005140:	10005723 	.word	0x10005723
10005144:	10005723 	.word	0x10005723
10005148:	10005723 	.word	0x10005723
1000514c:	10005723 	.word	0x10005723
10005150:	10005723 	.word	0x10005723
10005154:	10005723 	.word	0x10005723
10005158:	100055bf 	.word	0x100055bf
1000515c:	2b40      	cmp	r3, #64	; 0x40
1000515e:	f000 8287 	beq.w	10005670 <UART_SetConfig+0x9a4>
10005162:	e2de      	b.n	10005722 <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10005164:	f7fd f8ce 	bl	10002304 <HAL_RCC_GetPCLK1Freq>
10005168:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000516a:	687b      	ldr	r3, [r7, #4]
1000516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000516e:	2b00      	cmp	r3, #0
10005170:	d044      	beq.n	100051fc <UART_SetConfig+0x530>
10005172:	687b      	ldr	r3, [r7, #4]
10005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005176:	2b01      	cmp	r3, #1
10005178:	d03e      	beq.n	100051f8 <UART_SetConfig+0x52c>
1000517a:	687b      	ldr	r3, [r7, #4]
1000517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000517e:	2b02      	cmp	r3, #2
10005180:	d038      	beq.n	100051f4 <UART_SetConfig+0x528>
10005182:	687b      	ldr	r3, [r7, #4]
10005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005186:	2b03      	cmp	r3, #3
10005188:	d032      	beq.n	100051f0 <UART_SetConfig+0x524>
1000518a:	687b      	ldr	r3, [r7, #4]
1000518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000518e:	2b04      	cmp	r3, #4
10005190:	d02c      	beq.n	100051ec <UART_SetConfig+0x520>
10005192:	687b      	ldr	r3, [r7, #4]
10005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005196:	2b05      	cmp	r3, #5
10005198:	d026      	beq.n	100051e8 <UART_SetConfig+0x51c>
1000519a:	687b      	ldr	r3, [r7, #4]
1000519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000519e:	2b06      	cmp	r3, #6
100051a0:	d020      	beq.n	100051e4 <UART_SetConfig+0x518>
100051a2:	687b      	ldr	r3, [r7, #4]
100051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051a6:	2b07      	cmp	r3, #7
100051a8:	d01a      	beq.n	100051e0 <UART_SetConfig+0x514>
100051aa:	687b      	ldr	r3, [r7, #4]
100051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051ae:	2b08      	cmp	r3, #8
100051b0:	d014      	beq.n	100051dc <UART_SetConfig+0x510>
100051b2:	687b      	ldr	r3, [r7, #4]
100051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051b6:	2b09      	cmp	r3, #9
100051b8:	d00e      	beq.n	100051d8 <UART_SetConfig+0x50c>
100051ba:	687b      	ldr	r3, [r7, #4]
100051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051be:	2b0a      	cmp	r3, #10
100051c0:	d008      	beq.n	100051d4 <UART_SetConfig+0x508>
100051c2:	687b      	ldr	r3, [r7, #4]
100051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051c6:	2b0b      	cmp	r3, #11
100051c8:	d102      	bne.n	100051d0 <UART_SetConfig+0x504>
100051ca:	f44f 7380 	mov.w	r3, #256	; 0x100
100051ce:	e016      	b.n	100051fe <UART_SetConfig+0x532>
100051d0:	2301      	movs	r3, #1
100051d2:	e014      	b.n	100051fe <UART_SetConfig+0x532>
100051d4:	2380      	movs	r3, #128	; 0x80
100051d6:	e012      	b.n	100051fe <UART_SetConfig+0x532>
100051d8:	2340      	movs	r3, #64	; 0x40
100051da:	e010      	b.n	100051fe <UART_SetConfig+0x532>
100051dc:	2320      	movs	r3, #32
100051de:	e00e      	b.n	100051fe <UART_SetConfig+0x532>
100051e0:	2310      	movs	r3, #16
100051e2:	e00c      	b.n	100051fe <UART_SetConfig+0x532>
100051e4:	230c      	movs	r3, #12
100051e6:	e00a      	b.n	100051fe <UART_SetConfig+0x532>
100051e8:	230a      	movs	r3, #10
100051ea:	e008      	b.n	100051fe <UART_SetConfig+0x532>
100051ec:	2308      	movs	r3, #8
100051ee:	e006      	b.n	100051fe <UART_SetConfig+0x532>
100051f0:	2306      	movs	r3, #6
100051f2:	e004      	b.n	100051fe <UART_SetConfig+0x532>
100051f4:	2304      	movs	r3, #4
100051f6:	e002      	b.n	100051fe <UART_SetConfig+0x532>
100051f8:	2302      	movs	r3, #2
100051fa:	e000      	b.n	100051fe <UART_SetConfig+0x532>
100051fc:	2301      	movs	r3, #1
100051fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005200:	fbb2 f3f3 	udiv	r3, r2, r3
10005204:	005a      	lsls	r2, r3, #1
10005206:	687b      	ldr	r3, [r7, #4]
10005208:	685b      	ldr	r3, [r3, #4]
1000520a:	085b      	lsrs	r3, r3, #1
1000520c:	441a      	add	r2, r3
1000520e:	687b      	ldr	r3, [r7, #4]
10005210:	685b      	ldr	r3, [r3, #4]
10005212:	fbb2 f3f3 	udiv	r3, r2, r3
10005216:	b29b      	uxth	r3, r3
10005218:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000521a:	e286      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
1000521c:	f7fd f88d 	bl	1000233a <HAL_RCC_GetPCLK2Freq>
10005220:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005222:	687b      	ldr	r3, [r7, #4]
10005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005226:	2b00      	cmp	r3, #0
10005228:	d048      	beq.n	100052bc <UART_SetConfig+0x5f0>
1000522a:	687b      	ldr	r3, [r7, #4]
1000522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000522e:	2b01      	cmp	r3, #1
10005230:	d042      	beq.n	100052b8 <UART_SetConfig+0x5ec>
10005232:	687b      	ldr	r3, [r7, #4]
10005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005236:	2b02      	cmp	r3, #2
10005238:	d03c      	beq.n	100052b4 <UART_SetConfig+0x5e8>
1000523a:	687b      	ldr	r3, [r7, #4]
1000523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000523e:	2b03      	cmp	r3, #3
10005240:	d036      	beq.n	100052b0 <UART_SetConfig+0x5e4>
10005242:	687b      	ldr	r3, [r7, #4]
10005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005246:	2b04      	cmp	r3, #4
10005248:	d030      	beq.n	100052ac <UART_SetConfig+0x5e0>
1000524a:	687b      	ldr	r3, [r7, #4]
1000524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000524e:	2b05      	cmp	r3, #5
10005250:	d02a      	beq.n	100052a8 <UART_SetConfig+0x5dc>
10005252:	687b      	ldr	r3, [r7, #4]
10005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005256:	2b06      	cmp	r3, #6
10005258:	d024      	beq.n	100052a4 <UART_SetConfig+0x5d8>
1000525a:	687b      	ldr	r3, [r7, #4]
1000525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000525e:	2b07      	cmp	r3, #7
10005260:	d01e      	beq.n	100052a0 <UART_SetConfig+0x5d4>
10005262:	687b      	ldr	r3, [r7, #4]
10005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005266:	2b08      	cmp	r3, #8
10005268:	d014      	beq.n	10005294 <UART_SetConfig+0x5c8>
1000526a:	687b      	ldr	r3, [r7, #4]
1000526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000526e:	2b09      	cmp	r3, #9
10005270:	d00e      	beq.n	10005290 <UART_SetConfig+0x5c4>
10005272:	687b      	ldr	r3, [r7, #4]
10005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005276:	2b0a      	cmp	r3, #10
10005278:	d008      	beq.n	1000528c <UART_SetConfig+0x5c0>
1000527a:	687b      	ldr	r3, [r7, #4]
1000527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000527e:	2b0b      	cmp	r3, #11
10005280:	d102      	bne.n	10005288 <UART_SetConfig+0x5bc>
10005282:	f44f 7380 	mov.w	r3, #256	; 0x100
10005286:	e01a      	b.n	100052be <UART_SetConfig+0x5f2>
10005288:	2301      	movs	r3, #1
1000528a:	e018      	b.n	100052be <UART_SetConfig+0x5f2>
1000528c:	2380      	movs	r3, #128	; 0x80
1000528e:	e016      	b.n	100052be <UART_SetConfig+0x5f2>
10005290:	2340      	movs	r3, #64	; 0x40
10005292:	e014      	b.n	100052be <UART_SetConfig+0x5f2>
10005294:	2320      	movs	r3, #32
10005296:	e012      	b.n	100052be <UART_SetConfig+0x5f2>
10005298:	40018000 	.word	0x40018000
1000529c:	40019000 	.word	0x40019000
100052a0:	2310      	movs	r3, #16
100052a2:	e00c      	b.n	100052be <UART_SetConfig+0x5f2>
100052a4:	230c      	movs	r3, #12
100052a6:	e00a      	b.n	100052be <UART_SetConfig+0x5f2>
100052a8:	230a      	movs	r3, #10
100052aa:	e008      	b.n	100052be <UART_SetConfig+0x5f2>
100052ac:	2308      	movs	r3, #8
100052ae:	e006      	b.n	100052be <UART_SetConfig+0x5f2>
100052b0:	2306      	movs	r3, #6
100052b2:	e004      	b.n	100052be <UART_SetConfig+0x5f2>
100052b4:	2304      	movs	r3, #4
100052b6:	e002      	b.n	100052be <UART_SetConfig+0x5f2>
100052b8:	2302      	movs	r3, #2
100052ba:	e000      	b.n	100052be <UART_SetConfig+0x5f2>
100052bc:	2301      	movs	r3, #1
100052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100052c0:	fbb2 f3f3 	udiv	r3, r2, r3
100052c4:	005a      	lsls	r2, r3, #1
100052c6:	687b      	ldr	r3, [r7, #4]
100052c8:	685b      	ldr	r3, [r3, #4]
100052ca:	085b      	lsrs	r3, r3, #1
100052cc:	441a      	add	r2, r3
100052ce:	687b      	ldr	r3, [r7, #4]
100052d0:	685b      	ldr	r3, [r3, #4]
100052d2:	fbb2 f3f3 	udiv	r3, r2, r3
100052d6:	b29b      	uxth	r3, r3
100052d8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100052da:	e226      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
100052dc:	f7fd f848 	bl	10002370 <HAL_RCC_GetPCLK5Freq>
100052e0:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100052e2:	687b      	ldr	r3, [r7, #4]
100052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052e6:	2b00      	cmp	r3, #0
100052e8:	d044      	beq.n	10005374 <UART_SetConfig+0x6a8>
100052ea:	687b      	ldr	r3, [r7, #4]
100052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052ee:	2b01      	cmp	r3, #1
100052f0:	d03e      	beq.n	10005370 <UART_SetConfig+0x6a4>
100052f2:	687b      	ldr	r3, [r7, #4]
100052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052f6:	2b02      	cmp	r3, #2
100052f8:	d038      	beq.n	1000536c <UART_SetConfig+0x6a0>
100052fa:	687b      	ldr	r3, [r7, #4]
100052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100052fe:	2b03      	cmp	r3, #3
10005300:	d032      	beq.n	10005368 <UART_SetConfig+0x69c>
10005302:	687b      	ldr	r3, [r7, #4]
10005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005306:	2b04      	cmp	r3, #4
10005308:	d02c      	beq.n	10005364 <UART_SetConfig+0x698>
1000530a:	687b      	ldr	r3, [r7, #4]
1000530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000530e:	2b05      	cmp	r3, #5
10005310:	d026      	beq.n	10005360 <UART_SetConfig+0x694>
10005312:	687b      	ldr	r3, [r7, #4]
10005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005316:	2b06      	cmp	r3, #6
10005318:	d020      	beq.n	1000535c <UART_SetConfig+0x690>
1000531a:	687b      	ldr	r3, [r7, #4]
1000531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000531e:	2b07      	cmp	r3, #7
10005320:	d01a      	beq.n	10005358 <UART_SetConfig+0x68c>
10005322:	687b      	ldr	r3, [r7, #4]
10005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005326:	2b08      	cmp	r3, #8
10005328:	d014      	beq.n	10005354 <UART_SetConfig+0x688>
1000532a:	687b      	ldr	r3, [r7, #4]
1000532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000532e:	2b09      	cmp	r3, #9
10005330:	d00e      	beq.n	10005350 <UART_SetConfig+0x684>
10005332:	687b      	ldr	r3, [r7, #4]
10005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005336:	2b0a      	cmp	r3, #10
10005338:	d008      	beq.n	1000534c <UART_SetConfig+0x680>
1000533a:	687b      	ldr	r3, [r7, #4]
1000533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000533e:	2b0b      	cmp	r3, #11
10005340:	d102      	bne.n	10005348 <UART_SetConfig+0x67c>
10005342:	f44f 7380 	mov.w	r3, #256	; 0x100
10005346:	e016      	b.n	10005376 <UART_SetConfig+0x6aa>
10005348:	2301      	movs	r3, #1
1000534a:	e014      	b.n	10005376 <UART_SetConfig+0x6aa>
1000534c:	2380      	movs	r3, #128	; 0x80
1000534e:	e012      	b.n	10005376 <UART_SetConfig+0x6aa>
10005350:	2340      	movs	r3, #64	; 0x40
10005352:	e010      	b.n	10005376 <UART_SetConfig+0x6aa>
10005354:	2320      	movs	r3, #32
10005356:	e00e      	b.n	10005376 <UART_SetConfig+0x6aa>
10005358:	2310      	movs	r3, #16
1000535a:	e00c      	b.n	10005376 <UART_SetConfig+0x6aa>
1000535c:	230c      	movs	r3, #12
1000535e:	e00a      	b.n	10005376 <UART_SetConfig+0x6aa>
10005360:	230a      	movs	r3, #10
10005362:	e008      	b.n	10005376 <UART_SetConfig+0x6aa>
10005364:	2308      	movs	r3, #8
10005366:	e006      	b.n	10005376 <UART_SetConfig+0x6aa>
10005368:	2306      	movs	r3, #6
1000536a:	e004      	b.n	10005376 <UART_SetConfig+0x6aa>
1000536c:	2304      	movs	r3, #4
1000536e:	e002      	b.n	10005376 <UART_SetConfig+0x6aa>
10005370:	2302      	movs	r3, #2
10005372:	e000      	b.n	10005376 <UART_SetConfig+0x6aa>
10005374:	2301      	movs	r3, #1
10005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005378:	fbb2 f3f3 	udiv	r3, r2, r3
1000537c:	005a      	lsls	r2, r3, #1
1000537e:	687b      	ldr	r3, [r7, #4]
10005380:	685b      	ldr	r3, [r3, #4]
10005382:	085b      	lsrs	r3, r3, #1
10005384:	441a      	add	r2, r3
10005386:	687b      	ldr	r3, [r7, #4]
10005388:	685b      	ldr	r3, [r3, #4]
1000538a:	fbb2 f3f3 	udiv	r3, r2, r3
1000538e:	b29b      	uxth	r3, r3
10005390:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005392:	e1ca      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005394:	f107 0314 	add.w	r3, r7, #20
10005398:	4618      	mov	r0, r3
1000539a:	f7fc fdb1 	bl	10001f00 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000539e:	69ba      	ldr	r2, [r7, #24]
100053a0:	687b      	ldr	r3, [r7, #4]
100053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053a4:	2b00      	cmp	r3, #0
100053a6:	d044      	beq.n	10005432 <UART_SetConfig+0x766>
100053a8:	687b      	ldr	r3, [r7, #4]
100053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053ac:	2b01      	cmp	r3, #1
100053ae:	d03e      	beq.n	1000542e <UART_SetConfig+0x762>
100053b0:	687b      	ldr	r3, [r7, #4]
100053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053b4:	2b02      	cmp	r3, #2
100053b6:	d038      	beq.n	1000542a <UART_SetConfig+0x75e>
100053b8:	687b      	ldr	r3, [r7, #4]
100053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053bc:	2b03      	cmp	r3, #3
100053be:	d032      	beq.n	10005426 <UART_SetConfig+0x75a>
100053c0:	687b      	ldr	r3, [r7, #4]
100053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053c4:	2b04      	cmp	r3, #4
100053c6:	d02c      	beq.n	10005422 <UART_SetConfig+0x756>
100053c8:	687b      	ldr	r3, [r7, #4]
100053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053cc:	2b05      	cmp	r3, #5
100053ce:	d026      	beq.n	1000541e <UART_SetConfig+0x752>
100053d0:	687b      	ldr	r3, [r7, #4]
100053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053d4:	2b06      	cmp	r3, #6
100053d6:	d020      	beq.n	1000541a <UART_SetConfig+0x74e>
100053d8:	687b      	ldr	r3, [r7, #4]
100053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053dc:	2b07      	cmp	r3, #7
100053de:	d01a      	beq.n	10005416 <UART_SetConfig+0x74a>
100053e0:	687b      	ldr	r3, [r7, #4]
100053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053e4:	2b08      	cmp	r3, #8
100053e6:	d014      	beq.n	10005412 <UART_SetConfig+0x746>
100053e8:	687b      	ldr	r3, [r7, #4]
100053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053ec:	2b09      	cmp	r3, #9
100053ee:	d00e      	beq.n	1000540e <UART_SetConfig+0x742>
100053f0:	687b      	ldr	r3, [r7, #4]
100053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053f4:	2b0a      	cmp	r3, #10
100053f6:	d008      	beq.n	1000540a <UART_SetConfig+0x73e>
100053f8:	687b      	ldr	r3, [r7, #4]
100053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053fc:	2b0b      	cmp	r3, #11
100053fe:	d102      	bne.n	10005406 <UART_SetConfig+0x73a>
10005400:	f44f 7380 	mov.w	r3, #256	; 0x100
10005404:	e016      	b.n	10005434 <UART_SetConfig+0x768>
10005406:	2301      	movs	r3, #1
10005408:	e014      	b.n	10005434 <UART_SetConfig+0x768>
1000540a:	2380      	movs	r3, #128	; 0x80
1000540c:	e012      	b.n	10005434 <UART_SetConfig+0x768>
1000540e:	2340      	movs	r3, #64	; 0x40
10005410:	e010      	b.n	10005434 <UART_SetConfig+0x768>
10005412:	2320      	movs	r3, #32
10005414:	e00e      	b.n	10005434 <UART_SetConfig+0x768>
10005416:	2310      	movs	r3, #16
10005418:	e00c      	b.n	10005434 <UART_SetConfig+0x768>
1000541a:	230c      	movs	r3, #12
1000541c:	e00a      	b.n	10005434 <UART_SetConfig+0x768>
1000541e:	230a      	movs	r3, #10
10005420:	e008      	b.n	10005434 <UART_SetConfig+0x768>
10005422:	2308      	movs	r3, #8
10005424:	e006      	b.n	10005434 <UART_SetConfig+0x768>
10005426:	2306      	movs	r3, #6
10005428:	e004      	b.n	10005434 <UART_SetConfig+0x768>
1000542a:	2304      	movs	r3, #4
1000542c:	e002      	b.n	10005434 <UART_SetConfig+0x768>
1000542e:	2302      	movs	r3, #2
10005430:	e000      	b.n	10005434 <UART_SetConfig+0x768>
10005432:	2301      	movs	r3, #1
10005434:	fbb2 f3f3 	udiv	r3, r2, r3
10005438:	005a      	lsls	r2, r3, #1
1000543a:	687b      	ldr	r3, [r7, #4]
1000543c:	685b      	ldr	r3, [r3, #4]
1000543e:	085b      	lsrs	r3, r3, #1
10005440:	441a      	add	r2, r3
10005442:	687b      	ldr	r3, [r7, #4]
10005444:	685b      	ldr	r3, [r3, #4]
10005446:	fbb2 f3f3 	udiv	r3, r2, r3
1000544a:	b29b      	uxth	r3, r3
1000544c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000544e:	e16c      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10005450:	f107 0308 	add.w	r3, r7, #8
10005454:	4618      	mov	r0, r3
10005456:	f7fc fe4d 	bl	100020f4 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000545a:	68fa      	ldr	r2, [r7, #12]
1000545c:	687b      	ldr	r3, [r7, #4]
1000545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005460:	2b00      	cmp	r3, #0
10005462:	d044      	beq.n	100054ee <UART_SetConfig+0x822>
10005464:	687b      	ldr	r3, [r7, #4]
10005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005468:	2b01      	cmp	r3, #1
1000546a:	d03e      	beq.n	100054ea <UART_SetConfig+0x81e>
1000546c:	687b      	ldr	r3, [r7, #4]
1000546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005470:	2b02      	cmp	r3, #2
10005472:	d038      	beq.n	100054e6 <UART_SetConfig+0x81a>
10005474:	687b      	ldr	r3, [r7, #4]
10005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005478:	2b03      	cmp	r3, #3
1000547a:	d032      	beq.n	100054e2 <UART_SetConfig+0x816>
1000547c:	687b      	ldr	r3, [r7, #4]
1000547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005480:	2b04      	cmp	r3, #4
10005482:	d02c      	beq.n	100054de <UART_SetConfig+0x812>
10005484:	687b      	ldr	r3, [r7, #4]
10005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005488:	2b05      	cmp	r3, #5
1000548a:	d026      	beq.n	100054da <UART_SetConfig+0x80e>
1000548c:	687b      	ldr	r3, [r7, #4]
1000548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005490:	2b06      	cmp	r3, #6
10005492:	d020      	beq.n	100054d6 <UART_SetConfig+0x80a>
10005494:	687b      	ldr	r3, [r7, #4]
10005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005498:	2b07      	cmp	r3, #7
1000549a:	d01a      	beq.n	100054d2 <UART_SetConfig+0x806>
1000549c:	687b      	ldr	r3, [r7, #4]
1000549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054a0:	2b08      	cmp	r3, #8
100054a2:	d014      	beq.n	100054ce <UART_SetConfig+0x802>
100054a4:	687b      	ldr	r3, [r7, #4]
100054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054a8:	2b09      	cmp	r3, #9
100054aa:	d00e      	beq.n	100054ca <UART_SetConfig+0x7fe>
100054ac:	687b      	ldr	r3, [r7, #4]
100054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054b0:	2b0a      	cmp	r3, #10
100054b2:	d008      	beq.n	100054c6 <UART_SetConfig+0x7fa>
100054b4:	687b      	ldr	r3, [r7, #4]
100054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054b8:	2b0b      	cmp	r3, #11
100054ba:	d102      	bne.n	100054c2 <UART_SetConfig+0x7f6>
100054bc:	f44f 7380 	mov.w	r3, #256	; 0x100
100054c0:	e016      	b.n	100054f0 <UART_SetConfig+0x824>
100054c2:	2301      	movs	r3, #1
100054c4:	e014      	b.n	100054f0 <UART_SetConfig+0x824>
100054c6:	2380      	movs	r3, #128	; 0x80
100054c8:	e012      	b.n	100054f0 <UART_SetConfig+0x824>
100054ca:	2340      	movs	r3, #64	; 0x40
100054cc:	e010      	b.n	100054f0 <UART_SetConfig+0x824>
100054ce:	2320      	movs	r3, #32
100054d0:	e00e      	b.n	100054f0 <UART_SetConfig+0x824>
100054d2:	2310      	movs	r3, #16
100054d4:	e00c      	b.n	100054f0 <UART_SetConfig+0x824>
100054d6:	230c      	movs	r3, #12
100054d8:	e00a      	b.n	100054f0 <UART_SetConfig+0x824>
100054da:	230a      	movs	r3, #10
100054dc:	e008      	b.n	100054f0 <UART_SetConfig+0x824>
100054de:	2308      	movs	r3, #8
100054e0:	e006      	b.n	100054f0 <UART_SetConfig+0x824>
100054e2:	2306      	movs	r3, #6
100054e4:	e004      	b.n	100054f0 <UART_SetConfig+0x824>
100054e6:	2304      	movs	r3, #4
100054e8:	e002      	b.n	100054f0 <UART_SetConfig+0x824>
100054ea:	2302      	movs	r3, #2
100054ec:	e000      	b.n	100054f0 <UART_SetConfig+0x824>
100054ee:	2301      	movs	r3, #1
100054f0:	fbb2 f3f3 	udiv	r3, r2, r3
100054f4:	005a      	lsls	r2, r3, #1
100054f6:	687b      	ldr	r3, [r7, #4]
100054f8:	685b      	ldr	r3, [r3, #4]
100054fa:	085b      	lsrs	r3, r3, #1
100054fc:	441a      	add	r2, r3
100054fe:	687b      	ldr	r3, [r7, #4]
10005500:	685b      	ldr	r3, [r3, #4]
10005502:	fbb2 f3f3 	udiv	r3, r2, r3
10005506:	b29b      	uxth	r3, r3
10005508:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000550a:	e10e      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000550c:	687b      	ldr	r3, [r7, #4]
1000550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005510:	2b00      	cmp	r3, #0
10005512:	d044      	beq.n	1000559e <UART_SetConfig+0x8d2>
10005514:	687b      	ldr	r3, [r7, #4]
10005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005518:	2b01      	cmp	r3, #1
1000551a:	d03e      	beq.n	1000559a <UART_SetConfig+0x8ce>
1000551c:	687b      	ldr	r3, [r7, #4]
1000551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005520:	2b02      	cmp	r3, #2
10005522:	d038      	beq.n	10005596 <UART_SetConfig+0x8ca>
10005524:	687b      	ldr	r3, [r7, #4]
10005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005528:	2b03      	cmp	r3, #3
1000552a:	d032      	beq.n	10005592 <UART_SetConfig+0x8c6>
1000552c:	687b      	ldr	r3, [r7, #4]
1000552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005530:	2b04      	cmp	r3, #4
10005532:	d02c      	beq.n	1000558e <UART_SetConfig+0x8c2>
10005534:	687b      	ldr	r3, [r7, #4]
10005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005538:	2b05      	cmp	r3, #5
1000553a:	d026      	beq.n	1000558a <UART_SetConfig+0x8be>
1000553c:	687b      	ldr	r3, [r7, #4]
1000553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005540:	2b06      	cmp	r3, #6
10005542:	d020      	beq.n	10005586 <UART_SetConfig+0x8ba>
10005544:	687b      	ldr	r3, [r7, #4]
10005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005548:	2b07      	cmp	r3, #7
1000554a:	d01a      	beq.n	10005582 <UART_SetConfig+0x8b6>
1000554c:	687b      	ldr	r3, [r7, #4]
1000554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005550:	2b08      	cmp	r3, #8
10005552:	d014      	beq.n	1000557e <UART_SetConfig+0x8b2>
10005554:	687b      	ldr	r3, [r7, #4]
10005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005558:	2b09      	cmp	r3, #9
1000555a:	d00e      	beq.n	1000557a <UART_SetConfig+0x8ae>
1000555c:	687b      	ldr	r3, [r7, #4]
1000555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005560:	2b0a      	cmp	r3, #10
10005562:	d008      	beq.n	10005576 <UART_SetConfig+0x8aa>
10005564:	687b      	ldr	r3, [r7, #4]
10005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005568:	2b0b      	cmp	r3, #11
1000556a:	d102      	bne.n	10005572 <UART_SetConfig+0x8a6>
1000556c:	f44f 7380 	mov.w	r3, #256	; 0x100
10005570:	e016      	b.n	100055a0 <UART_SetConfig+0x8d4>
10005572:	2301      	movs	r3, #1
10005574:	e014      	b.n	100055a0 <UART_SetConfig+0x8d4>
10005576:	2380      	movs	r3, #128	; 0x80
10005578:	e012      	b.n	100055a0 <UART_SetConfig+0x8d4>
1000557a:	2340      	movs	r3, #64	; 0x40
1000557c:	e010      	b.n	100055a0 <UART_SetConfig+0x8d4>
1000557e:	2320      	movs	r3, #32
10005580:	e00e      	b.n	100055a0 <UART_SetConfig+0x8d4>
10005582:	2310      	movs	r3, #16
10005584:	e00c      	b.n	100055a0 <UART_SetConfig+0x8d4>
10005586:	230c      	movs	r3, #12
10005588:	e00a      	b.n	100055a0 <UART_SetConfig+0x8d4>
1000558a:	230a      	movs	r3, #10
1000558c:	e008      	b.n	100055a0 <UART_SetConfig+0x8d4>
1000558e:	2308      	movs	r3, #8
10005590:	e006      	b.n	100055a0 <UART_SetConfig+0x8d4>
10005592:	2306      	movs	r3, #6
10005594:	e004      	b.n	100055a0 <UART_SetConfig+0x8d4>
10005596:	2304      	movs	r3, #4
10005598:	e002      	b.n	100055a0 <UART_SetConfig+0x8d4>
1000559a:	2302      	movs	r3, #2
1000559c:	e000      	b.n	100055a0 <UART_SetConfig+0x8d4>
1000559e:	2301      	movs	r3, #1
100055a0:	4a9a      	ldr	r2, [pc, #616]	; (1000580c <UART_SetConfig+0xb40>)
100055a2:	fbb2 f3f3 	udiv	r3, r2, r3
100055a6:	005a      	lsls	r2, r3, #1
100055a8:	687b      	ldr	r3, [r7, #4]
100055aa:	685b      	ldr	r3, [r3, #4]
100055ac:	085b      	lsrs	r3, r3, #1
100055ae:	441a      	add	r2, r3
100055b0:	687b      	ldr	r3, [r7, #4]
100055b2:	685b      	ldr	r3, [r3, #4]
100055b4:	fbb2 f3f3 	udiv	r3, r2, r3
100055b8:	b29b      	uxth	r3, r3
100055ba:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100055bc:	e0b5      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100055be:	687b      	ldr	r3, [r7, #4]
100055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055c2:	2b00      	cmp	r3, #0
100055c4:	d044      	beq.n	10005650 <UART_SetConfig+0x984>
100055c6:	687b      	ldr	r3, [r7, #4]
100055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055ca:	2b01      	cmp	r3, #1
100055cc:	d03e      	beq.n	1000564c <UART_SetConfig+0x980>
100055ce:	687b      	ldr	r3, [r7, #4]
100055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055d2:	2b02      	cmp	r3, #2
100055d4:	d038      	beq.n	10005648 <UART_SetConfig+0x97c>
100055d6:	687b      	ldr	r3, [r7, #4]
100055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055da:	2b03      	cmp	r3, #3
100055dc:	d032      	beq.n	10005644 <UART_SetConfig+0x978>
100055de:	687b      	ldr	r3, [r7, #4]
100055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055e2:	2b04      	cmp	r3, #4
100055e4:	d02c      	beq.n	10005640 <UART_SetConfig+0x974>
100055e6:	687b      	ldr	r3, [r7, #4]
100055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055ea:	2b05      	cmp	r3, #5
100055ec:	d026      	beq.n	1000563c <UART_SetConfig+0x970>
100055ee:	687b      	ldr	r3, [r7, #4]
100055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055f2:	2b06      	cmp	r3, #6
100055f4:	d020      	beq.n	10005638 <UART_SetConfig+0x96c>
100055f6:	687b      	ldr	r3, [r7, #4]
100055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055fa:	2b07      	cmp	r3, #7
100055fc:	d01a      	beq.n	10005634 <UART_SetConfig+0x968>
100055fe:	687b      	ldr	r3, [r7, #4]
10005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005602:	2b08      	cmp	r3, #8
10005604:	d014      	beq.n	10005630 <UART_SetConfig+0x964>
10005606:	687b      	ldr	r3, [r7, #4]
10005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000560a:	2b09      	cmp	r3, #9
1000560c:	d00e      	beq.n	1000562c <UART_SetConfig+0x960>
1000560e:	687b      	ldr	r3, [r7, #4]
10005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005612:	2b0a      	cmp	r3, #10
10005614:	d008      	beq.n	10005628 <UART_SetConfig+0x95c>
10005616:	687b      	ldr	r3, [r7, #4]
10005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000561a:	2b0b      	cmp	r3, #11
1000561c:	d102      	bne.n	10005624 <UART_SetConfig+0x958>
1000561e:	f44f 7380 	mov.w	r3, #256	; 0x100
10005622:	e016      	b.n	10005652 <UART_SetConfig+0x986>
10005624:	2301      	movs	r3, #1
10005626:	e014      	b.n	10005652 <UART_SetConfig+0x986>
10005628:	2380      	movs	r3, #128	; 0x80
1000562a:	e012      	b.n	10005652 <UART_SetConfig+0x986>
1000562c:	2340      	movs	r3, #64	; 0x40
1000562e:	e010      	b.n	10005652 <UART_SetConfig+0x986>
10005630:	2320      	movs	r3, #32
10005632:	e00e      	b.n	10005652 <UART_SetConfig+0x986>
10005634:	2310      	movs	r3, #16
10005636:	e00c      	b.n	10005652 <UART_SetConfig+0x986>
10005638:	230c      	movs	r3, #12
1000563a:	e00a      	b.n	10005652 <UART_SetConfig+0x986>
1000563c:	230a      	movs	r3, #10
1000563e:	e008      	b.n	10005652 <UART_SetConfig+0x986>
10005640:	2308      	movs	r3, #8
10005642:	e006      	b.n	10005652 <UART_SetConfig+0x986>
10005644:	2306      	movs	r3, #6
10005646:	e004      	b.n	10005652 <UART_SetConfig+0x986>
10005648:	2304      	movs	r3, #4
1000564a:	e002      	b.n	10005652 <UART_SetConfig+0x986>
1000564c:	2302      	movs	r3, #2
1000564e:	e000      	b.n	10005652 <UART_SetConfig+0x986>
10005650:	2301      	movs	r3, #1
10005652:	4a6f      	ldr	r2, [pc, #444]	; (10005810 <UART_SetConfig+0xb44>)
10005654:	fbb2 f3f3 	udiv	r3, r2, r3
10005658:	005a      	lsls	r2, r3, #1
1000565a:	687b      	ldr	r3, [r7, #4]
1000565c:	685b      	ldr	r3, [r3, #4]
1000565e:	085b      	lsrs	r3, r3, #1
10005660:	441a      	add	r2, r3
10005662:	687b      	ldr	r3, [r7, #4]
10005664:	685b      	ldr	r3, [r3, #4]
10005666:	fbb2 f3f3 	udiv	r3, r2, r3
1000566a:	b29b      	uxth	r3, r3
1000566c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000566e:	e05c      	b.n	1000572a <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005670:	687b      	ldr	r3, [r7, #4]
10005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005674:	2b00      	cmp	r3, #0
10005676:	d044      	beq.n	10005702 <UART_SetConfig+0xa36>
10005678:	687b      	ldr	r3, [r7, #4]
1000567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000567c:	2b01      	cmp	r3, #1
1000567e:	d03e      	beq.n	100056fe <UART_SetConfig+0xa32>
10005680:	687b      	ldr	r3, [r7, #4]
10005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005684:	2b02      	cmp	r3, #2
10005686:	d038      	beq.n	100056fa <UART_SetConfig+0xa2e>
10005688:	687b      	ldr	r3, [r7, #4]
1000568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000568c:	2b03      	cmp	r3, #3
1000568e:	d032      	beq.n	100056f6 <UART_SetConfig+0xa2a>
10005690:	687b      	ldr	r3, [r7, #4]
10005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005694:	2b04      	cmp	r3, #4
10005696:	d02c      	beq.n	100056f2 <UART_SetConfig+0xa26>
10005698:	687b      	ldr	r3, [r7, #4]
1000569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000569c:	2b05      	cmp	r3, #5
1000569e:	d026      	beq.n	100056ee <UART_SetConfig+0xa22>
100056a0:	687b      	ldr	r3, [r7, #4]
100056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056a4:	2b06      	cmp	r3, #6
100056a6:	d020      	beq.n	100056ea <UART_SetConfig+0xa1e>
100056a8:	687b      	ldr	r3, [r7, #4]
100056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056ac:	2b07      	cmp	r3, #7
100056ae:	d01a      	beq.n	100056e6 <UART_SetConfig+0xa1a>
100056b0:	687b      	ldr	r3, [r7, #4]
100056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056b4:	2b08      	cmp	r3, #8
100056b6:	d014      	beq.n	100056e2 <UART_SetConfig+0xa16>
100056b8:	687b      	ldr	r3, [r7, #4]
100056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056bc:	2b09      	cmp	r3, #9
100056be:	d00e      	beq.n	100056de <UART_SetConfig+0xa12>
100056c0:	687b      	ldr	r3, [r7, #4]
100056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056c4:	2b0a      	cmp	r3, #10
100056c6:	d008      	beq.n	100056da <UART_SetConfig+0xa0e>
100056c8:	687b      	ldr	r3, [r7, #4]
100056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056cc:	2b0b      	cmp	r3, #11
100056ce:	d102      	bne.n	100056d6 <UART_SetConfig+0xa0a>
100056d0:	f44f 7380 	mov.w	r3, #256	; 0x100
100056d4:	e016      	b.n	10005704 <UART_SetConfig+0xa38>
100056d6:	2301      	movs	r3, #1
100056d8:	e014      	b.n	10005704 <UART_SetConfig+0xa38>
100056da:	2380      	movs	r3, #128	; 0x80
100056dc:	e012      	b.n	10005704 <UART_SetConfig+0xa38>
100056de:	2340      	movs	r3, #64	; 0x40
100056e0:	e010      	b.n	10005704 <UART_SetConfig+0xa38>
100056e2:	2320      	movs	r3, #32
100056e4:	e00e      	b.n	10005704 <UART_SetConfig+0xa38>
100056e6:	2310      	movs	r3, #16
100056e8:	e00c      	b.n	10005704 <UART_SetConfig+0xa38>
100056ea:	230c      	movs	r3, #12
100056ec:	e00a      	b.n	10005704 <UART_SetConfig+0xa38>
100056ee:	230a      	movs	r3, #10
100056f0:	e008      	b.n	10005704 <UART_SetConfig+0xa38>
100056f2:	2308      	movs	r3, #8
100056f4:	e006      	b.n	10005704 <UART_SetConfig+0xa38>
100056f6:	2306      	movs	r3, #6
100056f8:	e004      	b.n	10005704 <UART_SetConfig+0xa38>
100056fa:	2304      	movs	r3, #4
100056fc:	e002      	b.n	10005704 <UART_SetConfig+0xa38>
100056fe:	2302      	movs	r3, #2
10005700:	e000      	b.n	10005704 <UART_SetConfig+0xa38>
10005702:	2301      	movs	r3, #1
10005704:	4a43      	ldr	r2, [pc, #268]	; (10005814 <UART_SetConfig+0xb48>)
10005706:	fbb2 f3f3 	udiv	r3, r2, r3
1000570a:	005a      	lsls	r2, r3, #1
1000570c:	687b      	ldr	r3, [r7, #4]
1000570e:	685b      	ldr	r3, [r3, #4]
10005710:	085b      	lsrs	r3, r3, #1
10005712:	441a      	add	r2, r3
10005714:	687b      	ldr	r3, [r7, #4]
10005716:	685b      	ldr	r3, [r3, #4]
10005718:	fbb2 f3f3 	udiv	r3, r2, r3
1000571c:	b29b      	uxth	r3, r3
1000571e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005720:	e003      	b.n	1000572a <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
10005722:	2301      	movs	r3, #1
10005724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10005728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000572c:	2b0f      	cmp	r3, #15
1000572e:	d916      	bls.n	1000575e <UART_SetConfig+0xa92>
10005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10005736:	d212      	bcs.n	1000575e <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000573a:	b29b      	uxth	r3, r3
1000573c:	f023 030f 	bic.w	r3, r3, #15
10005740:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005744:	085b      	lsrs	r3, r3, #1
10005746:	b29b      	uxth	r3, r3
10005748:	f003 0307 	and.w	r3, r3, #7
1000574c:	b29a      	uxth	r2, r3
1000574e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10005750:	4313      	orrs	r3, r2
10005752:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
10005754:	687b      	ldr	r3, [r7, #4]
10005756:	681b      	ldr	r3, [r3, #0]
10005758:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
1000575a:	60da      	str	r2, [r3, #12]
1000575c:	e342      	b.n	10005de4 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
1000575e:	2301      	movs	r3, #1
10005760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
10005764:	e33e      	b.n	10005de4 <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
10005766:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
1000576a:	2b20      	cmp	r3, #32
1000576c:	dc4a      	bgt.n	10005804 <UART_SetConfig+0xb38>
1000576e:	2b00      	cmp	r3, #0
10005770:	f2c0 8325 	blt.w	10005dbe <UART_SetConfig+0x10f2>
10005774:	2b20      	cmp	r3, #32
10005776:	f200 8322 	bhi.w	10005dbe <UART_SetConfig+0x10f2>
1000577a:	a201      	add	r2, pc, #4	; (adr r2, 10005780 <UART_SetConfig+0xab4>)
1000577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005780:	10005819 	.word	0x10005819
10005784:	100058cf 	.word	0x100058cf
10005788:	10005985 	.word	0x10005985
1000578c:	10005dbf 	.word	0x10005dbf
10005790:	10005a3b 	.word	0x10005a3b
10005794:	10005dbf 	.word	0x10005dbf
10005798:	10005dbf 	.word	0x10005dbf
1000579c:	10005dbf 	.word	0x10005dbf
100057a0:	10005af5 	.word	0x10005af5
100057a4:	10005dbf 	.word	0x10005dbf
100057a8:	10005dbf 	.word	0x10005dbf
100057ac:	10005dbf 	.word	0x10005dbf
100057b0:	10005dbf 	.word	0x10005dbf
100057b4:	10005dbf 	.word	0x10005dbf
100057b8:	10005dbf 	.word	0x10005dbf
100057bc:	10005dbf 	.word	0x10005dbf
100057c0:	10005baf 	.word	0x10005baf
100057c4:	10005dbf 	.word	0x10005dbf
100057c8:	10005dbf 	.word	0x10005dbf
100057cc:	10005dbf 	.word	0x10005dbf
100057d0:	10005dbf 	.word	0x10005dbf
100057d4:	10005dbf 	.word	0x10005dbf
100057d8:	10005dbf 	.word	0x10005dbf
100057dc:	10005dbf 	.word	0x10005dbf
100057e0:	10005dbf 	.word	0x10005dbf
100057e4:	10005dbf 	.word	0x10005dbf
100057e8:	10005dbf 	.word	0x10005dbf
100057ec:	10005dbf 	.word	0x10005dbf
100057f0:	10005dbf 	.word	0x10005dbf
100057f4:	10005dbf 	.word	0x10005dbf
100057f8:	10005dbf 	.word	0x10005dbf
100057fc:	10005dbf 	.word	0x10005dbf
10005800:	10005c5f 	.word	0x10005c5f
10005804:	2b40      	cmp	r3, #64	; 0x40
10005806:	f000 8282 	beq.w	10005d0e <UART_SetConfig+0x1042>
1000580a:	e2d8      	b.n	10005dbe <UART_SetConfig+0x10f2>
1000580c:	03d09000 	.word	0x03d09000
10005810:	003d0900 	.word	0x003d0900
10005814:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10005818:	f7fc fd74 	bl	10002304 <HAL_RCC_GetPCLK1Freq>
1000581c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000581e:	687b      	ldr	r3, [r7, #4]
10005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005822:	2b00      	cmp	r3, #0
10005824:	d044      	beq.n	100058b0 <UART_SetConfig+0xbe4>
10005826:	687b      	ldr	r3, [r7, #4]
10005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000582a:	2b01      	cmp	r3, #1
1000582c:	d03e      	beq.n	100058ac <UART_SetConfig+0xbe0>
1000582e:	687b      	ldr	r3, [r7, #4]
10005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005832:	2b02      	cmp	r3, #2
10005834:	d038      	beq.n	100058a8 <UART_SetConfig+0xbdc>
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000583a:	2b03      	cmp	r3, #3
1000583c:	d032      	beq.n	100058a4 <UART_SetConfig+0xbd8>
1000583e:	687b      	ldr	r3, [r7, #4]
10005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005842:	2b04      	cmp	r3, #4
10005844:	d02c      	beq.n	100058a0 <UART_SetConfig+0xbd4>
10005846:	687b      	ldr	r3, [r7, #4]
10005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000584a:	2b05      	cmp	r3, #5
1000584c:	d026      	beq.n	1000589c <UART_SetConfig+0xbd0>
1000584e:	687b      	ldr	r3, [r7, #4]
10005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005852:	2b06      	cmp	r3, #6
10005854:	d020      	beq.n	10005898 <UART_SetConfig+0xbcc>
10005856:	687b      	ldr	r3, [r7, #4]
10005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000585a:	2b07      	cmp	r3, #7
1000585c:	d01a      	beq.n	10005894 <UART_SetConfig+0xbc8>
1000585e:	687b      	ldr	r3, [r7, #4]
10005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005862:	2b08      	cmp	r3, #8
10005864:	d014      	beq.n	10005890 <UART_SetConfig+0xbc4>
10005866:	687b      	ldr	r3, [r7, #4]
10005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000586a:	2b09      	cmp	r3, #9
1000586c:	d00e      	beq.n	1000588c <UART_SetConfig+0xbc0>
1000586e:	687b      	ldr	r3, [r7, #4]
10005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005872:	2b0a      	cmp	r3, #10
10005874:	d008      	beq.n	10005888 <UART_SetConfig+0xbbc>
10005876:	687b      	ldr	r3, [r7, #4]
10005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000587a:	2b0b      	cmp	r3, #11
1000587c:	d102      	bne.n	10005884 <UART_SetConfig+0xbb8>
1000587e:	f44f 7380 	mov.w	r3, #256	; 0x100
10005882:	e016      	b.n	100058b2 <UART_SetConfig+0xbe6>
10005884:	2301      	movs	r3, #1
10005886:	e014      	b.n	100058b2 <UART_SetConfig+0xbe6>
10005888:	2380      	movs	r3, #128	; 0x80
1000588a:	e012      	b.n	100058b2 <UART_SetConfig+0xbe6>
1000588c:	2340      	movs	r3, #64	; 0x40
1000588e:	e010      	b.n	100058b2 <UART_SetConfig+0xbe6>
10005890:	2320      	movs	r3, #32
10005892:	e00e      	b.n	100058b2 <UART_SetConfig+0xbe6>
10005894:	2310      	movs	r3, #16
10005896:	e00c      	b.n	100058b2 <UART_SetConfig+0xbe6>
10005898:	230c      	movs	r3, #12
1000589a:	e00a      	b.n	100058b2 <UART_SetConfig+0xbe6>
1000589c:	230a      	movs	r3, #10
1000589e:	e008      	b.n	100058b2 <UART_SetConfig+0xbe6>
100058a0:	2308      	movs	r3, #8
100058a2:	e006      	b.n	100058b2 <UART_SetConfig+0xbe6>
100058a4:	2306      	movs	r3, #6
100058a6:	e004      	b.n	100058b2 <UART_SetConfig+0xbe6>
100058a8:	2304      	movs	r3, #4
100058aa:	e002      	b.n	100058b2 <UART_SetConfig+0xbe6>
100058ac:	2302      	movs	r3, #2
100058ae:	e000      	b.n	100058b2 <UART_SetConfig+0xbe6>
100058b0:	2301      	movs	r3, #1
100058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100058b4:	fbb2 f2f3 	udiv	r2, r2, r3
100058b8:	687b      	ldr	r3, [r7, #4]
100058ba:	685b      	ldr	r3, [r3, #4]
100058bc:	085b      	lsrs	r3, r3, #1
100058be:	441a      	add	r2, r3
100058c0:	687b      	ldr	r3, [r7, #4]
100058c2:	685b      	ldr	r3, [r3, #4]
100058c4:	fbb2 f3f3 	udiv	r3, r2, r3
100058c8:	b29b      	uxth	r3, r3
100058ca:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100058cc:	e27b      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
100058ce:	f7fc fd34 	bl	1000233a <HAL_RCC_GetPCLK2Freq>
100058d2:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100058d4:	687b      	ldr	r3, [r7, #4]
100058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058d8:	2b00      	cmp	r3, #0
100058da:	d044      	beq.n	10005966 <UART_SetConfig+0xc9a>
100058dc:	687b      	ldr	r3, [r7, #4]
100058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058e0:	2b01      	cmp	r3, #1
100058e2:	d03e      	beq.n	10005962 <UART_SetConfig+0xc96>
100058e4:	687b      	ldr	r3, [r7, #4]
100058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058e8:	2b02      	cmp	r3, #2
100058ea:	d038      	beq.n	1000595e <UART_SetConfig+0xc92>
100058ec:	687b      	ldr	r3, [r7, #4]
100058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058f0:	2b03      	cmp	r3, #3
100058f2:	d032      	beq.n	1000595a <UART_SetConfig+0xc8e>
100058f4:	687b      	ldr	r3, [r7, #4]
100058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058f8:	2b04      	cmp	r3, #4
100058fa:	d02c      	beq.n	10005956 <UART_SetConfig+0xc8a>
100058fc:	687b      	ldr	r3, [r7, #4]
100058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005900:	2b05      	cmp	r3, #5
10005902:	d026      	beq.n	10005952 <UART_SetConfig+0xc86>
10005904:	687b      	ldr	r3, [r7, #4]
10005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005908:	2b06      	cmp	r3, #6
1000590a:	d020      	beq.n	1000594e <UART_SetConfig+0xc82>
1000590c:	687b      	ldr	r3, [r7, #4]
1000590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005910:	2b07      	cmp	r3, #7
10005912:	d01a      	beq.n	1000594a <UART_SetConfig+0xc7e>
10005914:	687b      	ldr	r3, [r7, #4]
10005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005918:	2b08      	cmp	r3, #8
1000591a:	d014      	beq.n	10005946 <UART_SetConfig+0xc7a>
1000591c:	687b      	ldr	r3, [r7, #4]
1000591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005920:	2b09      	cmp	r3, #9
10005922:	d00e      	beq.n	10005942 <UART_SetConfig+0xc76>
10005924:	687b      	ldr	r3, [r7, #4]
10005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005928:	2b0a      	cmp	r3, #10
1000592a:	d008      	beq.n	1000593e <UART_SetConfig+0xc72>
1000592c:	687b      	ldr	r3, [r7, #4]
1000592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005930:	2b0b      	cmp	r3, #11
10005932:	d102      	bne.n	1000593a <UART_SetConfig+0xc6e>
10005934:	f44f 7380 	mov.w	r3, #256	; 0x100
10005938:	e016      	b.n	10005968 <UART_SetConfig+0xc9c>
1000593a:	2301      	movs	r3, #1
1000593c:	e014      	b.n	10005968 <UART_SetConfig+0xc9c>
1000593e:	2380      	movs	r3, #128	; 0x80
10005940:	e012      	b.n	10005968 <UART_SetConfig+0xc9c>
10005942:	2340      	movs	r3, #64	; 0x40
10005944:	e010      	b.n	10005968 <UART_SetConfig+0xc9c>
10005946:	2320      	movs	r3, #32
10005948:	e00e      	b.n	10005968 <UART_SetConfig+0xc9c>
1000594a:	2310      	movs	r3, #16
1000594c:	e00c      	b.n	10005968 <UART_SetConfig+0xc9c>
1000594e:	230c      	movs	r3, #12
10005950:	e00a      	b.n	10005968 <UART_SetConfig+0xc9c>
10005952:	230a      	movs	r3, #10
10005954:	e008      	b.n	10005968 <UART_SetConfig+0xc9c>
10005956:	2308      	movs	r3, #8
10005958:	e006      	b.n	10005968 <UART_SetConfig+0xc9c>
1000595a:	2306      	movs	r3, #6
1000595c:	e004      	b.n	10005968 <UART_SetConfig+0xc9c>
1000595e:	2304      	movs	r3, #4
10005960:	e002      	b.n	10005968 <UART_SetConfig+0xc9c>
10005962:	2302      	movs	r3, #2
10005964:	e000      	b.n	10005968 <UART_SetConfig+0xc9c>
10005966:	2301      	movs	r3, #1
10005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000596a:	fbb2 f2f3 	udiv	r2, r2, r3
1000596e:	687b      	ldr	r3, [r7, #4]
10005970:	685b      	ldr	r3, [r3, #4]
10005972:	085b      	lsrs	r3, r3, #1
10005974:	441a      	add	r2, r3
10005976:	687b      	ldr	r3, [r7, #4]
10005978:	685b      	ldr	r3, [r3, #4]
1000597a:	fbb2 f3f3 	udiv	r3, r2, r3
1000597e:	b29b      	uxth	r3, r3
10005980:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005982:	e220      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10005984:	f7fc fcf4 	bl	10002370 <HAL_RCC_GetPCLK5Freq>
10005988:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000598a:	687b      	ldr	r3, [r7, #4]
1000598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000598e:	2b00      	cmp	r3, #0
10005990:	d044      	beq.n	10005a1c <UART_SetConfig+0xd50>
10005992:	687b      	ldr	r3, [r7, #4]
10005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005996:	2b01      	cmp	r3, #1
10005998:	d03e      	beq.n	10005a18 <UART_SetConfig+0xd4c>
1000599a:	687b      	ldr	r3, [r7, #4]
1000599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000599e:	2b02      	cmp	r3, #2
100059a0:	d038      	beq.n	10005a14 <UART_SetConfig+0xd48>
100059a2:	687b      	ldr	r3, [r7, #4]
100059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059a6:	2b03      	cmp	r3, #3
100059a8:	d032      	beq.n	10005a10 <UART_SetConfig+0xd44>
100059aa:	687b      	ldr	r3, [r7, #4]
100059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059ae:	2b04      	cmp	r3, #4
100059b0:	d02c      	beq.n	10005a0c <UART_SetConfig+0xd40>
100059b2:	687b      	ldr	r3, [r7, #4]
100059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059b6:	2b05      	cmp	r3, #5
100059b8:	d026      	beq.n	10005a08 <UART_SetConfig+0xd3c>
100059ba:	687b      	ldr	r3, [r7, #4]
100059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059be:	2b06      	cmp	r3, #6
100059c0:	d020      	beq.n	10005a04 <UART_SetConfig+0xd38>
100059c2:	687b      	ldr	r3, [r7, #4]
100059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059c6:	2b07      	cmp	r3, #7
100059c8:	d01a      	beq.n	10005a00 <UART_SetConfig+0xd34>
100059ca:	687b      	ldr	r3, [r7, #4]
100059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059ce:	2b08      	cmp	r3, #8
100059d0:	d014      	beq.n	100059fc <UART_SetConfig+0xd30>
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059d6:	2b09      	cmp	r3, #9
100059d8:	d00e      	beq.n	100059f8 <UART_SetConfig+0xd2c>
100059da:	687b      	ldr	r3, [r7, #4]
100059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059de:	2b0a      	cmp	r3, #10
100059e0:	d008      	beq.n	100059f4 <UART_SetConfig+0xd28>
100059e2:	687b      	ldr	r3, [r7, #4]
100059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100059e6:	2b0b      	cmp	r3, #11
100059e8:	d102      	bne.n	100059f0 <UART_SetConfig+0xd24>
100059ea:	f44f 7380 	mov.w	r3, #256	; 0x100
100059ee:	e016      	b.n	10005a1e <UART_SetConfig+0xd52>
100059f0:	2301      	movs	r3, #1
100059f2:	e014      	b.n	10005a1e <UART_SetConfig+0xd52>
100059f4:	2380      	movs	r3, #128	; 0x80
100059f6:	e012      	b.n	10005a1e <UART_SetConfig+0xd52>
100059f8:	2340      	movs	r3, #64	; 0x40
100059fa:	e010      	b.n	10005a1e <UART_SetConfig+0xd52>
100059fc:	2320      	movs	r3, #32
100059fe:	e00e      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a00:	2310      	movs	r3, #16
10005a02:	e00c      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a04:	230c      	movs	r3, #12
10005a06:	e00a      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a08:	230a      	movs	r3, #10
10005a0a:	e008      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a0c:	2308      	movs	r3, #8
10005a0e:	e006      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a10:	2306      	movs	r3, #6
10005a12:	e004      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a14:	2304      	movs	r3, #4
10005a16:	e002      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a18:	2302      	movs	r3, #2
10005a1a:	e000      	b.n	10005a1e <UART_SetConfig+0xd52>
10005a1c:	2301      	movs	r3, #1
10005a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005a20:	fbb2 f2f3 	udiv	r2, r2, r3
10005a24:	687b      	ldr	r3, [r7, #4]
10005a26:	685b      	ldr	r3, [r3, #4]
10005a28:	085b      	lsrs	r3, r3, #1
10005a2a:	441a      	add	r2, r3
10005a2c:	687b      	ldr	r3, [r7, #4]
10005a2e:	685b      	ldr	r3, [r3, #4]
10005a30:	fbb2 f3f3 	udiv	r3, r2, r3
10005a34:	b29b      	uxth	r3, r3
10005a36:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005a38:	e1c5      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005a3a:	f107 0314 	add.w	r3, r7, #20
10005a3e:	4618      	mov	r0, r3
10005a40:	f7fc fa5e 	bl	10001f00 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005a44:	69ba      	ldr	r2, [r7, #24]
10005a46:	687b      	ldr	r3, [r7, #4]
10005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a4a:	2b00      	cmp	r3, #0
10005a4c:	d044      	beq.n	10005ad8 <UART_SetConfig+0xe0c>
10005a4e:	687b      	ldr	r3, [r7, #4]
10005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a52:	2b01      	cmp	r3, #1
10005a54:	d03e      	beq.n	10005ad4 <UART_SetConfig+0xe08>
10005a56:	687b      	ldr	r3, [r7, #4]
10005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a5a:	2b02      	cmp	r3, #2
10005a5c:	d038      	beq.n	10005ad0 <UART_SetConfig+0xe04>
10005a5e:	687b      	ldr	r3, [r7, #4]
10005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a62:	2b03      	cmp	r3, #3
10005a64:	d032      	beq.n	10005acc <UART_SetConfig+0xe00>
10005a66:	687b      	ldr	r3, [r7, #4]
10005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a6a:	2b04      	cmp	r3, #4
10005a6c:	d02c      	beq.n	10005ac8 <UART_SetConfig+0xdfc>
10005a6e:	687b      	ldr	r3, [r7, #4]
10005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a72:	2b05      	cmp	r3, #5
10005a74:	d026      	beq.n	10005ac4 <UART_SetConfig+0xdf8>
10005a76:	687b      	ldr	r3, [r7, #4]
10005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a7a:	2b06      	cmp	r3, #6
10005a7c:	d020      	beq.n	10005ac0 <UART_SetConfig+0xdf4>
10005a7e:	687b      	ldr	r3, [r7, #4]
10005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a82:	2b07      	cmp	r3, #7
10005a84:	d01a      	beq.n	10005abc <UART_SetConfig+0xdf0>
10005a86:	687b      	ldr	r3, [r7, #4]
10005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a8a:	2b08      	cmp	r3, #8
10005a8c:	d014      	beq.n	10005ab8 <UART_SetConfig+0xdec>
10005a8e:	687b      	ldr	r3, [r7, #4]
10005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a92:	2b09      	cmp	r3, #9
10005a94:	d00e      	beq.n	10005ab4 <UART_SetConfig+0xde8>
10005a96:	687b      	ldr	r3, [r7, #4]
10005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005a9a:	2b0a      	cmp	r3, #10
10005a9c:	d008      	beq.n	10005ab0 <UART_SetConfig+0xde4>
10005a9e:	687b      	ldr	r3, [r7, #4]
10005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005aa2:	2b0b      	cmp	r3, #11
10005aa4:	d102      	bne.n	10005aac <UART_SetConfig+0xde0>
10005aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
10005aaa:	e016      	b.n	10005ada <UART_SetConfig+0xe0e>
10005aac:	2301      	movs	r3, #1
10005aae:	e014      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ab0:	2380      	movs	r3, #128	; 0x80
10005ab2:	e012      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ab4:	2340      	movs	r3, #64	; 0x40
10005ab6:	e010      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ab8:	2320      	movs	r3, #32
10005aba:	e00e      	b.n	10005ada <UART_SetConfig+0xe0e>
10005abc:	2310      	movs	r3, #16
10005abe:	e00c      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ac0:	230c      	movs	r3, #12
10005ac2:	e00a      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ac4:	230a      	movs	r3, #10
10005ac6:	e008      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ac8:	2308      	movs	r3, #8
10005aca:	e006      	b.n	10005ada <UART_SetConfig+0xe0e>
10005acc:	2306      	movs	r3, #6
10005ace:	e004      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ad0:	2304      	movs	r3, #4
10005ad2:	e002      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ad4:	2302      	movs	r3, #2
10005ad6:	e000      	b.n	10005ada <UART_SetConfig+0xe0e>
10005ad8:	2301      	movs	r3, #1
10005ada:	fbb2 f2f3 	udiv	r2, r2, r3
10005ade:	687b      	ldr	r3, [r7, #4]
10005ae0:	685b      	ldr	r3, [r3, #4]
10005ae2:	085b      	lsrs	r3, r3, #1
10005ae4:	441a      	add	r2, r3
10005ae6:	687b      	ldr	r3, [r7, #4]
10005ae8:	685b      	ldr	r3, [r3, #4]
10005aea:	fbb2 f3f3 	udiv	r3, r2, r3
10005aee:	b29b      	uxth	r3, r3
10005af0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005af2:	e168      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10005af4:	f107 0308 	add.w	r3, r7, #8
10005af8:	4618      	mov	r0, r3
10005afa:	f7fc fafb 	bl	100020f4 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005afe:	68fa      	ldr	r2, [r7, #12]
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b04:	2b00      	cmp	r3, #0
10005b06:	d044      	beq.n	10005b92 <UART_SetConfig+0xec6>
10005b08:	687b      	ldr	r3, [r7, #4]
10005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b0c:	2b01      	cmp	r3, #1
10005b0e:	d03e      	beq.n	10005b8e <UART_SetConfig+0xec2>
10005b10:	687b      	ldr	r3, [r7, #4]
10005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b14:	2b02      	cmp	r3, #2
10005b16:	d038      	beq.n	10005b8a <UART_SetConfig+0xebe>
10005b18:	687b      	ldr	r3, [r7, #4]
10005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b1c:	2b03      	cmp	r3, #3
10005b1e:	d032      	beq.n	10005b86 <UART_SetConfig+0xeba>
10005b20:	687b      	ldr	r3, [r7, #4]
10005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b24:	2b04      	cmp	r3, #4
10005b26:	d02c      	beq.n	10005b82 <UART_SetConfig+0xeb6>
10005b28:	687b      	ldr	r3, [r7, #4]
10005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b2c:	2b05      	cmp	r3, #5
10005b2e:	d026      	beq.n	10005b7e <UART_SetConfig+0xeb2>
10005b30:	687b      	ldr	r3, [r7, #4]
10005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b34:	2b06      	cmp	r3, #6
10005b36:	d020      	beq.n	10005b7a <UART_SetConfig+0xeae>
10005b38:	687b      	ldr	r3, [r7, #4]
10005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b3c:	2b07      	cmp	r3, #7
10005b3e:	d01a      	beq.n	10005b76 <UART_SetConfig+0xeaa>
10005b40:	687b      	ldr	r3, [r7, #4]
10005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b44:	2b08      	cmp	r3, #8
10005b46:	d014      	beq.n	10005b72 <UART_SetConfig+0xea6>
10005b48:	687b      	ldr	r3, [r7, #4]
10005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b4c:	2b09      	cmp	r3, #9
10005b4e:	d00e      	beq.n	10005b6e <UART_SetConfig+0xea2>
10005b50:	687b      	ldr	r3, [r7, #4]
10005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b54:	2b0a      	cmp	r3, #10
10005b56:	d008      	beq.n	10005b6a <UART_SetConfig+0xe9e>
10005b58:	687b      	ldr	r3, [r7, #4]
10005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005b5c:	2b0b      	cmp	r3, #11
10005b5e:	d102      	bne.n	10005b66 <UART_SetConfig+0xe9a>
10005b60:	f44f 7380 	mov.w	r3, #256	; 0x100
10005b64:	e016      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b66:	2301      	movs	r3, #1
10005b68:	e014      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b6a:	2380      	movs	r3, #128	; 0x80
10005b6c:	e012      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b6e:	2340      	movs	r3, #64	; 0x40
10005b70:	e010      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b72:	2320      	movs	r3, #32
10005b74:	e00e      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b76:	2310      	movs	r3, #16
10005b78:	e00c      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b7a:	230c      	movs	r3, #12
10005b7c:	e00a      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b7e:	230a      	movs	r3, #10
10005b80:	e008      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b82:	2308      	movs	r3, #8
10005b84:	e006      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b86:	2306      	movs	r3, #6
10005b88:	e004      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b8a:	2304      	movs	r3, #4
10005b8c:	e002      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b8e:	2302      	movs	r3, #2
10005b90:	e000      	b.n	10005b94 <UART_SetConfig+0xec8>
10005b92:	2301      	movs	r3, #1
10005b94:	fbb2 f2f3 	udiv	r2, r2, r3
10005b98:	687b      	ldr	r3, [r7, #4]
10005b9a:	685b      	ldr	r3, [r3, #4]
10005b9c:	085b      	lsrs	r3, r3, #1
10005b9e:	441a      	add	r2, r3
10005ba0:	687b      	ldr	r3, [r7, #4]
10005ba2:	685b      	ldr	r3, [r3, #4]
10005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
10005ba8:	b29b      	uxth	r3, r3
10005baa:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005bac:	e10b      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005bae:	687b      	ldr	r3, [r7, #4]
10005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bb2:	2b00      	cmp	r3, #0
10005bb4:	d044      	beq.n	10005c40 <UART_SetConfig+0xf74>
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bba:	2b01      	cmp	r3, #1
10005bbc:	d03e      	beq.n	10005c3c <UART_SetConfig+0xf70>
10005bbe:	687b      	ldr	r3, [r7, #4]
10005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bc2:	2b02      	cmp	r3, #2
10005bc4:	d038      	beq.n	10005c38 <UART_SetConfig+0xf6c>
10005bc6:	687b      	ldr	r3, [r7, #4]
10005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bca:	2b03      	cmp	r3, #3
10005bcc:	d032      	beq.n	10005c34 <UART_SetConfig+0xf68>
10005bce:	687b      	ldr	r3, [r7, #4]
10005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bd2:	2b04      	cmp	r3, #4
10005bd4:	d02c      	beq.n	10005c30 <UART_SetConfig+0xf64>
10005bd6:	687b      	ldr	r3, [r7, #4]
10005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bda:	2b05      	cmp	r3, #5
10005bdc:	d026      	beq.n	10005c2c <UART_SetConfig+0xf60>
10005bde:	687b      	ldr	r3, [r7, #4]
10005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005be2:	2b06      	cmp	r3, #6
10005be4:	d020      	beq.n	10005c28 <UART_SetConfig+0xf5c>
10005be6:	687b      	ldr	r3, [r7, #4]
10005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bea:	2b07      	cmp	r3, #7
10005bec:	d01a      	beq.n	10005c24 <UART_SetConfig+0xf58>
10005bee:	687b      	ldr	r3, [r7, #4]
10005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bf2:	2b08      	cmp	r3, #8
10005bf4:	d014      	beq.n	10005c20 <UART_SetConfig+0xf54>
10005bf6:	687b      	ldr	r3, [r7, #4]
10005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005bfa:	2b09      	cmp	r3, #9
10005bfc:	d00e      	beq.n	10005c1c <UART_SetConfig+0xf50>
10005bfe:	687b      	ldr	r3, [r7, #4]
10005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c02:	2b0a      	cmp	r3, #10
10005c04:	d008      	beq.n	10005c18 <UART_SetConfig+0xf4c>
10005c06:	687b      	ldr	r3, [r7, #4]
10005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c0a:	2b0b      	cmp	r3, #11
10005c0c:	d102      	bne.n	10005c14 <UART_SetConfig+0xf48>
10005c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
10005c12:	e016      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c14:	2301      	movs	r3, #1
10005c16:	e014      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c18:	2380      	movs	r3, #128	; 0x80
10005c1a:	e012      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c1c:	2340      	movs	r3, #64	; 0x40
10005c1e:	e010      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c20:	2320      	movs	r3, #32
10005c22:	e00e      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c24:	2310      	movs	r3, #16
10005c26:	e00c      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c28:	230c      	movs	r3, #12
10005c2a:	e00a      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c2c:	230a      	movs	r3, #10
10005c2e:	e008      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c30:	2308      	movs	r3, #8
10005c32:	e006      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c34:	2306      	movs	r3, #6
10005c36:	e004      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c38:	2304      	movs	r3, #4
10005c3a:	e002      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c3c:	2302      	movs	r3, #2
10005c3e:	e000      	b.n	10005c42 <UART_SetConfig+0xf76>
10005c40:	2301      	movs	r3, #1
10005c42:	4a72      	ldr	r2, [pc, #456]	; (10005e0c <UART_SetConfig+0x1140>)
10005c44:	fbb2 f2f3 	udiv	r2, r2, r3
10005c48:	687b      	ldr	r3, [r7, #4]
10005c4a:	685b      	ldr	r3, [r3, #4]
10005c4c:	085b      	lsrs	r3, r3, #1
10005c4e:	441a      	add	r2, r3
10005c50:	687b      	ldr	r3, [r7, #4]
10005c52:	685b      	ldr	r3, [r3, #4]
10005c54:	fbb2 f3f3 	udiv	r3, r2, r3
10005c58:	b29b      	uxth	r3, r3
10005c5a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005c5c:	e0b3      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005c5e:	687b      	ldr	r3, [r7, #4]
10005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c62:	2b00      	cmp	r3, #0
10005c64:	d044      	beq.n	10005cf0 <UART_SetConfig+0x1024>
10005c66:	687b      	ldr	r3, [r7, #4]
10005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c6a:	2b01      	cmp	r3, #1
10005c6c:	d03e      	beq.n	10005cec <UART_SetConfig+0x1020>
10005c6e:	687b      	ldr	r3, [r7, #4]
10005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c72:	2b02      	cmp	r3, #2
10005c74:	d038      	beq.n	10005ce8 <UART_SetConfig+0x101c>
10005c76:	687b      	ldr	r3, [r7, #4]
10005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c7a:	2b03      	cmp	r3, #3
10005c7c:	d032      	beq.n	10005ce4 <UART_SetConfig+0x1018>
10005c7e:	687b      	ldr	r3, [r7, #4]
10005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c82:	2b04      	cmp	r3, #4
10005c84:	d02c      	beq.n	10005ce0 <UART_SetConfig+0x1014>
10005c86:	687b      	ldr	r3, [r7, #4]
10005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c8a:	2b05      	cmp	r3, #5
10005c8c:	d026      	beq.n	10005cdc <UART_SetConfig+0x1010>
10005c8e:	687b      	ldr	r3, [r7, #4]
10005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c92:	2b06      	cmp	r3, #6
10005c94:	d020      	beq.n	10005cd8 <UART_SetConfig+0x100c>
10005c96:	687b      	ldr	r3, [r7, #4]
10005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005c9a:	2b07      	cmp	r3, #7
10005c9c:	d01a      	beq.n	10005cd4 <UART_SetConfig+0x1008>
10005c9e:	687b      	ldr	r3, [r7, #4]
10005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005ca2:	2b08      	cmp	r3, #8
10005ca4:	d014      	beq.n	10005cd0 <UART_SetConfig+0x1004>
10005ca6:	687b      	ldr	r3, [r7, #4]
10005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005caa:	2b09      	cmp	r3, #9
10005cac:	d00e      	beq.n	10005ccc <UART_SetConfig+0x1000>
10005cae:	687b      	ldr	r3, [r7, #4]
10005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005cb2:	2b0a      	cmp	r3, #10
10005cb4:	d008      	beq.n	10005cc8 <UART_SetConfig+0xffc>
10005cb6:	687b      	ldr	r3, [r7, #4]
10005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005cba:	2b0b      	cmp	r3, #11
10005cbc:	d102      	bne.n	10005cc4 <UART_SetConfig+0xff8>
10005cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
10005cc2:	e016      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cc4:	2301      	movs	r3, #1
10005cc6:	e014      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cc8:	2380      	movs	r3, #128	; 0x80
10005cca:	e012      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005ccc:	2340      	movs	r3, #64	; 0x40
10005cce:	e010      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cd0:	2320      	movs	r3, #32
10005cd2:	e00e      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cd4:	2310      	movs	r3, #16
10005cd6:	e00c      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cd8:	230c      	movs	r3, #12
10005cda:	e00a      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cdc:	230a      	movs	r3, #10
10005cde:	e008      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005ce0:	2308      	movs	r3, #8
10005ce2:	e006      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005ce4:	2306      	movs	r3, #6
10005ce6:	e004      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005ce8:	2304      	movs	r3, #4
10005cea:	e002      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cec:	2302      	movs	r3, #2
10005cee:	e000      	b.n	10005cf2 <UART_SetConfig+0x1026>
10005cf0:	2301      	movs	r3, #1
10005cf2:	4a47      	ldr	r2, [pc, #284]	; (10005e10 <UART_SetConfig+0x1144>)
10005cf4:	fbb2 f2f3 	udiv	r2, r2, r3
10005cf8:	687b      	ldr	r3, [r7, #4]
10005cfa:	685b      	ldr	r3, [r3, #4]
10005cfc:	085b      	lsrs	r3, r3, #1
10005cfe:	441a      	add	r2, r3
10005d00:	687b      	ldr	r3, [r7, #4]
10005d02:	685b      	ldr	r3, [r3, #4]
10005d04:	fbb2 f3f3 	udiv	r3, r2, r3
10005d08:	b29b      	uxth	r3, r3
10005d0a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005d0c:	e05b      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005d0e:	687b      	ldr	r3, [r7, #4]
10005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d12:	2b00      	cmp	r3, #0
10005d14:	d044      	beq.n	10005da0 <UART_SetConfig+0x10d4>
10005d16:	687b      	ldr	r3, [r7, #4]
10005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d1a:	2b01      	cmp	r3, #1
10005d1c:	d03e      	beq.n	10005d9c <UART_SetConfig+0x10d0>
10005d1e:	687b      	ldr	r3, [r7, #4]
10005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d22:	2b02      	cmp	r3, #2
10005d24:	d038      	beq.n	10005d98 <UART_SetConfig+0x10cc>
10005d26:	687b      	ldr	r3, [r7, #4]
10005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d2a:	2b03      	cmp	r3, #3
10005d2c:	d032      	beq.n	10005d94 <UART_SetConfig+0x10c8>
10005d2e:	687b      	ldr	r3, [r7, #4]
10005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d32:	2b04      	cmp	r3, #4
10005d34:	d02c      	beq.n	10005d90 <UART_SetConfig+0x10c4>
10005d36:	687b      	ldr	r3, [r7, #4]
10005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d3a:	2b05      	cmp	r3, #5
10005d3c:	d026      	beq.n	10005d8c <UART_SetConfig+0x10c0>
10005d3e:	687b      	ldr	r3, [r7, #4]
10005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d42:	2b06      	cmp	r3, #6
10005d44:	d020      	beq.n	10005d88 <UART_SetConfig+0x10bc>
10005d46:	687b      	ldr	r3, [r7, #4]
10005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d4a:	2b07      	cmp	r3, #7
10005d4c:	d01a      	beq.n	10005d84 <UART_SetConfig+0x10b8>
10005d4e:	687b      	ldr	r3, [r7, #4]
10005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d52:	2b08      	cmp	r3, #8
10005d54:	d014      	beq.n	10005d80 <UART_SetConfig+0x10b4>
10005d56:	687b      	ldr	r3, [r7, #4]
10005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d5a:	2b09      	cmp	r3, #9
10005d5c:	d00e      	beq.n	10005d7c <UART_SetConfig+0x10b0>
10005d5e:	687b      	ldr	r3, [r7, #4]
10005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d62:	2b0a      	cmp	r3, #10
10005d64:	d008      	beq.n	10005d78 <UART_SetConfig+0x10ac>
10005d66:	687b      	ldr	r3, [r7, #4]
10005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005d6a:	2b0b      	cmp	r3, #11
10005d6c:	d102      	bne.n	10005d74 <UART_SetConfig+0x10a8>
10005d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
10005d72:	e016      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d74:	2301      	movs	r3, #1
10005d76:	e014      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d78:	2380      	movs	r3, #128	; 0x80
10005d7a:	e012      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d7c:	2340      	movs	r3, #64	; 0x40
10005d7e:	e010      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d80:	2320      	movs	r3, #32
10005d82:	e00e      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d84:	2310      	movs	r3, #16
10005d86:	e00c      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d88:	230c      	movs	r3, #12
10005d8a:	e00a      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d8c:	230a      	movs	r3, #10
10005d8e:	e008      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d90:	2308      	movs	r3, #8
10005d92:	e006      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d94:	2306      	movs	r3, #6
10005d96:	e004      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d98:	2304      	movs	r3, #4
10005d9a:	e002      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005d9c:	2302      	movs	r3, #2
10005d9e:	e000      	b.n	10005da2 <UART_SetConfig+0x10d6>
10005da0:	2301      	movs	r3, #1
10005da2:	4a1c      	ldr	r2, [pc, #112]	; (10005e14 <UART_SetConfig+0x1148>)
10005da4:	fbb2 f2f3 	udiv	r2, r2, r3
10005da8:	687b      	ldr	r3, [r7, #4]
10005daa:	685b      	ldr	r3, [r3, #4]
10005dac:	085b      	lsrs	r3, r3, #1
10005dae:	441a      	add	r2, r3
10005db0:	687b      	ldr	r3, [r7, #4]
10005db2:	685b      	ldr	r3, [r3, #4]
10005db4:	fbb2 f3f3 	udiv	r3, r2, r3
10005db8:	b29b      	uxth	r3, r3
10005dba:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005dbc:	e003      	b.n	10005dc6 <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
10005dbe:	2301      	movs	r3, #1
10005dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10005dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005dc8:	2b0f      	cmp	r3, #15
10005dca:	d908      	bls.n	10005dde <UART_SetConfig+0x1112>
10005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10005dd2:	d204      	bcs.n	10005dde <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
10005dd4:	687b      	ldr	r3, [r7, #4]
10005dd6:	681b      	ldr	r3, [r3, #0]
10005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10005dda:	60da      	str	r2, [r3, #12]
10005ddc:	e002      	b.n	10005de4 <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10005dde:	2301      	movs	r3, #1
10005de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10005de4:	687b      	ldr	r3, [r7, #4]
10005de6:	2201      	movs	r2, #1
10005de8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
10005dec:	687b      	ldr	r3, [r7, #4]
10005dee:	2201      	movs	r2, #1
10005df0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10005df4:	687b      	ldr	r3, [r7, #4]
10005df6:	2200      	movs	r2, #0
10005df8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
10005dfa:	687b      	ldr	r3, [r7, #4]
10005dfc:	2200      	movs	r2, #0
10005dfe:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
10005e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
10005e04:	4618      	mov	r0, r3
10005e06:	3738      	adds	r7, #56	; 0x38
10005e08:	46bd      	mov	sp, r7
10005e0a:	bd80      	pop	{r7, pc}
10005e0c:	03d09000 	.word	0x03d09000
10005e10:	003d0900 	.word	0x003d0900
10005e14:	016e3600 	.word	0x016e3600

10005e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10005e18:	b480      	push	{r7}
10005e1a:	b083      	sub	sp, #12
10005e1c:	af00      	add	r7, sp, #0
10005e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10005e20:	687b      	ldr	r3, [r7, #4]
10005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005e24:	f003 0301 	and.w	r3, r3, #1
10005e28:	2b00      	cmp	r3, #0
10005e2a:	d00a      	beq.n	10005e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10005e2c:	687b      	ldr	r3, [r7, #4]
10005e2e:	681b      	ldr	r3, [r3, #0]
10005e30:	685b      	ldr	r3, [r3, #4]
10005e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
10005e36:	687b      	ldr	r3, [r7, #4]
10005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10005e3a:	687b      	ldr	r3, [r7, #4]
10005e3c:	681b      	ldr	r3, [r3, #0]
10005e3e:	430a      	orrs	r2, r1
10005e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10005e42:	687b      	ldr	r3, [r7, #4]
10005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005e46:	f003 0302 	and.w	r3, r3, #2
10005e4a:	2b00      	cmp	r3, #0
10005e4c:	d00a      	beq.n	10005e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10005e4e:	687b      	ldr	r3, [r7, #4]
10005e50:	681b      	ldr	r3, [r3, #0]
10005e52:	685b      	ldr	r3, [r3, #4]
10005e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
10005e58:	687b      	ldr	r3, [r7, #4]
10005e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10005e5c:	687b      	ldr	r3, [r7, #4]
10005e5e:	681b      	ldr	r3, [r3, #0]
10005e60:	430a      	orrs	r2, r1
10005e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10005e64:	687b      	ldr	r3, [r7, #4]
10005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005e68:	f003 0304 	and.w	r3, r3, #4
10005e6c:	2b00      	cmp	r3, #0
10005e6e:	d00a      	beq.n	10005e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10005e70:	687b      	ldr	r3, [r7, #4]
10005e72:	681b      	ldr	r3, [r3, #0]
10005e74:	685b      	ldr	r3, [r3, #4]
10005e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
10005e7a:	687b      	ldr	r3, [r7, #4]
10005e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005e7e:	687b      	ldr	r3, [r7, #4]
10005e80:	681b      	ldr	r3, [r3, #0]
10005e82:	430a      	orrs	r2, r1
10005e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10005e86:	687b      	ldr	r3, [r7, #4]
10005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005e8a:	f003 0308 	and.w	r3, r3, #8
10005e8e:	2b00      	cmp	r3, #0
10005e90:	d00a      	beq.n	10005ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10005e92:	687b      	ldr	r3, [r7, #4]
10005e94:	681b      	ldr	r3, [r3, #0]
10005e96:	685b      	ldr	r3, [r3, #4]
10005e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
10005e9c:	687b      	ldr	r3, [r7, #4]
10005e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10005ea0:	687b      	ldr	r3, [r7, #4]
10005ea2:	681b      	ldr	r3, [r3, #0]
10005ea4:	430a      	orrs	r2, r1
10005ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10005ea8:	687b      	ldr	r3, [r7, #4]
10005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005eac:	f003 0310 	and.w	r3, r3, #16
10005eb0:	2b00      	cmp	r3, #0
10005eb2:	d00a      	beq.n	10005eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10005eb4:	687b      	ldr	r3, [r7, #4]
10005eb6:	681b      	ldr	r3, [r3, #0]
10005eb8:	689b      	ldr	r3, [r3, #8]
10005eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
10005ebe:	687b      	ldr	r3, [r7, #4]
10005ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005ec2:	687b      	ldr	r3, [r7, #4]
10005ec4:	681b      	ldr	r3, [r3, #0]
10005ec6:	430a      	orrs	r2, r1
10005ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10005eca:	687b      	ldr	r3, [r7, #4]
10005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005ece:	f003 0320 	and.w	r3, r3, #32
10005ed2:	2b00      	cmp	r3, #0
10005ed4:	d00a      	beq.n	10005eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10005ed6:	687b      	ldr	r3, [r7, #4]
10005ed8:	681b      	ldr	r3, [r3, #0]
10005eda:	689b      	ldr	r3, [r3, #8]
10005edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
10005ee0:	687b      	ldr	r3, [r7, #4]
10005ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005ee4:	687b      	ldr	r3, [r7, #4]
10005ee6:	681b      	ldr	r3, [r3, #0]
10005ee8:	430a      	orrs	r2, r1
10005eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10005eec:	687b      	ldr	r3, [r7, #4]
10005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
10005ef4:	2b00      	cmp	r3, #0
10005ef6:	d01a      	beq.n	10005f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10005ef8:	687b      	ldr	r3, [r7, #4]
10005efa:	681b      	ldr	r3, [r3, #0]
10005efc:	685b      	ldr	r3, [r3, #4]
10005efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
10005f02:	687b      	ldr	r3, [r7, #4]
10005f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10005f06:	687b      	ldr	r3, [r7, #4]
10005f08:	681b      	ldr	r3, [r3, #0]
10005f0a:	430a      	orrs	r2, r1
10005f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10005f0e:	687b      	ldr	r3, [r7, #4]
10005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10005f16:	d10a      	bne.n	10005f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10005f18:	687b      	ldr	r3, [r7, #4]
10005f1a:	681b      	ldr	r3, [r3, #0]
10005f1c:	685b      	ldr	r3, [r3, #4]
10005f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
10005f22:	687b      	ldr	r3, [r7, #4]
10005f24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10005f26:	687b      	ldr	r3, [r7, #4]
10005f28:	681b      	ldr	r3, [r3, #0]
10005f2a:	430a      	orrs	r2, r1
10005f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10005f2e:	687b      	ldr	r3, [r7, #4]
10005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
10005f36:	2b00      	cmp	r3, #0
10005f38:	d00a      	beq.n	10005f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10005f3a:	687b      	ldr	r3, [r7, #4]
10005f3c:	681b      	ldr	r3, [r3, #0]
10005f3e:	685b      	ldr	r3, [r3, #4]
10005f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
10005f44:	687b      	ldr	r3, [r7, #4]
10005f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10005f48:	687b      	ldr	r3, [r7, #4]
10005f4a:	681b      	ldr	r3, [r3, #0]
10005f4c:	430a      	orrs	r2, r1
10005f4e:	605a      	str	r2, [r3, #4]
  }
}
10005f50:	bf00      	nop
10005f52:	370c      	adds	r7, #12
10005f54:	46bd      	mov	sp, r7
10005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
10005f5a:	4770      	bx	lr

10005f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10005f5c:	b580      	push	{r7, lr}
10005f5e:	b086      	sub	sp, #24
10005f60:	af02      	add	r7, sp, #8
10005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10005f64:	687b      	ldr	r3, [r7, #4]
10005f66:	2200      	movs	r2, #0
10005f68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
10005f6c:	f7fa fbae 	bl	100006cc <HAL_GetTick>
10005f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10005f72:	687b      	ldr	r3, [r7, #4]
10005f74:	681b      	ldr	r3, [r3, #0]
10005f76:	681b      	ldr	r3, [r3, #0]
10005f78:	f003 0308 	and.w	r3, r3, #8
10005f7c:	2b08      	cmp	r3, #8
10005f7e:	d10e      	bne.n	10005f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10005f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10005f84:	9300      	str	r3, [sp, #0]
10005f86:	68fb      	ldr	r3, [r7, #12]
10005f88:	2200      	movs	r2, #0
10005f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
10005f8e:	6878      	ldr	r0, [r7, #4]
10005f90:	f000 f82c 	bl	10005fec <UART_WaitOnFlagUntilTimeout>
10005f94:	4603      	mov	r3, r0
10005f96:	2b00      	cmp	r3, #0
10005f98:	d001      	beq.n	10005f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10005f9a:	2303      	movs	r3, #3
10005f9c:	e022      	b.n	10005fe4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10005f9e:	687b      	ldr	r3, [r7, #4]
10005fa0:	681b      	ldr	r3, [r3, #0]
10005fa2:	681b      	ldr	r3, [r3, #0]
10005fa4:	f003 0304 	and.w	r3, r3, #4
10005fa8:	2b04      	cmp	r3, #4
10005faa:	d10e      	bne.n	10005fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10005fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10005fb0:	9300      	str	r3, [sp, #0]
10005fb2:	68fb      	ldr	r3, [r7, #12]
10005fb4:	2200      	movs	r2, #0
10005fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10005fba:	6878      	ldr	r0, [r7, #4]
10005fbc:	f000 f816 	bl	10005fec <UART_WaitOnFlagUntilTimeout>
10005fc0:	4603      	mov	r3, r0
10005fc2:	2b00      	cmp	r3, #0
10005fc4:	d001      	beq.n	10005fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10005fc6:	2303      	movs	r3, #3
10005fc8:	e00c      	b.n	10005fe4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10005fca:	687b      	ldr	r3, [r7, #4]
10005fcc:	2220      	movs	r2, #32
10005fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
10005fd2:	687b      	ldr	r3, [r7, #4]
10005fd4:	2220      	movs	r2, #32
10005fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
10005fda:	687b      	ldr	r3, [r7, #4]
10005fdc:	2200      	movs	r2, #0
10005fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10005fe2:	2300      	movs	r3, #0
}
10005fe4:	4618      	mov	r0, r3
10005fe6:	3710      	adds	r7, #16
10005fe8:	46bd      	mov	sp, r7
10005fea:	bd80      	pop	{r7, pc}

10005fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10005fec:	b580      	push	{r7, lr}
10005fee:	b084      	sub	sp, #16
10005ff0:	af00      	add	r7, sp, #0
10005ff2:	60f8      	str	r0, [r7, #12]
10005ff4:	60b9      	str	r1, [r7, #8]
10005ff6:	603b      	str	r3, [r7, #0]
10005ff8:	4613      	mov	r3, r2
10005ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10005ffc:	e062      	b.n	100060c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10005ffe:	69bb      	ldr	r3, [r7, #24]
10006000:	f1b3 3fff 	cmp.w	r3, #4294967295
10006004:	d05e      	beq.n	100060c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10006006:	f7fa fb61 	bl	100006cc <HAL_GetTick>
1000600a:	4602      	mov	r2, r0
1000600c:	683b      	ldr	r3, [r7, #0]
1000600e:	1ad3      	subs	r3, r2, r3
10006010:	69ba      	ldr	r2, [r7, #24]
10006012:	429a      	cmp	r2, r3
10006014:	d302      	bcc.n	1000601c <UART_WaitOnFlagUntilTimeout+0x30>
10006016:	69bb      	ldr	r3, [r7, #24]
10006018:	2b00      	cmp	r3, #0
1000601a:	d11d      	bne.n	10006058 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
1000601c:	68fb      	ldr	r3, [r7, #12]
1000601e:	681b      	ldr	r3, [r3, #0]
10006020:	681a      	ldr	r2, [r3, #0]
10006022:	68fb      	ldr	r3, [r7, #12]
10006024:	681b      	ldr	r3, [r3, #0]
10006026:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000602a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1000602c:	68fb      	ldr	r3, [r7, #12]
1000602e:	681b      	ldr	r3, [r3, #0]
10006030:	689a      	ldr	r2, [r3, #8]
10006032:	68fb      	ldr	r3, [r7, #12]
10006034:	681b      	ldr	r3, [r3, #0]
10006036:	f022 0201 	bic.w	r2, r2, #1
1000603a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
1000603c:	68fb      	ldr	r3, [r7, #12]
1000603e:	2220      	movs	r2, #32
10006040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
10006044:	68fb      	ldr	r3, [r7, #12]
10006046:	2220      	movs	r2, #32
10006048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
1000604c:	68fb      	ldr	r3, [r7, #12]
1000604e:	2200      	movs	r2, #0
10006050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
10006054:	2303      	movs	r3, #3
10006056:	e045      	b.n	100060e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
10006058:	68fb      	ldr	r3, [r7, #12]
1000605a:	681b      	ldr	r3, [r3, #0]
1000605c:	681b      	ldr	r3, [r3, #0]
1000605e:	f003 0304 	and.w	r3, r3, #4
10006062:	2b00      	cmp	r3, #0
10006064:	d02e      	beq.n	100060c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10006066:	68fb      	ldr	r3, [r7, #12]
10006068:	681b      	ldr	r3, [r3, #0]
1000606a:	69db      	ldr	r3, [r3, #28]
1000606c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
10006070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
10006074:	d126      	bne.n	100060c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10006076:	68fb      	ldr	r3, [r7, #12]
10006078:	681b      	ldr	r3, [r3, #0]
1000607a:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000607e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10006080:	68fb      	ldr	r3, [r7, #12]
10006082:	681b      	ldr	r3, [r3, #0]
10006084:	681a      	ldr	r2, [r3, #0]
10006086:	68fb      	ldr	r3, [r7, #12]
10006088:	681b      	ldr	r3, [r3, #0]
1000608a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
1000608e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10006090:	68fb      	ldr	r3, [r7, #12]
10006092:	681b      	ldr	r3, [r3, #0]
10006094:	689a      	ldr	r2, [r3, #8]
10006096:	68fb      	ldr	r3, [r7, #12]
10006098:	681b      	ldr	r3, [r3, #0]
1000609a:	f022 0201 	bic.w	r2, r2, #1
1000609e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
100060a0:	68fb      	ldr	r3, [r7, #12]
100060a2:	2220      	movs	r2, #32
100060a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
100060a8:	68fb      	ldr	r3, [r7, #12]
100060aa:	2220      	movs	r2, #32
100060ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
100060b0:	68fb      	ldr	r3, [r7, #12]
100060b2:	2220      	movs	r2, #32
100060b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
100060b8:	68fb      	ldr	r3, [r7, #12]
100060ba:	2200      	movs	r2, #0
100060bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
100060c0:	2303      	movs	r3, #3
100060c2:	e00f      	b.n	100060e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100060c4:	68fb      	ldr	r3, [r7, #12]
100060c6:	681b      	ldr	r3, [r3, #0]
100060c8:	69da      	ldr	r2, [r3, #28]
100060ca:	68bb      	ldr	r3, [r7, #8]
100060cc:	4013      	ands	r3, r2
100060ce:	68ba      	ldr	r2, [r7, #8]
100060d0:	429a      	cmp	r2, r3
100060d2:	bf0c      	ite	eq
100060d4:	2301      	moveq	r3, #1
100060d6:	2300      	movne	r3, #0
100060d8:	b2db      	uxtb	r3, r3
100060da:	461a      	mov	r2, r3
100060dc:	79fb      	ldrb	r3, [r7, #7]
100060de:	429a      	cmp	r2, r3
100060e0:	d08d      	beq.n	10005ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
100060e2:	2300      	movs	r3, #0
}
100060e4:	4618      	mov	r0, r3
100060e6:	3710      	adds	r7, #16
100060e8:	46bd      	mov	sp, r7
100060ea:	bd80      	pop	{r7, pc}

100060ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
100060ec:	b480      	push	{r7}
100060ee:	b085      	sub	sp, #20
100060f0:	af00      	add	r7, sp, #0
100060f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
100060f4:	687b      	ldr	r3, [r7, #4]
100060f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
100060fa:	2b01      	cmp	r3, #1
100060fc:	d101      	bne.n	10006102 <HAL_UARTEx_DisableFifoMode+0x16>
100060fe:	2302      	movs	r3, #2
10006100:	e027      	b.n	10006152 <HAL_UARTEx_DisableFifoMode+0x66>
10006102:	687b      	ldr	r3, [r7, #4]
10006104:	2201      	movs	r2, #1
10006106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000610a:	687b      	ldr	r3, [r7, #4]
1000610c:	2224      	movs	r2, #36	; 0x24
1000610e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006112:	687b      	ldr	r3, [r7, #4]
10006114:	681b      	ldr	r3, [r3, #0]
10006116:	681b      	ldr	r3, [r3, #0]
10006118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000611a:	687b      	ldr	r3, [r7, #4]
1000611c:	681b      	ldr	r3, [r3, #0]
1000611e:	681a      	ldr	r2, [r3, #0]
10006120:	687b      	ldr	r3, [r7, #4]
10006122:	681b      	ldr	r3, [r3, #0]
10006124:	f022 0201 	bic.w	r2, r2, #1
10006128:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1000612a:	68fb      	ldr	r3, [r7, #12]
1000612c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
10006130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10006132:	687b      	ldr	r3, [r7, #4]
10006134:	2200      	movs	r2, #0
10006136:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10006138:	687b      	ldr	r3, [r7, #4]
1000613a:	681b      	ldr	r3, [r3, #0]
1000613c:	68fa      	ldr	r2, [r7, #12]
1000613e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10006140:	687b      	ldr	r3, [r7, #4]
10006142:	2220      	movs	r2, #32
10006144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10006148:	687b      	ldr	r3, [r7, #4]
1000614a:	2200      	movs	r2, #0
1000614c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10006150:	2300      	movs	r3, #0
}
10006152:	4618      	mov	r0, r3
10006154:	3714      	adds	r7, #20
10006156:	46bd      	mov	sp, r7
10006158:	f85d 7b04 	ldr.w	r7, [sp], #4
1000615c:	4770      	bx	lr

1000615e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1000615e:	b580      	push	{r7, lr}
10006160:	b084      	sub	sp, #16
10006162:	af00      	add	r7, sp, #0
10006164:	6078      	str	r0, [r7, #4]
10006166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10006168:	687b      	ldr	r3, [r7, #4]
1000616a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
1000616e:	2b01      	cmp	r3, #1
10006170:	d101      	bne.n	10006176 <HAL_UARTEx_SetTxFifoThreshold+0x18>
10006172:	2302      	movs	r3, #2
10006174:	e02d      	b.n	100061d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
10006176:	687b      	ldr	r3, [r7, #4]
10006178:	2201      	movs	r2, #1
1000617a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
1000617e:	687b      	ldr	r3, [r7, #4]
10006180:	2224      	movs	r2, #36	; 0x24
10006182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006186:	687b      	ldr	r3, [r7, #4]
10006188:	681b      	ldr	r3, [r3, #0]
1000618a:	681b      	ldr	r3, [r3, #0]
1000618c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000618e:	687b      	ldr	r3, [r7, #4]
10006190:	681b      	ldr	r3, [r3, #0]
10006192:	681a      	ldr	r2, [r3, #0]
10006194:	687b      	ldr	r3, [r7, #4]
10006196:	681b      	ldr	r3, [r3, #0]
10006198:	f022 0201 	bic.w	r2, r2, #1
1000619c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1000619e:	687b      	ldr	r3, [r7, #4]
100061a0:	681b      	ldr	r3, [r3, #0]
100061a2:	689b      	ldr	r3, [r3, #8]
100061a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
100061a8:	687b      	ldr	r3, [r7, #4]
100061aa:	681b      	ldr	r3, [r3, #0]
100061ac:	683a      	ldr	r2, [r7, #0]
100061ae:	430a      	orrs	r2, r1
100061b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100061b2:	6878      	ldr	r0, [r7, #4]
100061b4:	f000 f850 	bl	10006258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100061b8:	687b      	ldr	r3, [r7, #4]
100061ba:	681b      	ldr	r3, [r3, #0]
100061bc:	68fa      	ldr	r2, [r7, #12]
100061be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100061c0:	687b      	ldr	r3, [r7, #4]
100061c2:	2220      	movs	r2, #32
100061c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100061c8:	687b      	ldr	r3, [r7, #4]
100061ca:	2200      	movs	r2, #0
100061cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
100061d0:	2300      	movs	r3, #0
}
100061d2:	4618      	mov	r0, r3
100061d4:	3710      	adds	r7, #16
100061d6:	46bd      	mov	sp, r7
100061d8:	bd80      	pop	{r7, pc}

100061da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100061da:	b580      	push	{r7, lr}
100061dc:	b084      	sub	sp, #16
100061de:	af00      	add	r7, sp, #0
100061e0:	6078      	str	r0, [r7, #4]
100061e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100061e4:	687b      	ldr	r3, [r7, #4]
100061e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
100061ea:	2b01      	cmp	r3, #1
100061ec:	d101      	bne.n	100061f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
100061ee:	2302      	movs	r3, #2
100061f0:	e02d      	b.n	1000624e <HAL_UARTEx_SetRxFifoThreshold+0x74>
100061f2:	687b      	ldr	r3, [r7, #4]
100061f4:	2201      	movs	r2, #1
100061f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
100061fa:	687b      	ldr	r3, [r7, #4]
100061fc:	2224      	movs	r2, #36	; 0x24
100061fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10006202:	687b      	ldr	r3, [r7, #4]
10006204:	681b      	ldr	r3, [r3, #0]
10006206:	681b      	ldr	r3, [r3, #0]
10006208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1000620a:	687b      	ldr	r3, [r7, #4]
1000620c:	681b      	ldr	r3, [r3, #0]
1000620e:	681a      	ldr	r2, [r3, #0]
10006210:	687b      	ldr	r3, [r7, #4]
10006212:	681b      	ldr	r3, [r3, #0]
10006214:	f022 0201 	bic.w	r2, r2, #1
10006218:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1000621a:	687b      	ldr	r3, [r7, #4]
1000621c:	681b      	ldr	r3, [r3, #0]
1000621e:	689b      	ldr	r3, [r3, #8]
10006220:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
10006224:	687b      	ldr	r3, [r7, #4]
10006226:	681b      	ldr	r3, [r3, #0]
10006228:	683a      	ldr	r2, [r7, #0]
1000622a:	430a      	orrs	r2, r1
1000622c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000622e:	6878      	ldr	r0, [r7, #4]
10006230:	f000 f812 	bl	10006258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10006234:	687b      	ldr	r3, [r7, #4]
10006236:	681b      	ldr	r3, [r3, #0]
10006238:	68fa      	ldr	r2, [r7, #12]
1000623a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1000623c:	687b      	ldr	r3, [r7, #4]
1000623e:	2220      	movs	r2, #32
10006240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10006244:	687b      	ldr	r3, [r7, #4]
10006246:	2200      	movs	r2, #0
10006248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
1000624c:	2300      	movs	r3, #0
}
1000624e:	4618      	mov	r0, r3
10006250:	3710      	adds	r7, #16
10006252:	46bd      	mov	sp, r7
10006254:	bd80      	pop	{r7, pc}
	...

10006258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10006258:	b480      	push	{r7}
1000625a:	b089      	sub	sp, #36	; 0x24
1000625c:	af00      	add	r7, sp, #0
1000625e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
10006260:	4a2d      	ldr	r2, [pc, #180]	; (10006318 <UARTEx_SetNbDataToProcess+0xc0>)
10006262:	f107 0314 	add.w	r3, r7, #20
10006266:	e892 0003 	ldmia.w	r2, {r0, r1}
1000626a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
1000626e:	4a2b      	ldr	r2, [pc, #172]	; (1000631c <UARTEx_SetNbDataToProcess+0xc4>)
10006270:	f107 030c 	add.w	r3, r7, #12
10006274:	e892 0003 	ldmia.w	r2, {r0, r1}
10006278:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1000627c:	687b      	ldr	r3, [r7, #4]
1000627e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10006280:	2b00      	cmp	r3, #0
10006282:	d108      	bne.n	10006296 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
10006284:	687b      	ldr	r3, [r7, #4]
10006286:	2201      	movs	r2, #1
10006288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
1000628c:	687b      	ldr	r3, [r7, #4]
1000628e:	2201      	movs	r2, #1
10006290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
10006294:	e039      	b.n	1000630a <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
10006296:	2308      	movs	r3, #8
10006298:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
1000629a:	2308      	movs	r3, #8
1000629c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1000629e:	687b      	ldr	r3, [r7, #4]
100062a0:	681b      	ldr	r3, [r3, #0]
100062a2:	689b      	ldr	r3, [r3, #8]
100062a4:	0e5b      	lsrs	r3, r3, #25
100062a6:	b2db      	uxtb	r3, r3
100062a8:	f003 0307 	and.w	r3, r3, #7
100062ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
100062ae:	687b      	ldr	r3, [r7, #4]
100062b0:	681b      	ldr	r3, [r3, #0]
100062b2:	689b      	ldr	r3, [r3, #8]
100062b4:	0f5b      	lsrs	r3, r3, #29
100062b6:	b2db      	uxtb	r3, r3
100062b8:	f003 0307 	and.w	r3, r3, #7
100062bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
100062be:	7fbb      	ldrb	r3, [r7, #30]
100062c0:	7f3a      	ldrb	r2, [r7, #28]
100062c2:	3220      	adds	r2, #32
100062c4:	443a      	add	r2, r7
100062c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
100062ca:	fb02 f303 	mul.w	r3, r2, r3
100062ce:	7f3a      	ldrb	r2, [r7, #28]
100062d0:	3220      	adds	r2, #32
100062d2:	443a      	add	r2, r7
100062d4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
100062d8:	fb93 f3f2 	sdiv	r3, r3, r2
100062dc:	b29a      	uxth	r2, r3
100062de:	687b      	ldr	r3, [r7, #4]
100062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
100062e4:	7ffb      	ldrb	r3, [r7, #31]
100062e6:	7f7a      	ldrb	r2, [r7, #29]
100062e8:	3220      	adds	r2, #32
100062ea:	443a      	add	r2, r7
100062ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
100062f0:	fb02 f303 	mul.w	r3, r2, r3
100062f4:	7f7a      	ldrb	r2, [r7, #29]
100062f6:	3220      	adds	r2, #32
100062f8:	443a      	add	r2, r7
100062fa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
100062fe:	fb93 f3f2 	sdiv	r3, r3, r2
10006302:	b29a      	uxth	r2, r3
10006304:	687b      	ldr	r3, [r7, #4]
10006306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
1000630a:	bf00      	nop
1000630c:	3724      	adds	r7, #36	; 0x24
1000630e:	46bd      	mov	sp, r7
10006310:	f85d 7b04 	ldr.w	r7, [sp], #4
10006314:	4770      	bx	lr
10006316:	bf00      	nop
10006318:	10006d04 	.word	0x10006d04
1000631c:	10006d0c 	.word	0x10006d0c

10006320 <std>:
10006320:	2300      	movs	r3, #0
10006322:	b510      	push	{r4, lr}
10006324:	4604      	mov	r4, r0
10006326:	e9c0 3300 	strd	r3, r3, [r0]
1000632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000632e:	6083      	str	r3, [r0, #8]
10006330:	8181      	strh	r1, [r0, #12]
10006332:	6643      	str	r3, [r0, #100]	; 0x64
10006334:	81c2      	strh	r2, [r0, #14]
10006336:	6183      	str	r3, [r0, #24]
10006338:	4619      	mov	r1, r3
1000633a:	2208      	movs	r2, #8
1000633c:	305c      	adds	r0, #92	; 0x5c
1000633e:	f000 f9e5 	bl	1000670c <memset>
10006342:	4b0d      	ldr	r3, [pc, #52]	; (10006378 <std+0x58>)
10006344:	6263      	str	r3, [r4, #36]	; 0x24
10006346:	4b0d      	ldr	r3, [pc, #52]	; (1000637c <std+0x5c>)
10006348:	62a3      	str	r3, [r4, #40]	; 0x28
1000634a:	4b0d      	ldr	r3, [pc, #52]	; (10006380 <std+0x60>)
1000634c:	62e3      	str	r3, [r4, #44]	; 0x2c
1000634e:	4b0d      	ldr	r3, [pc, #52]	; (10006384 <std+0x64>)
10006350:	6323      	str	r3, [r4, #48]	; 0x30
10006352:	4b0d      	ldr	r3, [pc, #52]	; (10006388 <std+0x68>)
10006354:	6224      	str	r4, [r4, #32]
10006356:	429c      	cmp	r4, r3
10006358:	d006      	beq.n	10006368 <std+0x48>
1000635a:	f103 0268 	add.w	r2, r3, #104	; 0x68
1000635e:	4294      	cmp	r4, r2
10006360:	d002      	beq.n	10006368 <std+0x48>
10006362:	33d0      	adds	r3, #208	; 0xd0
10006364:	429c      	cmp	r4, r3
10006366:	d105      	bne.n	10006374 <std+0x54>
10006368:	f104 0058 	add.w	r0, r4, #88	; 0x58
1000636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006370:	f000 ba44 	b.w	100067fc <__retarget_lock_init_recursive>
10006374:	bd10      	pop	{r4, pc}
10006376:	bf00      	nop
10006378:	1000655d 	.word	0x1000655d
1000637c:	1000657f 	.word	0x1000657f
10006380:	100065b7 	.word	0x100065b7
10006384:	100065db 	.word	0x100065db
10006388:	10020120 	.word	0x10020120

1000638c <stdio_exit_handler>:
1000638c:	4a02      	ldr	r2, [pc, #8]	; (10006398 <stdio_exit_handler+0xc>)
1000638e:	4903      	ldr	r1, [pc, #12]	; (1000639c <stdio_exit_handler+0x10>)
10006390:	4803      	ldr	r0, [pc, #12]	; (100063a0 <stdio_exit_handler+0x14>)
10006392:	f000 b869 	b.w	10006468 <_fwalk_sglue>
10006396:	bf00      	nop
10006398:	1002000c 	.word	0x1002000c
1000639c:	10006b01 	.word	0x10006b01
100063a0:	10020018 	.word	0x10020018

100063a4 <cleanup_stdio>:
100063a4:	6841      	ldr	r1, [r0, #4]
100063a6:	4b0c      	ldr	r3, [pc, #48]	; (100063d8 <cleanup_stdio+0x34>)
100063a8:	4299      	cmp	r1, r3
100063aa:	b510      	push	{r4, lr}
100063ac:	4604      	mov	r4, r0
100063ae:	d001      	beq.n	100063b4 <cleanup_stdio+0x10>
100063b0:	f000 fba6 	bl	10006b00 <_fflush_r>
100063b4:	68a1      	ldr	r1, [r4, #8]
100063b6:	4b09      	ldr	r3, [pc, #36]	; (100063dc <cleanup_stdio+0x38>)
100063b8:	4299      	cmp	r1, r3
100063ba:	d002      	beq.n	100063c2 <cleanup_stdio+0x1e>
100063bc:	4620      	mov	r0, r4
100063be:	f000 fb9f 	bl	10006b00 <_fflush_r>
100063c2:	68e1      	ldr	r1, [r4, #12]
100063c4:	4b06      	ldr	r3, [pc, #24]	; (100063e0 <cleanup_stdio+0x3c>)
100063c6:	4299      	cmp	r1, r3
100063c8:	d004      	beq.n	100063d4 <cleanup_stdio+0x30>
100063ca:	4620      	mov	r0, r4
100063cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100063d0:	f000 bb96 	b.w	10006b00 <_fflush_r>
100063d4:	bd10      	pop	{r4, pc}
100063d6:	bf00      	nop
100063d8:	10020120 	.word	0x10020120
100063dc:	10020188 	.word	0x10020188
100063e0:	100201f0 	.word	0x100201f0

100063e4 <global_stdio_init.part.0>:
100063e4:	b510      	push	{r4, lr}
100063e6:	4b0b      	ldr	r3, [pc, #44]	; (10006414 <global_stdio_init.part.0+0x30>)
100063e8:	4c0b      	ldr	r4, [pc, #44]	; (10006418 <global_stdio_init.part.0+0x34>)
100063ea:	4a0c      	ldr	r2, [pc, #48]	; (1000641c <global_stdio_init.part.0+0x38>)
100063ec:	601a      	str	r2, [r3, #0]
100063ee:	4620      	mov	r0, r4
100063f0:	2200      	movs	r2, #0
100063f2:	2104      	movs	r1, #4
100063f4:	f7ff ff94 	bl	10006320 <std>
100063f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
100063fc:	2201      	movs	r2, #1
100063fe:	2109      	movs	r1, #9
10006400:	f7ff ff8e 	bl	10006320 <std>
10006404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
10006408:	2202      	movs	r2, #2
1000640a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000640e:	2112      	movs	r1, #18
10006410:	f7ff bf86 	b.w	10006320 <std>
10006414:	10020258 	.word	0x10020258
10006418:	10020120 	.word	0x10020120
1000641c:	1000638d 	.word	0x1000638d

10006420 <__sfp_lock_acquire>:
10006420:	4801      	ldr	r0, [pc, #4]	; (10006428 <__sfp_lock_acquire+0x8>)
10006422:	f000 b9ec 	b.w	100067fe <__retarget_lock_acquire_recursive>
10006426:	bf00      	nop
10006428:	10020261 	.word	0x10020261

1000642c <__sfp_lock_release>:
1000642c:	4801      	ldr	r0, [pc, #4]	; (10006434 <__sfp_lock_release+0x8>)
1000642e:	f000 b9e7 	b.w	10006800 <__retarget_lock_release_recursive>
10006432:	bf00      	nop
10006434:	10020261 	.word	0x10020261

10006438 <__sinit>:
10006438:	b510      	push	{r4, lr}
1000643a:	4604      	mov	r4, r0
1000643c:	f7ff fff0 	bl	10006420 <__sfp_lock_acquire>
10006440:	6a23      	ldr	r3, [r4, #32]
10006442:	b11b      	cbz	r3, 1000644c <__sinit+0x14>
10006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10006448:	f7ff bff0 	b.w	1000642c <__sfp_lock_release>
1000644c:	4b04      	ldr	r3, [pc, #16]	; (10006460 <__sinit+0x28>)
1000644e:	6223      	str	r3, [r4, #32]
10006450:	4b04      	ldr	r3, [pc, #16]	; (10006464 <__sinit+0x2c>)
10006452:	681b      	ldr	r3, [r3, #0]
10006454:	2b00      	cmp	r3, #0
10006456:	d1f5      	bne.n	10006444 <__sinit+0xc>
10006458:	f7ff ffc4 	bl	100063e4 <global_stdio_init.part.0>
1000645c:	e7f2      	b.n	10006444 <__sinit+0xc>
1000645e:	bf00      	nop
10006460:	100063a5 	.word	0x100063a5
10006464:	10020258 	.word	0x10020258

10006468 <_fwalk_sglue>:
10006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000646c:	4607      	mov	r7, r0
1000646e:	4688      	mov	r8, r1
10006470:	4614      	mov	r4, r2
10006472:	2600      	movs	r6, #0
10006474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10006478:	f1b9 0901 	subs.w	r9, r9, #1
1000647c:	d505      	bpl.n	1000648a <_fwalk_sglue+0x22>
1000647e:	6824      	ldr	r4, [r4, #0]
10006480:	2c00      	cmp	r4, #0
10006482:	d1f7      	bne.n	10006474 <_fwalk_sglue+0xc>
10006484:	4630      	mov	r0, r6
10006486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000648a:	89ab      	ldrh	r3, [r5, #12]
1000648c:	2b01      	cmp	r3, #1
1000648e:	d907      	bls.n	100064a0 <_fwalk_sglue+0x38>
10006490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10006494:	3301      	adds	r3, #1
10006496:	d003      	beq.n	100064a0 <_fwalk_sglue+0x38>
10006498:	4629      	mov	r1, r5
1000649a:	4638      	mov	r0, r7
1000649c:	47c0      	blx	r8
1000649e:	4306      	orrs	r6, r0
100064a0:	3568      	adds	r5, #104	; 0x68
100064a2:	e7e9      	b.n	10006478 <_fwalk_sglue+0x10>

100064a4 <_puts_r>:
100064a4:	6a03      	ldr	r3, [r0, #32]
100064a6:	b570      	push	{r4, r5, r6, lr}
100064a8:	6884      	ldr	r4, [r0, #8]
100064aa:	4605      	mov	r5, r0
100064ac:	460e      	mov	r6, r1
100064ae:	b90b      	cbnz	r3, 100064b4 <_puts_r+0x10>
100064b0:	f7ff ffc2 	bl	10006438 <__sinit>
100064b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
100064b6:	07db      	lsls	r3, r3, #31
100064b8:	d405      	bmi.n	100064c6 <_puts_r+0x22>
100064ba:	89a3      	ldrh	r3, [r4, #12]
100064bc:	0598      	lsls	r0, r3, #22
100064be:	d402      	bmi.n	100064c6 <_puts_r+0x22>
100064c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
100064c2:	f000 f99c 	bl	100067fe <__retarget_lock_acquire_recursive>
100064c6:	89a3      	ldrh	r3, [r4, #12]
100064c8:	0719      	lsls	r1, r3, #28
100064ca:	d513      	bpl.n	100064f4 <_puts_r+0x50>
100064cc:	6923      	ldr	r3, [r4, #16]
100064ce:	b18b      	cbz	r3, 100064f4 <_puts_r+0x50>
100064d0:	3e01      	subs	r6, #1
100064d2:	68a3      	ldr	r3, [r4, #8]
100064d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
100064d8:	3b01      	subs	r3, #1
100064da:	60a3      	str	r3, [r4, #8]
100064dc:	b9e9      	cbnz	r1, 1000651a <_puts_r+0x76>
100064de:	2b00      	cmp	r3, #0
100064e0:	da2e      	bge.n	10006540 <_puts_r+0x9c>
100064e2:	4622      	mov	r2, r4
100064e4:	210a      	movs	r1, #10
100064e6:	4628      	mov	r0, r5
100064e8:	f000 f87b 	bl	100065e2 <__swbuf_r>
100064ec:	3001      	adds	r0, #1
100064ee:	d007      	beq.n	10006500 <_puts_r+0x5c>
100064f0:	250a      	movs	r5, #10
100064f2:	e007      	b.n	10006504 <_puts_r+0x60>
100064f4:	4621      	mov	r1, r4
100064f6:	4628      	mov	r0, r5
100064f8:	f000 f8b0 	bl	1000665c <__swsetup_r>
100064fc:	2800      	cmp	r0, #0
100064fe:	d0e7      	beq.n	100064d0 <_puts_r+0x2c>
10006500:	f04f 35ff 	mov.w	r5, #4294967295
10006504:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006506:	07da      	lsls	r2, r3, #31
10006508:	d405      	bmi.n	10006516 <_puts_r+0x72>
1000650a:	89a3      	ldrh	r3, [r4, #12]
1000650c:	059b      	lsls	r3, r3, #22
1000650e:	d402      	bmi.n	10006516 <_puts_r+0x72>
10006510:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006512:	f000 f975 	bl	10006800 <__retarget_lock_release_recursive>
10006516:	4628      	mov	r0, r5
10006518:	bd70      	pop	{r4, r5, r6, pc}
1000651a:	2b00      	cmp	r3, #0
1000651c:	da04      	bge.n	10006528 <_puts_r+0x84>
1000651e:	69a2      	ldr	r2, [r4, #24]
10006520:	429a      	cmp	r2, r3
10006522:	dc06      	bgt.n	10006532 <_puts_r+0x8e>
10006524:	290a      	cmp	r1, #10
10006526:	d004      	beq.n	10006532 <_puts_r+0x8e>
10006528:	6823      	ldr	r3, [r4, #0]
1000652a:	1c5a      	adds	r2, r3, #1
1000652c:	6022      	str	r2, [r4, #0]
1000652e:	7019      	strb	r1, [r3, #0]
10006530:	e7cf      	b.n	100064d2 <_puts_r+0x2e>
10006532:	4622      	mov	r2, r4
10006534:	4628      	mov	r0, r5
10006536:	f000 f854 	bl	100065e2 <__swbuf_r>
1000653a:	3001      	adds	r0, #1
1000653c:	d1c9      	bne.n	100064d2 <_puts_r+0x2e>
1000653e:	e7df      	b.n	10006500 <_puts_r+0x5c>
10006540:	6823      	ldr	r3, [r4, #0]
10006542:	250a      	movs	r5, #10
10006544:	1c5a      	adds	r2, r3, #1
10006546:	6022      	str	r2, [r4, #0]
10006548:	701d      	strb	r5, [r3, #0]
1000654a:	e7db      	b.n	10006504 <_puts_r+0x60>

1000654c <puts>:
1000654c:	4b02      	ldr	r3, [pc, #8]	; (10006558 <puts+0xc>)
1000654e:	4601      	mov	r1, r0
10006550:	6818      	ldr	r0, [r3, #0]
10006552:	f7ff bfa7 	b.w	100064a4 <_puts_r>
10006556:	bf00      	nop
10006558:	10020064 	.word	0x10020064

1000655c <__sread>:
1000655c:	b510      	push	{r4, lr}
1000655e:	460c      	mov	r4, r1
10006560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006564:	f000 f8fc 	bl	10006760 <_read_r>
10006568:	2800      	cmp	r0, #0
1000656a:	bfab      	itete	ge
1000656c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1000656e:	89a3      	ldrhlt	r3, [r4, #12]
10006570:	181b      	addge	r3, r3, r0
10006572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
10006576:	bfac      	ite	ge
10006578:	6563      	strge	r3, [r4, #84]	; 0x54
1000657a:	81a3      	strhlt	r3, [r4, #12]
1000657c:	bd10      	pop	{r4, pc}

1000657e <__swrite>:
1000657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10006582:	461f      	mov	r7, r3
10006584:	898b      	ldrh	r3, [r1, #12]
10006586:	05db      	lsls	r3, r3, #23
10006588:	4605      	mov	r5, r0
1000658a:	460c      	mov	r4, r1
1000658c:	4616      	mov	r6, r2
1000658e:	d505      	bpl.n	1000659c <__swrite+0x1e>
10006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006594:	2302      	movs	r3, #2
10006596:	2200      	movs	r2, #0
10006598:	f000 f8d0 	bl	1000673c <_lseek_r>
1000659c:	89a3      	ldrh	r3, [r4, #12]
1000659e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100065a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
100065a6:	81a3      	strh	r3, [r4, #12]
100065a8:	4632      	mov	r2, r6
100065aa:	463b      	mov	r3, r7
100065ac:	4628      	mov	r0, r5
100065ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100065b2:	f000 b8e7 	b.w	10006784 <_write_r>

100065b6 <__sseek>:
100065b6:	b510      	push	{r4, lr}
100065b8:	460c      	mov	r4, r1
100065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100065be:	f000 f8bd 	bl	1000673c <_lseek_r>
100065c2:	1c43      	adds	r3, r0, #1
100065c4:	89a3      	ldrh	r3, [r4, #12]
100065c6:	bf15      	itete	ne
100065c8:	6560      	strne	r0, [r4, #84]	; 0x54
100065ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
100065ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
100065d2:	81a3      	strheq	r3, [r4, #12]
100065d4:	bf18      	it	ne
100065d6:	81a3      	strhne	r3, [r4, #12]
100065d8:	bd10      	pop	{r4, pc}

100065da <__sclose>:
100065da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100065de:	f000 b89d 	b.w	1000671c <_close_r>

100065e2 <__swbuf_r>:
100065e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100065e4:	460e      	mov	r6, r1
100065e6:	4614      	mov	r4, r2
100065e8:	4605      	mov	r5, r0
100065ea:	b118      	cbz	r0, 100065f4 <__swbuf_r+0x12>
100065ec:	6a03      	ldr	r3, [r0, #32]
100065ee:	b90b      	cbnz	r3, 100065f4 <__swbuf_r+0x12>
100065f0:	f7ff ff22 	bl	10006438 <__sinit>
100065f4:	69a3      	ldr	r3, [r4, #24]
100065f6:	60a3      	str	r3, [r4, #8]
100065f8:	89a3      	ldrh	r3, [r4, #12]
100065fa:	071a      	lsls	r2, r3, #28
100065fc:	d525      	bpl.n	1000664a <__swbuf_r+0x68>
100065fe:	6923      	ldr	r3, [r4, #16]
10006600:	b31b      	cbz	r3, 1000664a <__swbuf_r+0x68>
10006602:	6823      	ldr	r3, [r4, #0]
10006604:	6922      	ldr	r2, [r4, #16]
10006606:	1a98      	subs	r0, r3, r2
10006608:	6963      	ldr	r3, [r4, #20]
1000660a:	b2f6      	uxtb	r6, r6
1000660c:	4283      	cmp	r3, r0
1000660e:	4637      	mov	r7, r6
10006610:	dc04      	bgt.n	1000661c <__swbuf_r+0x3a>
10006612:	4621      	mov	r1, r4
10006614:	4628      	mov	r0, r5
10006616:	f000 fa73 	bl	10006b00 <_fflush_r>
1000661a:	b9e0      	cbnz	r0, 10006656 <__swbuf_r+0x74>
1000661c:	68a3      	ldr	r3, [r4, #8]
1000661e:	3b01      	subs	r3, #1
10006620:	60a3      	str	r3, [r4, #8]
10006622:	6823      	ldr	r3, [r4, #0]
10006624:	1c5a      	adds	r2, r3, #1
10006626:	6022      	str	r2, [r4, #0]
10006628:	701e      	strb	r6, [r3, #0]
1000662a:	6962      	ldr	r2, [r4, #20]
1000662c:	1c43      	adds	r3, r0, #1
1000662e:	429a      	cmp	r2, r3
10006630:	d004      	beq.n	1000663c <__swbuf_r+0x5a>
10006632:	89a3      	ldrh	r3, [r4, #12]
10006634:	07db      	lsls	r3, r3, #31
10006636:	d506      	bpl.n	10006646 <__swbuf_r+0x64>
10006638:	2e0a      	cmp	r6, #10
1000663a:	d104      	bne.n	10006646 <__swbuf_r+0x64>
1000663c:	4621      	mov	r1, r4
1000663e:	4628      	mov	r0, r5
10006640:	f000 fa5e 	bl	10006b00 <_fflush_r>
10006644:	b938      	cbnz	r0, 10006656 <__swbuf_r+0x74>
10006646:	4638      	mov	r0, r7
10006648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000664a:	4621      	mov	r1, r4
1000664c:	4628      	mov	r0, r5
1000664e:	f000 f805 	bl	1000665c <__swsetup_r>
10006652:	2800      	cmp	r0, #0
10006654:	d0d5      	beq.n	10006602 <__swbuf_r+0x20>
10006656:	f04f 37ff 	mov.w	r7, #4294967295
1000665a:	e7f4      	b.n	10006646 <__swbuf_r+0x64>

1000665c <__swsetup_r>:
1000665c:	b538      	push	{r3, r4, r5, lr}
1000665e:	4b2a      	ldr	r3, [pc, #168]	; (10006708 <__swsetup_r+0xac>)
10006660:	4605      	mov	r5, r0
10006662:	6818      	ldr	r0, [r3, #0]
10006664:	460c      	mov	r4, r1
10006666:	b118      	cbz	r0, 10006670 <__swsetup_r+0x14>
10006668:	6a03      	ldr	r3, [r0, #32]
1000666a:	b90b      	cbnz	r3, 10006670 <__swsetup_r+0x14>
1000666c:	f7ff fee4 	bl	10006438 <__sinit>
10006670:	89a3      	ldrh	r3, [r4, #12]
10006672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10006676:	0718      	lsls	r0, r3, #28
10006678:	d422      	bmi.n	100066c0 <__swsetup_r+0x64>
1000667a:	06d9      	lsls	r1, r3, #27
1000667c:	d407      	bmi.n	1000668e <__swsetup_r+0x32>
1000667e:	2309      	movs	r3, #9
10006680:	602b      	str	r3, [r5, #0]
10006682:	f042 0340 	orr.w	r3, r2, #64	; 0x40
10006686:	81a3      	strh	r3, [r4, #12]
10006688:	f04f 30ff 	mov.w	r0, #4294967295
1000668c:	e034      	b.n	100066f8 <__swsetup_r+0x9c>
1000668e:	0758      	lsls	r0, r3, #29
10006690:	d512      	bpl.n	100066b8 <__swsetup_r+0x5c>
10006692:	6b61      	ldr	r1, [r4, #52]	; 0x34
10006694:	b141      	cbz	r1, 100066a8 <__swsetup_r+0x4c>
10006696:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000669a:	4299      	cmp	r1, r3
1000669c:	d002      	beq.n	100066a4 <__swsetup_r+0x48>
1000669e:	4628      	mov	r0, r5
100066a0:	f000 f8b0 	bl	10006804 <_free_r>
100066a4:	2300      	movs	r3, #0
100066a6:	6363      	str	r3, [r4, #52]	; 0x34
100066a8:	89a3      	ldrh	r3, [r4, #12]
100066aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
100066ae:	81a3      	strh	r3, [r4, #12]
100066b0:	2300      	movs	r3, #0
100066b2:	6063      	str	r3, [r4, #4]
100066b4:	6923      	ldr	r3, [r4, #16]
100066b6:	6023      	str	r3, [r4, #0]
100066b8:	89a3      	ldrh	r3, [r4, #12]
100066ba:	f043 0308 	orr.w	r3, r3, #8
100066be:	81a3      	strh	r3, [r4, #12]
100066c0:	6923      	ldr	r3, [r4, #16]
100066c2:	b94b      	cbnz	r3, 100066d8 <__swsetup_r+0x7c>
100066c4:	89a3      	ldrh	r3, [r4, #12]
100066c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
100066ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
100066ce:	d003      	beq.n	100066d8 <__swsetup_r+0x7c>
100066d0:	4621      	mov	r1, r4
100066d2:	4628      	mov	r0, r5
100066d4:	f000 fa62 	bl	10006b9c <__smakebuf_r>
100066d8:	89a0      	ldrh	r0, [r4, #12]
100066da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
100066de:	f010 0301 	ands.w	r3, r0, #1
100066e2:	d00a      	beq.n	100066fa <__swsetup_r+0x9e>
100066e4:	2300      	movs	r3, #0
100066e6:	60a3      	str	r3, [r4, #8]
100066e8:	6963      	ldr	r3, [r4, #20]
100066ea:	425b      	negs	r3, r3
100066ec:	61a3      	str	r3, [r4, #24]
100066ee:	6923      	ldr	r3, [r4, #16]
100066f0:	b943      	cbnz	r3, 10006704 <__swsetup_r+0xa8>
100066f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
100066f6:	d1c4      	bne.n	10006682 <__swsetup_r+0x26>
100066f8:	bd38      	pop	{r3, r4, r5, pc}
100066fa:	0781      	lsls	r1, r0, #30
100066fc:	bf58      	it	pl
100066fe:	6963      	ldrpl	r3, [r4, #20]
10006700:	60a3      	str	r3, [r4, #8]
10006702:	e7f4      	b.n	100066ee <__swsetup_r+0x92>
10006704:	2000      	movs	r0, #0
10006706:	e7f7      	b.n	100066f8 <__swsetup_r+0x9c>
10006708:	10020064 	.word	0x10020064

1000670c <memset>:
1000670c:	4402      	add	r2, r0
1000670e:	4603      	mov	r3, r0
10006710:	4293      	cmp	r3, r2
10006712:	d100      	bne.n	10006716 <memset+0xa>
10006714:	4770      	bx	lr
10006716:	f803 1b01 	strb.w	r1, [r3], #1
1000671a:	e7f9      	b.n	10006710 <memset+0x4>

1000671c <_close_r>:
1000671c:	b538      	push	{r3, r4, r5, lr}
1000671e:	4d06      	ldr	r5, [pc, #24]	; (10006738 <_close_r+0x1c>)
10006720:	2300      	movs	r3, #0
10006722:	4604      	mov	r4, r0
10006724:	4608      	mov	r0, r1
10006726:	602b      	str	r3, [r5, #0]
10006728:	f7f9 fe30 	bl	1000038c <_close>
1000672c:	1c43      	adds	r3, r0, #1
1000672e:	d102      	bne.n	10006736 <_close_r+0x1a>
10006730:	682b      	ldr	r3, [r5, #0]
10006732:	b103      	cbz	r3, 10006736 <_close_r+0x1a>
10006734:	6023      	str	r3, [r4, #0]
10006736:	bd38      	pop	{r3, r4, r5, pc}
10006738:	1002025c 	.word	0x1002025c

1000673c <_lseek_r>:
1000673c:	b538      	push	{r3, r4, r5, lr}
1000673e:	4d07      	ldr	r5, [pc, #28]	; (1000675c <_lseek_r+0x20>)
10006740:	4604      	mov	r4, r0
10006742:	4608      	mov	r0, r1
10006744:	4611      	mov	r1, r2
10006746:	2200      	movs	r2, #0
10006748:	602a      	str	r2, [r5, #0]
1000674a:	461a      	mov	r2, r3
1000674c:	f7f9 fe45 	bl	100003da <_lseek>
10006750:	1c43      	adds	r3, r0, #1
10006752:	d102      	bne.n	1000675a <_lseek_r+0x1e>
10006754:	682b      	ldr	r3, [r5, #0]
10006756:	b103      	cbz	r3, 1000675a <_lseek_r+0x1e>
10006758:	6023      	str	r3, [r4, #0]
1000675a:	bd38      	pop	{r3, r4, r5, pc}
1000675c:	1002025c 	.word	0x1002025c

10006760 <_read_r>:
10006760:	b538      	push	{r3, r4, r5, lr}
10006762:	4d07      	ldr	r5, [pc, #28]	; (10006780 <_read_r+0x20>)
10006764:	4604      	mov	r4, r0
10006766:	4608      	mov	r0, r1
10006768:	4611      	mov	r1, r2
1000676a:	2200      	movs	r2, #0
1000676c:	602a      	str	r2, [r5, #0]
1000676e:	461a      	mov	r2, r3
10006770:	f7f9 fdd3 	bl	1000031a <_read>
10006774:	1c43      	adds	r3, r0, #1
10006776:	d102      	bne.n	1000677e <_read_r+0x1e>
10006778:	682b      	ldr	r3, [r5, #0]
1000677a:	b103      	cbz	r3, 1000677e <_read_r+0x1e>
1000677c:	6023      	str	r3, [r4, #0]
1000677e:	bd38      	pop	{r3, r4, r5, pc}
10006780:	1002025c 	.word	0x1002025c

10006784 <_write_r>:
10006784:	b538      	push	{r3, r4, r5, lr}
10006786:	4d07      	ldr	r5, [pc, #28]	; (100067a4 <_write_r+0x20>)
10006788:	4604      	mov	r4, r0
1000678a:	4608      	mov	r0, r1
1000678c:	4611      	mov	r1, r2
1000678e:	2200      	movs	r2, #0
10006790:	602a      	str	r2, [r5, #0]
10006792:	461a      	mov	r2, r3
10006794:	f7f9 fdde 	bl	10000354 <_write>
10006798:	1c43      	adds	r3, r0, #1
1000679a:	d102      	bne.n	100067a2 <_write_r+0x1e>
1000679c:	682b      	ldr	r3, [r5, #0]
1000679e:	b103      	cbz	r3, 100067a2 <_write_r+0x1e>
100067a0:	6023      	str	r3, [r4, #0]
100067a2:	bd38      	pop	{r3, r4, r5, pc}
100067a4:	1002025c 	.word	0x1002025c

100067a8 <__errno>:
100067a8:	4b01      	ldr	r3, [pc, #4]	; (100067b0 <__errno+0x8>)
100067aa:	6818      	ldr	r0, [r3, #0]
100067ac:	4770      	bx	lr
100067ae:	bf00      	nop
100067b0:	10020064 	.word	0x10020064

100067b4 <__libc_init_array>:
100067b4:	b570      	push	{r4, r5, r6, lr}
100067b6:	4d0d      	ldr	r5, [pc, #52]	; (100067ec <__libc_init_array+0x38>)
100067b8:	4c0d      	ldr	r4, [pc, #52]	; (100067f0 <__libc_init_array+0x3c>)
100067ba:	1b64      	subs	r4, r4, r5
100067bc:	10a4      	asrs	r4, r4, #2
100067be:	2600      	movs	r6, #0
100067c0:	42a6      	cmp	r6, r4
100067c2:	d109      	bne.n	100067d8 <__libc_init_array+0x24>
100067c4:	4d0b      	ldr	r5, [pc, #44]	; (100067f4 <__libc_init_array+0x40>)
100067c6:	4c0c      	ldr	r4, [pc, #48]	; (100067f8 <__libc_init_array+0x44>)
100067c8:	f000 fa56 	bl	10006c78 <_init>
100067cc:	1b64      	subs	r4, r4, r5
100067ce:	10a4      	asrs	r4, r4, #2
100067d0:	2600      	movs	r6, #0
100067d2:	42a6      	cmp	r6, r4
100067d4:	d105      	bne.n	100067e2 <__libc_init_array+0x2e>
100067d6:	bd70      	pop	{r4, r5, r6, pc}
100067d8:	f855 3b04 	ldr.w	r3, [r5], #4
100067dc:	4798      	blx	r3
100067de:	3601      	adds	r6, #1
100067e0:	e7ee      	b.n	100067c0 <__libc_init_array+0xc>
100067e2:	f855 3b04 	ldr.w	r3, [r5], #4
100067e6:	4798      	blx	r3
100067e8:	3601      	adds	r6, #1
100067ea:	e7f2      	b.n	100067d2 <__libc_init_array+0x1e>
100067ec:	10006d14 	.word	0x10006d14
100067f0:	10006d14 	.word	0x10006d14
100067f4:	10006d14 	.word	0x10006d14
100067f8:	10006d18 	.word	0x10006d18

100067fc <__retarget_lock_init_recursive>:
100067fc:	4770      	bx	lr

100067fe <__retarget_lock_acquire_recursive>:
100067fe:	4770      	bx	lr

10006800 <__retarget_lock_release_recursive>:
10006800:	4770      	bx	lr
	...

10006804 <_free_r>:
10006804:	b537      	push	{r0, r1, r2, r4, r5, lr}
10006806:	2900      	cmp	r1, #0
10006808:	d044      	beq.n	10006894 <_free_r+0x90>
1000680a:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000680e:	9001      	str	r0, [sp, #4]
10006810:	2b00      	cmp	r3, #0
10006812:	f1a1 0404 	sub.w	r4, r1, #4
10006816:	bfb8      	it	lt
10006818:	18e4      	addlt	r4, r4, r3
1000681a:	f000 f8df 	bl	100069dc <__malloc_lock>
1000681e:	4a1e      	ldr	r2, [pc, #120]	; (10006898 <_free_r+0x94>)
10006820:	9801      	ldr	r0, [sp, #4]
10006822:	6813      	ldr	r3, [r2, #0]
10006824:	b933      	cbnz	r3, 10006834 <_free_r+0x30>
10006826:	6063      	str	r3, [r4, #4]
10006828:	6014      	str	r4, [r2, #0]
1000682a:	b003      	add	sp, #12
1000682c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10006830:	f000 b8da 	b.w	100069e8 <__malloc_unlock>
10006834:	42a3      	cmp	r3, r4
10006836:	d908      	bls.n	1000684a <_free_r+0x46>
10006838:	6825      	ldr	r5, [r4, #0]
1000683a:	1961      	adds	r1, r4, r5
1000683c:	428b      	cmp	r3, r1
1000683e:	bf01      	itttt	eq
10006840:	6819      	ldreq	r1, [r3, #0]
10006842:	685b      	ldreq	r3, [r3, #4]
10006844:	1949      	addeq	r1, r1, r5
10006846:	6021      	streq	r1, [r4, #0]
10006848:	e7ed      	b.n	10006826 <_free_r+0x22>
1000684a:	461a      	mov	r2, r3
1000684c:	685b      	ldr	r3, [r3, #4]
1000684e:	b10b      	cbz	r3, 10006854 <_free_r+0x50>
10006850:	42a3      	cmp	r3, r4
10006852:	d9fa      	bls.n	1000684a <_free_r+0x46>
10006854:	6811      	ldr	r1, [r2, #0]
10006856:	1855      	adds	r5, r2, r1
10006858:	42a5      	cmp	r5, r4
1000685a:	d10b      	bne.n	10006874 <_free_r+0x70>
1000685c:	6824      	ldr	r4, [r4, #0]
1000685e:	4421      	add	r1, r4
10006860:	1854      	adds	r4, r2, r1
10006862:	42a3      	cmp	r3, r4
10006864:	6011      	str	r1, [r2, #0]
10006866:	d1e0      	bne.n	1000682a <_free_r+0x26>
10006868:	681c      	ldr	r4, [r3, #0]
1000686a:	685b      	ldr	r3, [r3, #4]
1000686c:	6053      	str	r3, [r2, #4]
1000686e:	440c      	add	r4, r1
10006870:	6014      	str	r4, [r2, #0]
10006872:	e7da      	b.n	1000682a <_free_r+0x26>
10006874:	d902      	bls.n	1000687c <_free_r+0x78>
10006876:	230c      	movs	r3, #12
10006878:	6003      	str	r3, [r0, #0]
1000687a:	e7d6      	b.n	1000682a <_free_r+0x26>
1000687c:	6825      	ldr	r5, [r4, #0]
1000687e:	1961      	adds	r1, r4, r5
10006880:	428b      	cmp	r3, r1
10006882:	bf04      	itt	eq
10006884:	6819      	ldreq	r1, [r3, #0]
10006886:	685b      	ldreq	r3, [r3, #4]
10006888:	6063      	str	r3, [r4, #4]
1000688a:	bf04      	itt	eq
1000688c:	1949      	addeq	r1, r1, r5
1000688e:	6021      	streq	r1, [r4, #0]
10006890:	6054      	str	r4, [r2, #4]
10006892:	e7ca      	b.n	1000682a <_free_r+0x26>
10006894:	b003      	add	sp, #12
10006896:	bd30      	pop	{r4, r5, pc}
10006898:	10020264 	.word	0x10020264

1000689c <sbrk_aligned>:
1000689c:	b570      	push	{r4, r5, r6, lr}
1000689e:	4e0e      	ldr	r6, [pc, #56]	; (100068d8 <sbrk_aligned+0x3c>)
100068a0:	460c      	mov	r4, r1
100068a2:	6831      	ldr	r1, [r6, #0]
100068a4:	4605      	mov	r5, r0
100068a6:	b911      	cbnz	r1, 100068ae <sbrk_aligned+0x12>
100068a8:	f000 f9d6 	bl	10006c58 <_sbrk_r>
100068ac:	6030      	str	r0, [r6, #0]
100068ae:	4621      	mov	r1, r4
100068b0:	4628      	mov	r0, r5
100068b2:	f000 f9d1 	bl	10006c58 <_sbrk_r>
100068b6:	1c43      	adds	r3, r0, #1
100068b8:	d00a      	beq.n	100068d0 <sbrk_aligned+0x34>
100068ba:	1cc4      	adds	r4, r0, #3
100068bc:	f024 0403 	bic.w	r4, r4, #3
100068c0:	42a0      	cmp	r0, r4
100068c2:	d007      	beq.n	100068d4 <sbrk_aligned+0x38>
100068c4:	1a21      	subs	r1, r4, r0
100068c6:	4628      	mov	r0, r5
100068c8:	f000 f9c6 	bl	10006c58 <_sbrk_r>
100068cc:	3001      	adds	r0, #1
100068ce:	d101      	bne.n	100068d4 <sbrk_aligned+0x38>
100068d0:	f04f 34ff 	mov.w	r4, #4294967295
100068d4:	4620      	mov	r0, r4
100068d6:	bd70      	pop	{r4, r5, r6, pc}
100068d8:	10020268 	.word	0x10020268

100068dc <_malloc_r>:
100068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100068e0:	1ccd      	adds	r5, r1, #3
100068e2:	f025 0503 	bic.w	r5, r5, #3
100068e6:	3508      	adds	r5, #8
100068e8:	2d0c      	cmp	r5, #12
100068ea:	bf38      	it	cc
100068ec:	250c      	movcc	r5, #12
100068ee:	2d00      	cmp	r5, #0
100068f0:	4607      	mov	r7, r0
100068f2:	db01      	blt.n	100068f8 <_malloc_r+0x1c>
100068f4:	42a9      	cmp	r1, r5
100068f6:	d905      	bls.n	10006904 <_malloc_r+0x28>
100068f8:	230c      	movs	r3, #12
100068fa:	603b      	str	r3, [r7, #0]
100068fc:	2600      	movs	r6, #0
100068fe:	4630      	mov	r0, r6
10006900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10006904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 100069d8 <_malloc_r+0xfc>
10006908:	f000 f868 	bl	100069dc <__malloc_lock>
1000690c:	f8d8 3000 	ldr.w	r3, [r8]
10006910:	461c      	mov	r4, r3
10006912:	bb5c      	cbnz	r4, 1000696c <_malloc_r+0x90>
10006914:	4629      	mov	r1, r5
10006916:	4638      	mov	r0, r7
10006918:	f7ff ffc0 	bl	1000689c <sbrk_aligned>
1000691c:	1c43      	adds	r3, r0, #1
1000691e:	4604      	mov	r4, r0
10006920:	d155      	bne.n	100069ce <_malloc_r+0xf2>
10006922:	f8d8 4000 	ldr.w	r4, [r8]
10006926:	4626      	mov	r6, r4
10006928:	2e00      	cmp	r6, #0
1000692a:	d145      	bne.n	100069b8 <_malloc_r+0xdc>
1000692c:	2c00      	cmp	r4, #0
1000692e:	d048      	beq.n	100069c2 <_malloc_r+0xe6>
10006930:	6823      	ldr	r3, [r4, #0]
10006932:	4631      	mov	r1, r6
10006934:	4638      	mov	r0, r7
10006936:	eb04 0903 	add.w	r9, r4, r3
1000693a:	f000 f98d 	bl	10006c58 <_sbrk_r>
1000693e:	4581      	cmp	r9, r0
10006940:	d13f      	bne.n	100069c2 <_malloc_r+0xe6>
10006942:	6821      	ldr	r1, [r4, #0]
10006944:	1a6d      	subs	r5, r5, r1
10006946:	4629      	mov	r1, r5
10006948:	4638      	mov	r0, r7
1000694a:	f7ff ffa7 	bl	1000689c <sbrk_aligned>
1000694e:	3001      	adds	r0, #1
10006950:	d037      	beq.n	100069c2 <_malloc_r+0xe6>
10006952:	6823      	ldr	r3, [r4, #0]
10006954:	442b      	add	r3, r5
10006956:	6023      	str	r3, [r4, #0]
10006958:	f8d8 3000 	ldr.w	r3, [r8]
1000695c:	2b00      	cmp	r3, #0
1000695e:	d038      	beq.n	100069d2 <_malloc_r+0xf6>
10006960:	685a      	ldr	r2, [r3, #4]
10006962:	42a2      	cmp	r2, r4
10006964:	d12b      	bne.n	100069be <_malloc_r+0xe2>
10006966:	2200      	movs	r2, #0
10006968:	605a      	str	r2, [r3, #4]
1000696a:	e00f      	b.n	1000698c <_malloc_r+0xb0>
1000696c:	6822      	ldr	r2, [r4, #0]
1000696e:	1b52      	subs	r2, r2, r5
10006970:	d41f      	bmi.n	100069b2 <_malloc_r+0xd6>
10006972:	2a0b      	cmp	r2, #11
10006974:	d917      	bls.n	100069a6 <_malloc_r+0xca>
10006976:	1961      	adds	r1, r4, r5
10006978:	42a3      	cmp	r3, r4
1000697a:	6025      	str	r5, [r4, #0]
1000697c:	bf18      	it	ne
1000697e:	6059      	strne	r1, [r3, #4]
10006980:	6863      	ldr	r3, [r4, #4]
10006982:	bf08      	it	eq
10006984:	f8c8 1000 	streq.w	r1, [r8]
10006988:	5162      	str	r2, [r4, r5]
1000698a:	604b      	str	r3, [r1, #4]
1000698c:	4638      	mov	r0, r7
1000698e:	f104 060b 	add.w	r6, r4, #11
10006992:	f000 f829 	bl	100069e8 <__malloc_unlock>
10006996:	f026 0607 	bic.w	r6, r6, #7
1000699a:	1d23      	adds	r3, r4, #4
1000699c:	1af2      	subs	r2, r6, r3
1000699e:	d0ae      	beq.n	100068fe <_malloc_r+0x22>
100069a0:	1b9b      	subs	r3, r3, r6
100069a2:	50a3      	str	r3, [r4, r2]
100069a4:	e7ab      	b.n	100068fe <_malloc_r+0x22>
100069a6:	42a3      	cmp	r3, r4
100069a8:	6862      	ldr	r2, [r4, #4]
100069aa:	d1dd      	bne.n	10006968 <_malloc_r+0x8c>
100069ac:	f8c8 2000 	str.w	r2, [r8]
100069b0:	e7ec      	b.n	1000698c <_malloc_r+0xb0>
100069b2:	4623      	mov	r3, r4
100069b4:	6864      	ldr	r4, [r4, #4]
100069b6:	e7ac      	b.n	10006912 <_malloc_r+0x36>
100069b8:	4634      	mov	r4, r6
100069ba:	6876      	ldr	r6, [r6, #4]
100069bc:	e7b4      	b.n	10006928 <_malloc_r+0x4c>
100069be:	4613      	mov	r3, r2
100069c0:	e7cc      	b.n	1000695c <_malloc_r+0x80>
100069c2:	230c      	movs	r3, #12
100069c4:	603b      	str	r3, [r7, #0]
100069c6:	4638      	mov	r0, r7
100069c8:	f000 f80e 	bl	100069e8 <__malloc_unlock>
100069cc:	e797      	b.n	100068fe <_malloc_r+0x22>
100069ce:	6025      	str	r5, [r4, #0]
100069d0:	e7dc      	b.n	1000698c <_malloc_r+0xb0>
100069d2:	605b      	str	r3, [r3, #4]
100069d4:	deff      	udf	#255	; 0xff
100069d6:	bf00      	nop
100069d8:	10020264 	.word	0x10020264

100069dc <__malloc_lock>:
100069dc:	4801      	ldr	r0, [pc, #4]	; (100069e4 <__malloc_lock+0x8>)
100069de:	f7ff bf0e 	b.w	100067fe <__retarget_lock_acquire_recursive>
100069e2:	bf00      	nop
100069e4:	10020260 	.word	0x10020260

100069e8 <__malloc_unlock>:
100069e8:	4801      	ldr	r0, [pc, #4]	; (100069f0 <__malloc_unlock+0x8>)
100069ea:	f7ff bf09 	b.w	10006800 <__retarget_lock_release_recursive>
100069ee:	bf00      	nop
100069f0:	10020260 	.word	0x10020260

100069f4 <__sflush_r>:
100069f4:	898a      	ldrh	r2, [r1, #12]
100069f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100069fa:	4605      	mov	r5, r0
100069fc:	0710      	lsls	r0, r2, #28
100069fe:	460c      	mov	r4, r1
10006a00:	d458      	bmi.n	10006ab4 <__sflush_r+0xc0>
10006a02:	684b      	ldr	r3, [r1, #4]
10006a04:	2b00      	cmp	r3, #0
10006a06:	dc05      	bgt.n	10006a14 <__sflush_r+0x20>
10006a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10006a0a:	2b00      	cmp	r3, #0
10006a0c:	dc02      	bgt.n	10006a14 <__sflush_r+0x20>
10006a0e:	2000      	movs	r0, #0
10006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10006a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10006a16:	2e00      	cmp	r6, #0
10006a18:	d0f9      	beq.n	10006a0e <__sflush_r+0x1a>
10006a1a:	2300      	movs	r3, #0
10006a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10006a20:	682f      	ldr	r7, [r5, #0]
10006a22:	6a21      	ldr	r1, [r4, #32]
10006a24:	602b      	str	r3, [r5, #0]
10006a26:	d032      	beq.n	10006a8e <__sflush_r+0x9a>
10006a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
10006a2a:	89a3      	ldrh	r3, [r4, #12]
10006a2c:	075a      	lsls	r2, r3, #29
10006a2e:	d505      	bpl.n	10006a3c <__sflush_r+0x48>
10006a30:	6863      	ldr	r3, [r4, #4]
10006a32:	1ac0      	subs	r0, r0, r3
10006a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
10006a36:	b10b      	cbz	r3, 10006a3c <__sflush_r+0x48>
10006a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
10006a3a:	1ac0      	subs	r0, r0, r3
10006a3c:	2300      	movs	r3, #0
10006a3e:	4602      	mov	r2, r0
10006a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10006a42:	6a21      	ldr	r1, [r4, #32]
10006a44:	4628      	mov	r0, r5
10006a46:	47b0      	blx	r6
10006a48:	1c43      	adds	r3, r0, #1
10006a4a:	89a3      	ldrh	r3, [r4, #12]
10006a4c:	d106      	bne.n	10006a5c <__sflush_r+0x68>
10006a4e:	6829      	ldr	r1, [r5, #0]
10006a50:	291d      	cmp	r1, #29
10006a52:	d82b      	bhi.n	10006aac <__sflush_r+0xb8>
10006a54:	4a29      	ldr	r2, [pc, #164]	; (10006afc <__sflush_r+0x108>)
10006a56:	410a      	asrs	r2, r1
10006a58:	07d6      	lsls	r6, r2, #31
10006a5a:	d427      	bmi.n	10006aac <__sflush_r+0xb8>
10006a5c:	2200      	movs	r2, #0
10006a5e:	6062      	str	r2, [r4, #4]
10006a60:	04d9      	lsls	r1, r3, #19
10006a62:	6922      	ldr	r2, [r4, #16]
10006a64:	6022      	str	r2, [r4, #0]
10006a66:	d504      	bpl.n	10006a72 <__sflush_r+0x7e>
10006a68:	1c42      	adds	r2, r0, #1
10006a6a:	d101      	bne.n	10006a70 <__sflush_r+0x7c>
10006a6c:	682b      	ldr	r3, [r5, #0]
10006a6e:	b903      	cbnz	r3, 10006a72 <__sflush_r+0x7e>
10006a70:	6560      	str	r0, [r4, #84]	; 0x54
10006a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
10006a74:	602f      	str	r7, [r5, #0]
10006a76:	2900      	cmp	r1, #0
10006a78:	d0c9      	beq.n	10006a0e <__sflush_r+0x1a>
10006a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
10006a7e:	4299      	cmp	r1, r3
10006a80:	d002      	beq.n	10006a88 <__sflush_r+0x94>
10006a82:	4628      	mov	r0, r5
10006a84:	f7ff febe 	bl	10006804 <_free_r>
10006a88:	2000      	movs	r0, #0
10006a8a:	6360      	str	r0, [r4, #52]	; 0x34
10006a8c:	e7c0      	b.n	10006a10 <__sflush_r+0x1c>
10006a8e:	2301      	movs	r3, #1
10006a90:	4628      	mov	r0, r5
10006a92:	47b0      	blx	r6
10006a94:	1c41      	adds	r1, r0, #1
10006a96:	d1c8      	bne.n	10006a2a <__sflush_r+0x36>
10006a98:	682b      	ldr	r3, [r5, #0]
10006a9a:	2b00      	cmp	r3, #0
10006a9c:	d0c5      	beq.n	10006a2a <__sflush_r+0x36>
10006a9e:	2b1d      	cmp	r3, #29
10006aa0:	d001      	beq.n	10006aa6 <__sflush_r+0xb2>
10006aa2:	2b16      	cmp	r3, #22
10006aa4:	d101      	bne.n	10006aaa <__sflush_r+0xb6>
10006aa6:	602f      	str	r7, [r5, #0]
10006aa8:	e7b1      	b.n	10006a0e <__sflush_r+0x1a>
10006aaa:	89a3      	ldrh	r3, [r4, #12]
10006aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006ab0:	81a3      	strh	r3, [r4, #12]
10006ab2:	e7ad      	b.n	10006a10 <__sflush_r+0x1c>
10006ab4:	690f      	ldr	r7, [r1, #16]
10006ab6:	2f00      	cmp	r7, #0
10006ab8:	d0a9      	beq.n	10006a0e <__sflush_r+0x1a>
10006aba:	0793      	lsls	r3, r2, #30
10006abc:	680e      	ldr	r6, [r1, #0]
10006abe:	bf08      	it	eq
10006ac0:	694b      	ldreq	r3, [r1, #20]
10006ac2:	600f      	str	r7, [r1, #0]
10006ac4:	bf18      	it	ne
10006ac6:	2300      	movne	r3, #0
10006ac8:	eba6 0807 	sub.w	r8, r6, r7
10006acc:	608b      	str	r3, [r1, #8]
10006ace:	f1b8 0f00 	cmp.w	r8, #0
10006ad2:	dd9c      	ble.n	10006a0e <__sflush_r+0x1a>
10006ad4:	6a21      	ldr	r1, [r4, #32]
10006ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10006ad8:	4643      	mov	r3, r8
10006ada:	463a      	mov	r2, r7
10006adc:	4628      	mov	r0, r5
10006ade:	47b0      	blx	r6
10006ae0:	2800      	cmp	r0, #0
10006ae2:	dc06      	bgt.n	10006af2 <__sflush_r+0xfe>
10006ae4:	89a3      	ldrh	r3, [r4, #12]
10006ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006aea:	81a3      	strh	r3, [r4, #12]
10006aec:	f04f 30ff 	mov.w	r0, #4294967295
10006af0:	e78e      	b.n	10006a10 <__sflush_r+0x1c>
10006af2:	4407      	add	r7, r0
10006af4:	eba8 0800 	sub.w	r8, r8, r0
10006af8:	e7e9      	b.n	10006ace <__sflush_r+0xda>
10006afa:	bf00      	nop
10006afc:	dfbffffe 	.word	0xdfbffffe

10006b00 <_fflush_r>:
10006b00:	b538      	push	{r3, r4, r5, lr}
10006b02:	690b      	ldr	r3, [r1, #16]
10006b04:	4605      	mov	r5, r0
10006b06:	460c      	mov	r4, r1
10006b08:	b913      	cbnz	r3, 10006b10 <_fflush_r+0x10>
10006b0a:	2500      	movs	r5, #0
10006b0c:	4628      	mov	r0, r5
10006b0e:	bd38      	pop	{r3, r4, r5, pc}
10006b10:	b118      	cbz	r0, 10006b1a <_fflush_r+0x1a>
10006b12:	6a03      	ldr	r3, [r0, #32]
10006b14:	b90b      	cbnz	r3, 10006b1a <_fflush_r+0x1a>
10006b16:	f7ff fc8f 	bl	10006438 <__sinit>
10006b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10006b1e:	2b00      	cmp	r3, #0
10006b20:	d0f3      	beq.n	10006b0a <_fflush_r+0xa>
10006b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
10006b24:	07d0      	lsls	r0, r2, #31
10006b26:	d404      	bmi.n	10006b32 <_fflush_r+0x32>
10006b28:	0599      	lsls	r1, r3, #22
10006b2a:	d402      	bmi.n	10006b32 <_fflush_r+0x32>
10006b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006b2e:	f7ff fe66 	bl	100067fe <__retarget_lock_acquire_recursive>
10006b32:	4628      	mov	r0, r5
10006b34:	4621      	mov	r1, r4
10006b36:	f7ff ff5d 	bl	100069f4 <__sflush_r>
10006b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
10006b3c:	07da      	lsls	r2, r3, #31
10006b3e:	4605      	mov	r5, r0
10006b40:	d4e4      	bmi.n	10006b0c <_fflush_r+0xc>
10006b42:	89a3      	ldrh	r3, [r4, #12]
10006b44:	059b      	lsls	r3, r3, #22
10006b46:	d4e1      	bmi.n	10006b0c <_fflush_r+0xc>
10006b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
10006b4a:	f7ff fe59 	bl	10006800 <__retarget_lock_release_recursive>
10006b4e:	e7dd      	b.n	10006b0c <_fflush_r+0xc>

10006b50 <__swhatbuf_r>:
10006b50:	b570      	push	{r4, r5, r6, lr}
10006b52:	460c      	mov	r4, r1
10006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10006b58:	2900      	cmp	r1, #0
10006b5a:	b096      	sub	sp, #88	; 0x58
10006b5c:	4615      	mov	r5, r2
10006b5e:	461e      	mov	r6, r3
10006b60:	da0d      	bge.n	10006b7e <__swhatbuf_r+0x2e>
10006b62:	89a3      	ldrh	r3, [r4, #12]
10006b64:	f013 0f80 	tst.w	r3, #128	; 0x80
10006b68:	f04f 0100 	mov.w	r1, #0
10006b6c:	bf0c      	ite	eq
10006b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
10006b72:	2340      	movne	r3, #64	; 0x40
10006b74:	2000      	movs	r0, #0
10006b76:	6031      	str	r1, [r6, #0]
10006b78:	602b      	str	r3, [r5, #0]
10006b7a:	b016      	add	sp, #88	; 0x58
10006b7c:	bd70      	pop	{r4, r5, r6, pc}
10006b7e:	466a      	mov	r2, sp
10006b80:	f000 f848 	bl	10006c14 <_fstat_r>
10006b84:	2800      	cmp	r0, #0
10006b86:	dbec      	blt.n	10006b62 <__swhatbuf_r+0x12>
10006b88:	9901      	ldr	r1, [sp, #4]
10006b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
10006b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
10006b92:	4259      	negs	r1, r3
10006b94:	4159      	adcs	r1, r3
10006b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
10006b9a:	e7eb      	b.n	10006b74 <__swhatbuf_r+0x24>

10006b9c <__smakebuf_r>:
10006b9c:	898b      	ldrh	r3, [r1, #12]
10006b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
10006ba0:	079d      	lsls	r5, r3, #30
10006ba2:	4606      	mov	r6, r0
10006ba4:	460c      	mov	r4, r1
10006ba6:	d507      	bpl.n	10006bb8 <__smakebuf_r+0x1c>
10006ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
10006bac:	6023      	str	r3, [r4, #0]
10006bae:	6123      	str	r3, [r4, #16]
10006bb0:	2301      	movs	r3, #1
10006bb2:	6163      	str	r3, [r4, #20]
10006bb4:	b002      	add	sp, #8
10006bb6:	bd70      	pop	{r4, r5, r6, pc}
10006bb8:	ab01      	add	r3, sp, #4
10006bba:	466a      	mov	r2, sp
10006bbc:	f7ff ffc8 	bl	10006b50 <__swhatbuf_r>
10006bc0:	9900      	ldr	r1, [sp, #0]
10006bc2:	4605      	mov	r5, r0
10006bc4:	4630      	mov	r0, r6
10006bc6:	f7ff fe89 	bl	100068dc <_malloc_r>
10006bca:	b948      	cbnz	r0, 10006be0 <__smakebuf_r+0x44>
10006bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10006bd0:	059a      	lsls	r2, r3, #22
10006bd2:	d4ef      	bmi.n	10006bb4 <__smakebuf_r+0x18>
10006bd4:	f023 0303 	bic.w	r3, r3, #3
10006bd8:	f043 0302 	orr.w	r3, r3, #2
10006bdc:	81a3      	strh	r3, [r4, #12]
10006bde:	e7e3      	b.n	10006ba8 <__smakebuf_r+0xc>
10006be0:	89a3      	ldrh	r3, [r4, #12]
10006be2:	6020      	str	r0, [r4, #0]
10006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10006be8:	81a3      	strh	r3, [r4, #12]
10006bea:	9b00      	ldr	r3, [sp, #0]
10006bec:	6163      	str	r3, [r4, #20]
10006bee:	9b01      	ldr	r3, [sp, #4]
10006bf0:	6120      	str	r0, [r4, #16]
10006bf2:	b15b      	cbz	r3, 10006c0c <__smakebuf_r+0x70>
10006bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10006bf8:	4630      	mov	r0, r6
10006bfa:	f000 f81d 	bl	10006c38 <_isatty_r>
10006bfe:	b128      	cbz	r0, 10006c0c <__smakebuf_r+0x70>
10006c00:	89a3      	ldrh	r3, [r4, #12]
10006c02:	f023 0303 	bic.w	r3, r3, #3
10006c06:	f043 0301 	orr.w	r3, r3, #1
10006c0a:	81a3      	strh	r3, [r4, #12]
10006c0c:	89a3      	ldrh	r3, [r4, #12]
10006c0e:	431d      	orrs	r5, r3
10006c10:	81a5      	strh	r5, [r4, #12]
10006c12:	e7cf      	b.n	10006bb4 <__smakebuf_r+0x18>

10006c14 <_fstat_r>:
10006c14:	b538      	push	{r3, r4, r5, lr}
10006c16:	4d07      	ldr	r5, [pc, #28]	; (10006c34 <_fstat_r+0x20>)
10006c18:	2300      	movs	r3, #0
10006c1a:	4604      	mov	r4, r0
10006c1c:	4608      	mov	r0, r1
10006c1e:	4611      	mov	r1, r2
10006c20:	602b      	str	r3, [r5, #0]
10006c22:	f7f9 fbbf 	bl	100003a4 <_fstat>
10006c26:	1c43      	adds	r3, r0, #1
10006c28:	d102      	bne.n	10006c30 <_fstat_r+0x1c>
10006c2a:	682b      	ldr	r3, [r5, #0]
10006c2c:	b103      	cbz	r3, 10006c30 <_fstat_r+0x1c>
10006c2e:	6023      	str	r3, [r4, #0]
10006c30:	bd38      	pop	{r3, r4, r5, pc}
10006c32:	bf00      	nop
10006c34:	1002025c 	.word	0x1002025c

10006c38 <_isatty_r>:
10006c38:	b538      	push	{r3, r4, r5, lr}
10006c3a:	4d06      	ldr	r5, [pc, #24]	; (10006c54 <_isatty_r+0x1c>)
10006c3c:	2300      	movs	r3, #0
10006c3e:	4604      	mov	r4, r0
10006c40:	4608      	mov	r0, r1
10006c42:	602b      	str	r3, [r5, #0]
10006c44:	f7f9 fbbe 	bl	100003c4 <_isatty>
10006c48:	1c43      	adds	r3, r0, #1
10006c4a:	d102      	bne.n	10006c52 <_isatty_r+0x1a>
10006c4c:	682b      	ldr	r3, [r5, #0]
10006c4e:	b103      	cbz	r3, 10006c52 <_isatty_r+0x1a>
10006c50:	6023      	str	r3, [r4, #0]
10006c52:	bd38      	pop	{r3, r4, r5, pc}
10006c54:	1002025c 	.word	0x1002025c

10006c58 <_sbrk_r>:
10006c58:	b538      	push	{r3, r4, r5, lr}
10006c5a:	4d06      	ldr	r5, [pc, #24]	; (10006c74 <_sbrk_r+0x1c>)
10006c5c:	2300      	movs	r3, #0
10006c5e:	4604      	mov	r4, r0
10006c60:	4608      	mov	r0, r1
10006c62:	602b      	str	r3, [r5, #0]
10006c64:	f7f9 fbc6 	bl	100003f4 <_sbrk>
10006c68:	1c43      	adds	r3, r0, #1
10006c6a:	d102      	bne.n	10006c72 <_sbrk_r+0x1a>
10006c6c:	682b      	ldr	r3, [r5, #0]
10006c6e:	b103      	cbz	r3, 10006c72 <_sbrk_r+0x1a>
10006c70:	6023      	str	r3, [r4, #0]
10006c72:	bd38      	pop	{r3, r4, r5, pc}
10006c74:	1002025c 	.word	0x1002025c

10006c78 <_init>:
10006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006c7a:	bf00      	nop
10006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
10006c7e:	bc08      	pop	{r3}
10006c80:	469e      	mov	lr, r3
10006c82:	4770      	bx	lr

10006c84 <_fini>:
10006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006c86:	bf00      	nop
10006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
10006c8a:	bc08      	pop	{r3}
10006c8c:	469e      	mov	lr, r3
10006c8e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10006c90 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10006c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 10006cc8 <LoopForever+0x2>
  movs  r1, #0
10006c94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10006c96:	e003      	b.n	10006ca0 <LoopCopyDataInit>

10006c98 <CopyDataInit>:
  ldr  r3, =_sidata
10006c98:	4b0c      	ldr	r3, [pc, #48]	; (10006ccc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10006c9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10006c9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10006c9e:	3104      	adds	r1, #4

10006ca0 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10006ca0:	480b      	ldr	r0, [pc, #44]	; (10006cd0 <LoopForever+0xa>)
  ldr  r3, =_edata
10006ca2:	4b0c      	ldr	r3, [pc, #48]	; (10006cd4 <LoopForever+0xe>)
  adds  r2, r0, r1
10006ca4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10006ca6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10006ca8:	d3f6      	bcc.n	10006c98 <CopyDataInit>
  ldr  r2, =_sbss
10006caa:	4a0b      	ldr	r2, [pc, #44]	; (10006cd8 <LoopForever+0x12>)
  b  LoopFillZerobss
10006cac:	e002      	b.n	10006cb4 <LoopFillZerobss>

10006cae <FillZerobss>:
  movs  r3, #0
10006cae:	2300      	movs	r3, #0
  str  r3, [r2], #4
10006cb0:	f842 3b04 	str.w	r3, [r2], #4

10006cb4 <LoopFillZerobss>:
  ldr  r3, = _ebss
10006cb4:	4b09      	ldr	r3, [pc, #36]	; (10006cdc <LoopForever+0x16>)
  cmp  r2, r3
10006cb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
10006cb8:	d3f9      	bcc.n	10006cae <FillZerobss>
  bl  SystemInit
10006cba:	f7f9 f9c1 	bl	10000040 <SystemInit>
 bl __libc_init_array
10006cbe:	f7ff fd79 	bl	100067b4 <__libc_init_array>
  bl main
10006cc2:	f7f9 f9f5 	bl	100000b0 <main>

10006cc6 <LoopForever>:
    b LoopForever
10006cc6:	e7fe      	b.n	10006cc6 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10006cc8:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10006ccc:	10006d1c 	.word	0x10006d1c
  ldr  r0, =_sdata
10006cd0:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10006cd4:	10020068 	.word	0x10020068
  ldr  r2, =_sbss
10006cd8:	10020068 	.word	0x10020068
  ldr  r3, = _ebss
10006cdc:	1002026c 	.word	0x1002026c
