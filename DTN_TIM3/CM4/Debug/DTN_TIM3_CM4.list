
DTN_TIM3_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f68  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10002f68  10002f68  00022f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002fb8  10002fb8  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002fb8  10002fb8  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  10002fb8  10002fb8  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002fb8  10002fb8  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002fb8  10002fb8  00022fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10002fbc  10002fbc  00022fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  10002fc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000060  1002000c  10002fcc  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002006c  1000302c  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000fc2c  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001bbc  00000000  00000000  0003fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000b30  00000000  00000000  00041868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000883  00000000  00000000  00042398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000454d5  00000000  00000000  00042c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000ecc7  00000000  00000000  000880f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001c98c5  00000000  00000000  00096db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002dbc  00000000  00000000  0026067c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00263438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	10002f50 	.word	0x10002f50

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	10002f50 	.word	0x10002f50

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	b086      	sub	sp, #24
10000090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000092:	1d3b      	adds	r3, r7, #4
10000094:	2200      	movs	r2, #0
10000096:	601a      	str	r2, [r3, #0]
10000098:	605a      	str	r2, [r3, #4]
1000009a:	609a      	str	r2, [r3, #8]
1000009c:	60da      	str	r2, [r3, #12]
1000009e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOZ_CLK_ENABLE();
100000a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000a4:	2201      	movs	r2, #1
100000a6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOZ, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5, GPIO_PIN_RESET);
100000aa:	2200      	movs	r2, #0
100000ac:	21e0      	movs	r1, #224	; 0xe0
100000ae:	480a      	ldr	r0, [pc, #40]	; (100000d8 <MX_GPIO_Init+0x4c>)
100000b0:	f000 fcf0 	bl	10000a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PZ6 PZ7 PZ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
100000b4:	23e0      	movs	r3, #224	; 0xe0
100000b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
100000b8:	2301      	movs	r3, #1
100000ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
100000bc:	2300      	movs	r3, #0
100000be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100000c0:	2300      	movs	r3, #0
100000c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOZ, &GPIO_InitStruct);
100000c4:	1d3b      	adds	r3, r7, #4
100000c6:	4619      	mov	r1, r3
100000c8:	4803      	ldr	r0, [pc, #12]	; (100000d8 <MX_GPIO_Init+0x4c>)
100000ca:	f000 fb39 	bl	10000740 <HAL_GPIO_Init>

}
100000ce:	bf00      	nop
100000d0:	3718      	adds	r7, #24
100000d2:	46bd      	mov	sp, r7
100000d4:	bd80      	pop	{r7, pc}
100000d6:	bf00      	nop
100000d8:	54004000 	.word	0x54004000

100000dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/**
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
100000dc:	b580      	push	{r7, lr}
100000de:	b082      	sub	sp, #8
100000e0:	af00      	add	r7, sp, #0
100000e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
100000e4:	687b      	ldr	r3, [r7, #4]
100000e6:	681b      	ldr	r3, [r3, #0]
100000e8:	4a05      	ldr	r2, [pc, #20]	; (10000100 <HAL_TIM_PeriodElapsedCallback+0x24>)
100000ea:	4293      	cmp	r3, r2
100000ec:	d103      	bne.n	100000f6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOZ,GPIO_PIN_5);
100000ee:	2120      	movs	r1, #32
100000f0:	4804      	ldr	r0, [pc, #16]	; (10000104 <HAL_TIM_PeriodElapsedCallback+0x28>)
100000f2:	f000 fce8 	bl	10000ac6 <HAL_GPIO_TogglePin>
	}

}
100000f6:	bf00      	nop
100000f8:	3708      	adds	r7, #8
100000fa:	46bd      	mov	sp, r7
100000fc:	bd80      	pop	{r7, pc}
100000fe:	bf00      	nop
10000100:	40001000 	.word	0x40001000
10000104:	54004000 	.word	0x54004000

10000108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000108:	b580      	push	{r7, lr}
1000010a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
1000010c:	f000 f996 	bl	1000043c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000110:	4b07      	ldr	r3, [pc, #28]	; (10000130 <main+0x28>)
10000112:	681b      	ldr	r3, [r3, #0]
10000114:	f003 0307 	and.w	r3, r3, #7
10000118:	2b04      	cmp	r3, #4
1000011a:	d101      	bne.n	10000120 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
1000011c:	f000 f80c 	bl	10000138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000120:	f7ff ffb4 	bl	1000008c <MX_GPIO_Init>
  MX_TIM3_Init();
10000124:	f000 f91c 	bl	10000360 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PeriodElapsedCallback(&htim3);
10000128:	4802      	ldr	r0, [pc, #8]	; (10000134 <main+0x2c>)
1000012a:	f7ff ffd7 	bl	100000dc <HAL_TIM_PeriodElapsedCallback>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
1000012e:	e7fe      	b.n	1000012e <main+0x26>
10000130:	50020000 	.word	0x50020000
10000134:	10020028 	.word	0x10020028

10000138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000138:	b580      	push	{r7, lr}
1000013a:	b0d2      	sub	sp, #328	; 0x148
1000013c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
1000013e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000142:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000146:	4618      	mov	r0, r3
10000148:	f44f 738a 	mov.w	r3, #276	; 0x114
1000014c:	461a      	mov	r2, r3
1000014e:	2100      	movs	r1, #0
10000150:	f002 fed2 	bl	10002ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000154:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000158:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000015c:	4618      	mov	r0, r3
1000015e:	2330      	movs	r3, #48	; 0x30
10000160:	461a      	mov	r2, r3
10000162:	2100      	movs	r1, #0
10000164:	f002 fec8 	bl	10002ef8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
10000168:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000016c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000170:	220a      	movs	r2, #10
10000172:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000174:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000178:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000017c:	2201      	movs	r2, #1
1000017e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000180:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000184:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000188:	2200      	movs	r2, #0
1000018a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
1000018c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000190:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000194:	2201      	movs	r2, #1
10000196:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000198:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000019c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001a0:	2200      	movs	r2, #0
100001a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
100001a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001ac:	2200      	movs	r2, #0
100001ae:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
100001b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001b8:	2200      	movs	r2, #0
100001ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100001be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001c6:	2200      	movs	r2, #0
100001c8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100001cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001d0:	4618      	mov	r0, r3
100001d2:	f000 fc91 	bl	10000af8 <HAL_RCC_OscConfig>
100001d6:	4603      	mov	r3, r0
100001d8:	2b00      	cmp	r3, #0
100001da:	d001      	beq.n	100001e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
100001dc:	f000 f84a 	bl	10000274 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100001e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001e8:	22fe      	movs	r2, #254	; 0xfe
100001ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
100001ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001f4:	2200      	movs	r2, #0
100001f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100001f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000200:	2200      	movs	r2, #0
10000202:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
10000204:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000208:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000020c:	2200      	movs	r2, #0
1000020e:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000210:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000214:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000218:	2200      	movs	r2, #0
1000021a:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
1000021c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000220:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000224:	2200      	movs	r2, #0
10000226:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000228:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000022c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000230:	2200      	movs	r2, #0
10000232:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
10000234:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000238:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000023c:	2200      	movs	r2, #0
1000023e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
10000240:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000244:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000248:	2200      	movs	r2, #0
1000024a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
1000024c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000250:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000254:	2200      	movs	r2, #0
10000256:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000258:	1d3b      	adds	r3, r7, #4
1000025a:	4618      	mov	r0, r3
1000025c:	f001 f9ea 	bl	10001634 <HAL_RCC_ClockConfig>
10000260:	4603      	mov	r3, r0
10000262:	2b00      	cmp	r3, #0
10000264:	d001      	beq.n	1000026a <SystemClock_Config+0x132>
  {
    Error_Handler();
10000266:	f000 f805 	bl	10000274 <Error_Handler>
  }
}
1000026a:	bf00      	nop
1000026c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000270:	46bd      	mov	sp, r7
10000272:	bd80      	pop	{r7, pc}

10000274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000274:	b480      	push	{r7}
10000276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000278:	b672      	cpsid	i
}
1000027a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
1000027c:	e7fe      	b.n	1000027c <Error_Handler+0x8>

1000027e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1000027e:	b580      	push	{r7, lr}
10000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
10000282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000286:	f44f 6200 	mov.w	r2, #2048	; 0x800
1000028a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
1000028e:	2200      	movs	r2, #0
10000290:	2101      	movs	r1, #1
10000292:	f06f 000b 	mvn.w	r0, #11
10000296:	f000 fa1c 	bl	100006d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
1000029a:	2200      	movs	r2, #0
1000029c:	2101      	movs	r1, #1
1000029e:	f06f 000a 	mvn.w	r0, #10
100002a2:	f000 fa16 	bl	100006d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100002a6:	2200      	movs	r2, #0
100002a8:	2101      	movs	r1, #1
100002aa:	f06f 0009 	mvn.w	r0, #9
100002ae:	f000 fa10 	bl	100006d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100002b2:	2200      	movs	r2, #0
100002b4:	2101      	movs	r1, #1
100002b6:	f06f 0004 	mvn.w	r0, #4
100002ba:	f000 fa0a 	bl	100006d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100002be:	2200      	movs	r2, #0
100002c0:	2101      	movs	r1, #1
100002c2:	f06f 0003 	mvn.w	r0, #3
100002c6:	f000 fa04 	bl	100006d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100002ca:	2200      	movs	r2, #0
100002cc:	2101      	movs	r1, #1
100002ce:	f06f 0001 	mvn.w	r0, #1
100002d2:	f000 f9fe 	bl	100006d2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100002d6:	2200      	movs	r2, #0
100002d8:	2100      	movs	r1, #0
100002da:	2091      	movs	r0, #145	; 0x91
100002dc:	f000 f9f9 	bl	100006d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100002e0:	2091      	movs	r0, #145	; 0x91
100002e2:	f000 fa12 	bl	1000070a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100002e6:	bf00      	nop
100002e8:	bd80      	pop	{r7, pc}

100002ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100002ea:	b480      	push	{r7}
100002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100002ee:	e7fe      	b.n	100002ee <NMI_Handler+0x4>

100002f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100002f0:	b480      	push	{r7}
100002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100002f4:	e7fe      	b.n	100002f4 <HardFault_Handler+0x4>

100002f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100002f6:	b480      	push	{r7}
100002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100002fa:	e7fe      	b.n	100002fa <MemManage_Handler+0x4>

100002fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100002fc:	b480      	push	{r7}
100002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000300:	e7fe      	b.n	10000300 <BusFault_Handler+0x4>

10000302 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10000302:	b480      	push	{r7}
10000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000306:	e7fe      	b.n	10000306 <UsageFault_Handler+0x4>

10000308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000308:	b480      	push	{r7}
1000030a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000030c:	bf00      	nop
1000030e:	46bd      	mov	sp, r7
10000310:	f85d 7b04 	ldr.w	r7, [sp], #4
10000314:	4770      	bx	lr

10000316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000316:	b480      	push	{r7}
10000318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000031a:	bf00      	nop
1000031c:	46bd      	mov	sp, r7
1000031e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000322:	4770      	bx	lr

10000324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000324:	b480      	push	{r7}
10000326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000328:	bf00      	nop
1000032a:	46bd      	mov	sp, r7
1000032c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000330:	4770      	bx	lr

10000332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000332:	b580      	push	{r7, lr}
10000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000336:	f000 f8d1 	bl	100004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000033a:	bf00      	nop
1000033c:	bd80      	pop	{r7, pc}
	...

10000340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
10000340:	b580      	push	{r7, lr}
10000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
10000344:	4802      	ldr	r0, [pc, #8]	; (10000350 <TIM3_IRQHandler+0x10>)
10000346:	f002 fa1e 	bl	10002786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
1000034a:	bf00      	nop
1000034c:	bd80      	pop	{r7, pc}
1000034e:	bf00      	nop
10000350:	10020028 	.word	0x10020028

10000354 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000354:	b580      	push	{r7, lr}
10000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000358:	f001 fd8a 	bl	10001e70 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
1000035c:	bf00      	nop
1000035e:	bd80      	pop	{r7, pc}

10000360 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
10000360:	b580      	push	{r7, lr}
10000362:	b088      	sub	sp, #32
10000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
10000366:	f107 0310 	add.w	r3, r7, #16
1000036a:	2200      	movs	r2, #0
1000036c:	601a      	str	r2, [r3, #0]
1000036e:	605a      	str	r2, [r3, #4]
10000370:	609a      	str	r2, [r3, #8]
10000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
10000374:	1d3b      	adds	r3, r7, #4
10000376:	2200      	movs	r2, #0
10000378:	601a      	str	r2, [r3, #0]
1000037a:	605a      	str	r2, [r3, #4]
1000037c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
1000037e:	4b1e      	ldr	r3, [pc, #120]	; (100003f8 <MX_TIM3_Init+0x98>)
10000380:	4a1e      	ldr	r2, [pc, #120]	; (100003fc <MX_TIM3_Init+0x9c>)
10000382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
10000384:	4b1c      	ldr	r3, [pc, #112]	; (100003f8 <MX_TIM3_Init+0x98>)
10000386:	f641 02ff 	movw	r2, #6399	; 0x18ff
1000038a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
1000038c:	4b1a      	ldr	r3, [pc, #104]	; (100003f8 <MX_TIM3_Init+0x98>)
1000038e:	2200      	movs	r2, #0
10000390:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
10000392:	4b19      	ldr	r3, [pc, #100]	; (100003f8 <MX_TIM3_Init+0x98>)
10000394:	f242 720f 	movw	r2, #9999	; 0x270f
10000398:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1000039a:	4b17      	ldr	r3, [pc, #92]	; (100003f8 <MX_TIM3_Init+0x98>)
1000039c:	2200      	movs	r2, #0
1000039e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
100003a0:	4b15      	ldr	r3, [pc, #84]	; (100003f8 <MX_TIM3_Init+0x98>)
100003a2:	2200      	movs	r2, #0
100003a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
100003a6:	4814      	ldr	r0, [pc, #80]	; (100003f8 <MX_TIM3_Init+0x98>)
100003a8:	f002 f9c2 	bl	10002730 <HAL_TIM_Base_Init>
100003ac:	4603      	mov	r3, r0
100003ae:	2b00      	cmp	r3, #0
100003b0:	d001      	beq.n	100003b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
100003b2:	f7ff ff5f 	bl	10000274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
100003b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
100003ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
100003bc:	f107 0310 	add.w	r3, r7, #16
100003c0:	4619      	mov	r1, r3
100003c2:	480d      	ldr	r0, [pc, #52]	; (100003f8 <MX_TIM3_Init+0x98>)
100003c4:	f002 fafe 	bl	100029c4 <HAL_TIM_ConfigClockSource>
100003c8:	4603      	mov	r3, r0
100003ca:	2b00      	cmp	r3, #0
100003cc:	d001      	beq.n	100003d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
100003ce:	f7ff ff51 	bl	10000274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
100003d2:	2300      	movs	r3, #0
100003d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
100003d6:	2300      	movs	r3, #0
100003d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
100003da:	1d3b      	adds	r3, r7, #4
100003dc:	4619      	mov	r1, r3
100003de:	4806      	ldr	r0, [pc, #24]	; (100003f8 <MX_TIM3_Init+0x98>)
100003e0:	f002 fd12 	bl	10002e08 <HAL_TIMEx_MasterConfigSynchronization>
100003e4:	4603      	mov	r3, r0
100003e6:	2b00      	cmp	r3, #0
100003e8:	d001      	beq.n	100003ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
100003ea:	f7ff ff43 	bl	10000274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
100003ee:	bf00      	nop
100003f0:	3720      	adds	r7, #32
100003f2:	46bd      	mov	sp, r7
100003f4:	bd80      	pop	{r7, pc}
100003f6:	bf00      	nop
100003f8:	10020028 	.word	0x10020028
100003fc:	40001000 	.word	0x40001000

10000400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
10000400:	b580      	push	{r7, lr}
10000402:	b082      	sub	sp, #8
10000404:	af00      	add	r7, sp, #0
10000406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
10000408:	687b      	ldr	r3, [r7, #4]
1000040a:	681b      	ldr	r3, [r3, #0]
1000040c:	4a09      	ldr	r2, [pc, #36]	; (10000434 <HAL_TIM_Base_MspInit+0x34>)
1000040e:	4293      	cmp	r3, r2
10000410:	d10c      	bne.n	1000042c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
10000412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000416:	2202      	movs	r2, #2
10000418:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
1000041c:	2200      	movs	r2, #0
1000041e:	2101      	movs	r1, #1
10000420:	201d      	movs	r0, #29
10000422:	f000 f956 	bl	100006d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
10000426:	201d      	movs	r0, #29
10000428:	f000 f96f 	bl	1000070a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
1000042c:	bf00      	nop
1000042e:	3708      	adds	r7, #8
10000430:	46bd      	mov	sp, r7
10000432:	bd80      	pop	{r7, pc}
10000434:	40001000 	.word	0x40001000

10000438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000438:	e7fe      	b.n	10000438 <ADC1_IRQHandler>
	...

1000043c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000043c:	b580      	push	{r7, lr}
1000043e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000440:	2003      	movs	r0, #3
10000442:	f000 f93b 	bl	100006bc <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000446:	f001 fcd2 	bl	10001dee <HAL_RCC_GetSystemCoreClockFreq>
1000044a:	4603      	mov	r3, r0
1000044c:	4a07      	ldr	r2, [pc, #28]	; (1000046c <HAL_Init+0x30>)
1000044e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000450:	200f      	movs	r0, #15
10000452:	f000 f80d 	bl	10000470 <HAL_InitTick>
10000456:	4603      	mov	r3, r0
10000458:	2b00      	cmp	r3, #0
1000045a:	d001      	beq.n	10000460 <HAL_Init+0x24>
  {
    return HAL_ERROR;
1000045c:	2301      	movs	r3, #1
1000045e:	e002      	b.n	10000466 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000460:	f7ff ff0d 	bl	1000027e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000464:	2300      	movs	r3, #0
}
10000466:	4618      	mov	r0, r3
10000468:	bd80      	pop	{r7, pc}
1000046a:	bf00      	nop
1000046c:	10020000 	.word	0x10020000

10000470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000470:	b580      	push	{r7, lr}
10000472:	b082      	sub	sp, #8
10000474:	af00      	add	r7, sp, #0
10000476:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000478:	4b15      	ldr	r3, [pc, #84]	; (100004d0 <HAL_InitTick+0x60>)
1000047a:	781b      	ldrb	r3, [r3, #0]
1000047c:	2b00      	cmp	r3, #0
1000047e:	d101      	bne.n	10000484 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000480:	2301      	movs	r3, #1
10000482:	e021      	b.n	100004c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000484:	4b13      	ldr	r3, [pc, #76]	; (100004d4 <HAL_InitTick+0x64>)
10000486:	681a      	ldr	r2, [r3, #0]
10000488:	4b11      	ldr	r3, [pc, #68]	; (100004d0 <HAL_InitTick+0x60>)
1000048a:	781b      	ldrb	r3, [r3, #0]
1000048c:	4619      	mov	r1, r3
1000048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
10000492:	fbb3 f3f1 	udiv	r3, r3, r1
10000496:	fbb2 f3f3 	udiv	r3, r2, r3
1000049a:	4618      	mov	r0, r3
1000049c:	f000 f943 	bl	10000726 <HAL_SYSTICK_Config>
100004a0:	4603      	mov	r3, r0
100004a2:	2b00      	cmp	r3, #0
100004a4:	d001      	beq.n	100004aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100004a6:	2301      	movs	r3, #1
100004a8:	e00e      	b.n	100004c8 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100004aa:	687b      	ldr	r3, [r7, #4]
100004ac:	2b0f      	cmp	r3, #15
100004ae:	d80a      	bhi.n	100004c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100004b0:	2200      	movs	r2, #0
100004b2:	6879      	ldr	r1, [r7, #4]
100004b4:	f04f 30ff 	mov.w	r0, #4294967295
100004b8:	f000 f90b 	bl	100006d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100004bc:	4a06      	ldr	r2, [pc, #24]	; (100004d8 <HAL_InitTick+0x68>)
100004be:	687b      	ldr	r3, [r7, #4]
100004c0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100004c2:	2300      	movs	r3, #0
100004c4:	e000      	b.n	100004c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
100004c6:	2301      	movs	r3, #1
}
100004c8:	4618      	mov	r0, r3
100004ca:	3708      	adds	r7, #8
100004cc:	46bd      	mov	sp, r7
100004ce:	bd80      	pop	{r7, pc}
100004d0:	10020008 	.word	0x10020008
100004d4:	10020000 	.word	0x10020000
100004d8:	10020004 	.word	0x10020004

100004dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100004dc:	b480      	push	{r7}
100004de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100004e0:	4b06      	ldr	r3, [pc, #24]	; (100004fc <HAL_IncTick+0x20>)
100004e2:	781b      	ldrb	r3, [r3, #0]
100004e4:	461a      	mov	r2, r3
100004e6:	4b06      	ldr	r3, [pc, #24]	; (10000500 <HAL_IncTick+0x24>)
100004e8:	681b      	ldr	r3, [r3, #0]
100004ea:	4413      	add	r3, r2
100004ec:	4a04      	ldr	r2, [pc, #16]	; (10000500 <HAL_IncTick+0x24>)
100004ee:	6013      	str	r3, [r2, #0]
}
100004f0:	bf00      	nop
100004f2:	46bd      	mov	sp, r7
100004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100004f8:	4770      	bx	lr
100004fa:	bf00      	nop
100004fc:	10020008 	.word	0x10020008
10000500:	10020068 	.word	0x10020068

10000504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000504:	b480      	push	{r7}
10000506:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000508:	4b03      	ldr	r3, [pc, #12]	; (10000518 <HAL_GetTick+0x14>)
1000050a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
1000050c:	4618      	mov	r0, r3
1000050e:	46bd      	mov	sp, r7
10000510:	f85d 7b04 	ldr.w	r7, [sp], #4
10000514:	4770      	bx	lr
10000516:	bf00      	nop
10000518:	10020068 	.word	0x10020068

1000051c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000051c:	b480      	push	{r7}
1000051e:	b085      	sub	sp, #20
10000520:	af00      	add	r7, sp, #0
10000522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000524:	687b      	ldr	r3, [r7, #4]
10000526:	f003 0307 	and.w	r3, r3, #7
1000052a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
1000052c:	4b0c      	ldr	r3, [pc, #48]	; (10000560 <__NVIC_SetPriorityGrouping+0x44>)
1000052e:	68db      	ldr	r3, [r3, #12]
10000530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000532:	68ba      	ldr	r2, [r7, #8]
10000534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000538:	4013      	ands	r3, r2
1000053a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
1000053c:	68fb      	ldr	r3, [r7, #12]
1000053e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000540:	68bb      	ldr	r3, [r7, #8]
10000542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
1000054c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000054e:	4a04      	ldr	r2, [pc, #16]	; (10000560 <__NVIC_SetPriorityGrouping+0x44>)
10000550:	68bb      	ldr	r3, [r7, #8]
10000552:	60d3      	str	r3, [r2, #12]
}
10000554:	bf00      	nop
10000556:	3714      	adds	r7, #20
10000558:	46bd      	mov	sp, r7
1000055a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000055e:	4770      	bx	lr
10000560:	e000ed00 	.word	0xe000ed00

10000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000564:	b480      	push	{r7}
10000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000568:	4b04      	ldr	r3, [pc, #16]	; (1000057c <__NVIC_GetPriorityGrouping+0x18>)
1000056a:	68db      	ldr	r3, [r3, #12]
1000056c:	0a1b      	lsrs	r3, r3, #8
1000056e:	f003 0307 	and.w	r3, r3, #7
}
10000572:	4618      	mov	r0, r3
10000574:	46bd      	mov	sp, r7
10000576:	f85d 7b04 	ldr.w	r7, [sp], #4
1000057a:	4770      	bx	lr
1000057c:	e000ed00 	.word	0xe000ed00

10000580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000580:	b480      	push	{r7}
10000582:	b083      	sub	sp, #12
10000584:	af00      	add	r7, sp, #0
10000586:	4603      	mov	r3, r0
10000588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000058a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000058e:	2b00      	cmp	r3, #0
10000590:	db0b      	blt.n	100005aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000592:	88fb      	ldrh	r3, [r7, #6]
10000594:	f003 021f 	and.w	r2, r3, #31
10000598:	4907      	ldr	r1, [pc, #28]	; (100005b8 <__NVIC_EnableIRQ+0x38>)
1000059a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000059e:	095b      	lsrs	r3, r3, #5
100005a0:	2001      	movs	r0, #1
100005a2:	fa00 f202 	lsl.w	r2, r0, r2
100005a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100005aa:	bf00      	nop
100005ac:	370c      	adds	r7, #12
100005ae:	46bd      	mov	sp, r7
100005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100005b4:	4770      	bx	lr
100005b6:	bf00      	nop
100005b8:	e000e100 	.word	0xe000e100

100005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100005bc:	b480      	push	{r7}
100005be:	b083      	sub	sp, #12
100005c0:	af00      	add	r7, sp, #0
100005c2:	4603      	mov	r3, r0
100005c4:	6039      	str	r1, [r7, #0]
100005c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100005cc:	2b00      	cmp	r3, #0
100005ce:	db0a      	blt.n	100005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100005d0:	683b      	ldr	r3, [r7, #0]
100005d2:	b2da      	uxtb	r2, r3
100005d4:	490c      	ldr	r1, [pc, #48]	; (10000608 <__NVIC_SetPriority+0x4c>)
100005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100005da:	0112      	lsls	r2, r2, #4
100005dc:	b2d2      	uxtb	r2, r2
100005de:	440b      	add	r3, r1
100005e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100005e4:	e00a      	b.n	100005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100005e6:	683b      	ldr	r3, [r7, #0]
100005e8:	b2da      	uxtb	r2, r3
100005ea:	4908      	ldr	r1, [pc, #32]	; (1000060c <__NVIC_SetPriority+0x50>)
100005ec:	88fb      	ldrh	r3, [r7, #6]
100005ee:	f003 030f 	and.w	r3, r3, #15
100005f2:	3b04      	subs	r3, #4
100005f4:	0112      	lsls	r2, r2, #4
100005f6:	b2d2      	uxtb	r2, r2
100005f8:	440b      	add	r3, r1
100005fa:	761a      	strb	r2, [r3, #24]
}
100005fc:	bf00      	nop
100005fe:	370c      	adds	r7, #12
10000600:	46bd      	mov	sp, r7
10000602:	f85d 7b04 	ldr.w	r7, [sp], #4
10000606:	4770      	bx	lr
10000608:	e000e100 	.word	0xe000e100
1000060c:	e000ed00 	.word	0xe000ed00

10000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000610:	b480      	push	{r7}
10000612:	b089      	sub	sp, #36	; 0x24
10000614:	af00      	add	r7, sp, #0
10000616:	60f8      	str	r0, [r7, #12]
10000618:	60b9      	str	r1, [r7, #8]
1000061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
1000061c:	68fb      	ldr	r3, [r7, #12]
1000061e:	f003 0307 	and.w	r3, r3, #7
10000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000624:	69fb      	ldr	r3, [r7, #28]
10000626:	f1c3 0307 	rsb	r3, r3, #7
1000062a:	2b04      	cmp	r3, #4
1000062c:	bf28      	it	cs
1000062e:	2304      	movcs	r3, #4
10000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000632:	69fb      	ldr	r3, [r7, #28]
10000634:	3304      	adds	r3, #4
10000636:	2b06      	cmp	r3, #6
10000638:	d902      	bls.n	10000640 <NVIC_EncodePriority+0x30>
1000063a:	69fb      	ldr	r3, [r7, #28]
1000063c:	3b03      	subs	r3, #3
1000063e:	e000      	b.n	10000642 <NVIC_EncodePriority+0x32>
10000640:	2300      	movs	r3, #0
10000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000644:	f04f 32ff 	mov.w	r2, #4294967295
10000648:	69bb      	ldr	r3, [r7, #24]
1000064a:	fa02 f303 	lsl.w	r3, r2, r3
1000064e:	43da      	mvns	r2, r3
10000650:	68bb      	ldr	r3, [r7, #8]
10000652:	401a      	ands	r2, r3
10000654:	697b      	ldr	r3, [r7, #20]
10000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000658:	f04f 31ff 	mov.w	r1, #4294967295
1000065c:	697b      	ldr	r3, [r7, #20]
1000065e:	fa01 f303 	lsl.w	r3, r1, r3
10000662:	43d9      	mvns	r1, r3
10000664:	687b      	ldr	r3, [r7, #4]
10000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000668:	4313      	orrs	r3, r2
         );
}
1000066a:	4618      	mov	r0, r3
1000066c:	3724      	adds	r7, #36	; 0x24
1000066e:	46bd      	mov	sp, r7
10000670:	f85d 7b04 	ldr.w	r7, [sp], #4
10000674:	4770      	bx	lr
	...

10000678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000678:	b580      	push	{r7, lr}
1000067a:	b082      	sub	sp, #8
1000067c:	af00      	add	r7, sp, #0
1000067e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000680:	687b      	ldr	r3, [r7, #4]
10000682:	3b01      	subs	r3, #1
10000684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000688:	d301      	bcc.n	1000068e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000068a:	2301      	movs	r3, #1
1000068c:	e00f      	b.n	100006ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000068e:	4a0a      	ldr	r2, [pc, #40]	; (100006b8 <SysTick_Config+0x40>)
10000690:	687b      	ldr	r3, [r7, #4]
10000692:	3b01      	subs	r3, #1
10000694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000696:	210f      	movs	r1, #15
10000698:	f04f 30ff 	mov.w	r0, #4294967295
1000069c:	f7ff ff8e 	bl	100005bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100006a0:	4b05      	ldr	r3, [pc, #20]	; (100006b8 <SysTick_Config+0x40>)
100006a2:	2200      	movs	r2, #0
100006a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100006a6:	4b04      	ldr	r3, [pc, #16]	; (100006b8 <SysTick_Config+0x40>)
100006a8:	2207      	movs	r2, #7
100006aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100006ac:	2300      	movs	r3, #0
}
100006ae:	4618      	mov	r0, r3
100006b0:	3708      	adds	r7, #8
100006b2:	46bd      	mov	sp, r7
100006b4:	bd80      	pop	{r7, pc}
100006b6:	bf00      	nop
100006b8:	e000e010 	.word	0xe000e010

100006bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100006bc:	b580      	push	{r7, lr}
100006be:	b082      	sub	sp, #8
100006c0:	af00      	add	r7, sp, #0
100006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100006c4:	6878      	ldr	r0, [r7, #4]
100006c6:	f7ff ff29 	bl	1000051c <__NVIC_SetPriorityGrouping>
}
100006ca:	bf00      	nop
100006cc:	3708      	adds	r7, #8
100006ce:	46bd      	mov	sp, r7
100006d0:	bd80      	pop	{r7, pc}

100006d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100006d2:	b580      	push	{r7, lr}
100006d4:	b086      	sub	sp, #24
100006d6:	af00      	add	r7, sp, #0
100006d8:	4603      	mov	r3, r0
100006da:	60b9      	str	r1, [r7, #8]
100006dc:	607a      	str	r2, [r7, #4]
100006de:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100006e0:	2300      	movs	r3, #0
100006e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100006e4:	f7ff ff3e 	bl	10000564 <__NVIC_GetPriorityGrouping>
100006e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100006ea:	687a      	ldr	r2, [r7, #4]
100006ec:	68b9      	ldr	r1, [r7, #8]
100006ee:	6978      	ldr	r0, [r7, #20]
100006f0:	f7ff ff8e 	bl	10000610 <NVIC_EncodePriority>
100006f4:	4602      	mov	r2, r0
100006f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
100006fa:	4611      	mov	r1, r2
100006fc:	4618      	mov	r0, r3
100006fe:	f7ff ff5d 	bl	100005bc <__NVIC_SetPriority>
}
10000702:	bf00      	nop
10000704:	3718      	adds	r7, #24
10000706:	46bd      	mov	sp, r7
10000708:	bd80      	pop	{r7, pc}

1000070a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000070a:	b580      	push	{r7, lr}
1000070c:	b082      	sub	sp, #8
1000070e:	af00      	add	r7, sp, #0
10000710:	4603      	mov	r3, r0
10000712:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000718:	4618      	mov	r0, r3
1000071a:	f7ff ff31 	bl	10000580 <__NVIC_EnableIRQ>
}
1000071e:	bf00      	nop
10000720:	3708      	adds	r7, #8
10000722:	46bd      	mov	sp, r7
10000724:	bd80      	pop	{r7, pc}

10000726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000726:	b580      	push	{r7, lr}
10000728:	b082      	sub	sp, #8
1000072a:	af00      	add	r7, sp, #0
1000072c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000072e:	6878      	ldr	r0, [r7, #4]
10000730:	f7ff ffa2 	bl	10000678 <SysTick_Config>
10000734:	4603      	mov	r3, r0
}
10000736:	4618      	mov	r0, r3
10000738:	3708      	adds	r7, #8
1000073a:	46bd      	mov	sp, r7
1000073c:	bd80      	pop	{r7, pc}
	...

10000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10000740:	b480      	push	{r7}
10000742:	b089      	sub	sp, #36	; 0x24
10000744:	af00      	add	r7, sp, #0
10000746:	6078      	str	r0, [r7, #4]
10000748:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000074a:	4b8a      	ldr	r3, [pc, #552]	; (10000974 <HAL_GPIO_Init+0x234>)
1000074c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000074e:	2300      	movs	r3, #0
10000750:	61fb      	str	r3, [r7, #28]
10000752:	e191      	b.n	10000a78 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10000754:	2201      	movs	r2, #1
10000756:	69fb      	ldr	r3, [r7, #28]
10000758:	fa02 f303 	lsl.w	r3, r2, r3
1000075c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000075e:	683b      	ldr	r3, [r7, #0]
10000760:	681b      	ldr	r3, [r3, #0]
10000762:	693a      	ldr	r2, [r7, #16]
10000764:	4013      	ands	r3, r2
10000766:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000768:	68fa      	ldr	r2, [r7, #12]
1000076a:	693b      	ldr	r3, [r7, #16]
1000076c:	429a      	cmp	r2, r3
1000076e:	f040 8180 	bne.w	10000a72 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000772:	683b      	ldr	r3, [r7, #0]
10000774:	685b      	ldr	r3, [r3, #4]
10000776:	2b02      	cmp	r3, #2
10000778:	d003      	beq.n	10000782 <HAL_GPIO_Init+0x42>
1000077a:	683b      	ldr	r3, [r7, #0]
1000077c:	685b      	ldr	r3, [r3, #4]
1000077e:	2b12      	cmp	r3, #18
10000780:	d123      	bne.n	100007ca <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10000782:	69fb      	ldr	r3, [r7, #28]
10000784:	08da      	lsrs	r2, r3, #3
10000786:	687b      	ldr	r3, [r7, #4]
10000788:	3208      	adds	r2, #8
1000078a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000078e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000790:	69fb      	ldr	r3, [r7, #28]
10000792:	f003 0307 	and.w	r3, r3, #7
10000796:	009b      	lsls	r3, r3, #2
10000798:	220f      	movs	r2, #15
1000079a:	fa02 f303 	lsl.w	r3, r2, r3
1000079e:	43db      	mvns	r3, r3
100007a0:	69ba      	ldr	r2, [r7, #24]
100007a2:	4013      	ands	r3, r2
100007a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100007a6:	683b      	ldr	r3, [r7, #0]
100007a8:	691a      	ldr	r2, [r3, #16]
100007aa:	69fb      	ldr	r3, [r7, #28]
100007ac:	f003 0307 	and.w	r3, r3, #7
100007b0:	009b      	lsls	r3, r3, #2
100007b2:	fa02 f303 	lsl.w	r3, r2, r3
100007b6:	69ba      	ldr	r2, [r7, #24]
100007b8:	4313      	orrs	r3, r2
100007ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100007bc:	69fb      	ldr	r3, [r7, #28]
100007be:	08da      	lsrs	r2, r3, #3
100007c0:	687b      	ldr	r3, [r7, #4]
100007c2:	3208      	adds	r2, #8
100007c4:	69b9      	ldr	r1, [r7, #24]
100007c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100007ca:	687b      	ldr	r3, [r7, #4]
100007cc:	681b      	ldr	r3, [r3, #0]
100007ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100007d0:	69fb      	ldr	r3, [r7, #28]
100007d2:	005b      	lsls	r3, r3, #1
100007d4:	2203      	movs	r2, #3
100007d6:	fa02 f303 	lsl.w	r3, r2, r3
100007da:	43db      	mvns	r3, r3
100007dc:	69ba      	ldr	r2, [r7, #24]
100007de:	4013      	ands	r3, r2
100007e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100007e2:	683b      	ldr	r3, [r7, #0]
100007e4:	685b      	ldr	r3, [r3, #4]
100007e6:	f003 0203 	and.w	r2, r3, #3
100007ea:	69fb      	ldr	r3, [r7, #28]
100007ec:	005b      	lsls	r3, r3, #1
100007ee:	fa02 f303 	lsl.w	r3, r2, r3
100007f2:	69ba      	ldr	r2, [r7, #24]
100007f4:	4313      	orrs	r3, r2
100007f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100007f8:	687b      	ldr	r3, [r7, #4]
100007fa:	69ba      	ldr	r2, [r7, #24]
100007fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100007fe:	683b      	ldr	r3, [r7, #0]
10000800:	685b      	ldr	r3, [r3, #4]
10000802:	2b01      	cmp	r3, #1
10000804:	d00b      	beq.n	1000081e <HAL_GPIO_Init+0xde>
10000806:	683b      	ldr	r3, [r7, #0]
10000808:	685b      	ldr	r3, [r3, #4]
1000080a:	2b02      	cmp	r3, #2
1000080c:	d007      	beq.n	1000081e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000080e:	683b      	ldr	r3, [r7, #0]
10000810:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000812:	2b11      	cmp	r3, #17
10000814:	d003      	beq.n	1000081e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000816:	683b      	ldr	r3, [r7, #0]
10000818:	685b      	ldr	r3, [r3, #4]
1000081a:	2b12      	cmp	r3, #18
1000081c:	d130      	bne.n	10000880 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000081e:	687b      	ldr	r3, [r7, #4]
10000820:	689b      	ldr	r3, [r3, #8]
10000822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000824:	69fb      	ldr	r3, [r7, #28]
10000826:	005b      	lsls	r3, r3, #1
10000828:	2203      	movs	r2, #3
1000082a:	fa02 f303 	lsl.w	r3, r2, r3
1000082e:	43db      	mvns	r3, r3
10000830:	69ba      	ldr	r2, [r7, #24]
10000832:	4013      	ands	r3, r2
10000834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000836:	683b      	ldr	r3, [r7, #0]
10000838:	68da      	ldr	r2, [r3, #12]
1000083a:	69fb      	ldr	r3, [r7, #28]
1000083c:	005b      	lsls	r3, r3, #1
1000083e:	fa02 f303 	lsl.w	r3, r2, r3
10000842:	69ba      	ldr	r2, [r7, #24]
10000844:	4313      	orrs	r3, r2
10000846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000848:	687b      	ldr	r3, [r7, #4]
1000084a:	69ba      	ldr	r2, [r7, #24]
1000084c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000084e:	687b      	ldr	r3, [r7, #4]
10000850:	685b      	ldr	r3, [r3, #4]
10000852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000854:	2201      	movs	r2, #1
10000856:	69fb      	ldr	r3, [r7, #28]
10000858:	fa02 f303 	lsl.w	r3, r2, r3
1000085c:	43db      	mvns	r3, r3
1000085e:	69ba      	ldr	r2, [r7, #24]
10000860:	4013      	ands	r3, r2
10000862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000864:	683b      	ldr	r3, [r7, #0]
10000866:	685b      	ldr	r3, [r3, #4]
10000868:	091b      	lsrs	r3, r3, #4
1000086a:	f003 0201 	and.w	r2, r3, #1
1000086e:	69fb      	ldr	r3, [r7, #28]
10000870:	fa02 f303 	lsl.w	r3, r2, r3
10000874:	69ba      	ldr	r2, [r7, #24]
10000876:	4313      	orrs	r3, r2
10000878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	69ba      	ldr	r2, [r7, #24]
1000087e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10000880:	687b      	ldr	r3, [r7, #4]
10000882:	68db      	ldr	r3, [r3, #12]
10000884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10000886:	69fb      	ldr	r3, [r7, #28]
10000888:	005b      	lsls	r3, r3, #1
1000088a:	2203      	movs	r2, #3
1000088c:	fa02 f303 	lsl.w	r3, r2, r3
10000890:	43db      	mvns	r3, r3
10000892:	69ba      	ldr	r2, [r7, #24]
10000894:	4013      	ands	r3, r2
10000896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000898:	683b      	ldr	r3, [r7, #0]
1000089a:	689a      	ldr	r2, [r3, #8]
1000089c:	69fb      	ldr	r3, [r7, #28]
1000089e:	005b      	lsls	r3, r3, #1
100008a0:	fa02 f303 	lsl.w	r3, r2, r3
100008a4:	69ba      	ldr	r2, [r7, #24]
100008a6:	4313      	orrs	r3, r2
100008a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
100008aa:	687b      	ldr	r3, [r7, #4]
100008ac:	69ba      	ldr	r2, [r7, #24]
100008ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100008b0:	683b      	ldr	r3, [r7, #0]
100008b2:	685b      	ldr	r3, [r3, #4]
100008b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100008b8:	2b00      	cmp	r3, #0
100008ba:	f000 80da 	beq.w	10000a72 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
100008be:	4a2e      	ldr	r2, [pc, #184]	; (10000978 <HAL_GPIO_Init+0x238>)
100008c0:	69fb      	ldr	r3, [r7, #28]
100008c2:	089b      	lsrs	r3, r3, #2
100008c4:	3318      	adds	r3, #24
100008c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100008ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
100008cc:	69fb      	ldr	r3, [r7, #28]
100008ce:	f003 0303 	and.w	r3, r3, #3
100008d2:	00db      	lsls	r3, r3, #3
100008d4:	22ff      	movs	r2, #255	; 0xff
100008d6:	fa02 f303 	lsl.w	r3, r2, r3
100008da:	43db      	mvns	r3, r3
100008dc:	69ba      	ldr	r2, [r7, #24]
100008de:	4013      	ands	r3, r2
100008e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100008e2:	687b      	ldr	r3, [r7, #4]
100008e4:	4a25      	ldr	r2, [pc, #148]	; (1000097c <HAL_GPIO_Init+0x23c>)
100008e6:	4293      	cmp	r3, r2
100008e8:	d05e      	beq.n	100009a8 <HAL_GPIO_Init+0x268>
100008ea:	687b      	ldr	r3, [r7, #4]
100008ec:	4a24      	ldr	r2, [pc, #144]	; (10000980 <HAL_GPIO_Init+0x240>)
100008ee:	4293      	cmp	r3, r2
100008f0:	d03d      	beq.n	1000096e <HAL_GPIO_Init+0x22e>
100008f2:	687b      	ldr	r3, [r7, #4]
100008f4:	4a23      	ldr	r2, [pc, #140]	; (10000984 <HAL_GPIO_Init+0x244>)
100008f6:	4293      	cmp	r3, r2
100008f8:	d037      	beq.n	1000096a <HAL_GPIO_Init+0x22a>
100008fa:	687b      	ldr	r3, [r7, #4]
100008fc:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000900:	d031      	beq.n	10000966 <HAL_GPIO_Init+0x226>
10000902:	687b      	ldr	r3, [r7, #4]
10000904:	4a20      	ldr	r2, [pc, #128]	; (10000988 <HAL_GPIO_Init+0x248>)
10000906:	4293      	cmp	r3, r2
10000908:	d02b      	beq.n	10000962 <HAL_GPIO_Init+0x222>
1000090a:	687b      	ldr	r3, [r7, #4]
1000090c:	4a1f      	ldr	r2, [pc, #124]	; (1000098c <HAL_GPIO_Init+0x24c>)
1000090e:	4293      	cmp	r3, r2
10000910:	d025      	beq.n	1000095e <HAL_GPIO_Init+0x21e>
10000912:	687b      	ldr	r3, [r7, #4]
10000914:	4a1e      	ldr	r2, [pc, #120]	; (10000990 <HAL_GPIO_Init+0x250>)
10000916:	4293      	cmp	r3, r2
10000918:	d01f      	beq.n	1000095a <HAL_GPIO_Init+0x21a>
1000091a:	687b      	ldr	r3, [r7, #4]
1000091c:	4a1d      	ldr	r2, [pc, #116]	; (10000994 <HAL_GPIO_Init+0x254>)
1000091e:	4293      	cmp	r3, r2
10000920:	d019      	beq.n	10000956 <HAL_GPIO_Init+0x216>
10000922:	687b      	ldr	r3, [r7, #4]
10000924:	4a1c      	ldr	r2, [pc, #112]	; (10000998 <HAL_GPIO_Init+0x258>)
10000926:	4293      	cmp	r3, r2
10000928:	d013      	beq.n	10000952 <HAL_GPIO_Init+0x212>
1000092a:	687b      	ldr	r3, [r7, #4]
1000092c:	4a1b      	ldr	r2, [pc, #108]	; (1000099c <HAL_GPIO_Init+0x25c>)
1000092e:	4293      	cmp	r3, r2
10000930:	d00d      	beq.n	1000094e <HAL_GPIO_Init+0x20e>
10000932:	687b      	ldr	r3, [r7, #4]
10000934:	4a1a      	ldr	r2, [pc, #104]	; (100009a0 <HAL_GPIO_Init+0x260>)
10000936:	4293      	cmp	r3, r2
10000938:	d007      	beq.n	1000094a <HAL_GPIO_Init+0x20a>
1000093a:	687b      	ldr	r3, [r7, #4]
1000093c:	4a19      	ldr	r2, [pc, #100]	; (100009a4 <HAL_GPIO_Init+0x264>)
1000093e:	4293      	cmp	r3, r2
10000940:	d101      	bne.n	10000946 <HAL_GPIO_Init+0x206>
10000942:	230b      	movs	r3, #11
10000944:	e031      	b.n	100009aa <HAL_GPIO_Init+0x26a>
10000946:	2319      	movs	r3, #25
10000948:	e02f      	b.n	100009aa <HAL_GPIO_Init+0x26a>
1000094a:	230a      	movs	r3, #10
1000094c:	e02d      	b.n	100009aa <HAL_GPIO_Init+0x26a>
1000094e:	2309      	movs	r3, #9
10000950:	e02b      	b.n	100009aa <HAL_GPIO_Init+0x26a>
10000952:	2308      	movs	r3, #8
10000954:	e029      	b.n	100009aa <HAL_GPIO_Init+0x26a>
10000956:	2307      	movs	r3, #7
10000958:	e027      	b.n	100009aa <HAL_GPIO_Init+0x26a>
1000095a:	2306      	movs	r3, #6
1000095c:	e025      	b.n	100009aa <HAL_GPIO_Init+0x26a>
1000095e:	2305      	movs	r3, #5
10000960:	e023      	b.n	100009aa <HAL_GPIO_Init+0x26a>
10000962:	2304      	movs	r3, #4
10000964:	e021      	b.n	100009aa <HAL_GPIO_Init+0x26a>
10000966:	2303      	movs	r3, #3
10000968:	e01f      	b.n	100009aa <HAL_GPIO_Init+0x26a>
1000096a:	2302      	movs	r3, #2
1000096c:	e01d      	b.n	100009aa <HAL_GPIO_Init+0x26a>
1000096e:	2301      	movs	r3, #1
10000970:	e01b      	b.n	100009aa <HAL_GPIO_Init+0x26a>
10000972:	bf00      	nop
10000974:	5000d0c0 	.word	0x5000d0c0
10000978:	5000d000 	.word	0x5000d000
1000097c:	50002000 	.word	0x50002000
10000980:	50003000 	.word	0x50003000
10000984:	50004000 	.word	0x50004000
10000988:	50006000 	.word	0x50006000
1000098c:	50007000 	.word	0x50007000
10000990:	50008000 	.word	0x50008000
10000994:	50009000 	.word	0x50009000
10000998:	5000a000 	.word	0x5000a000
1000099c:	5000b000 	.word	0x5000b000
100009a0:	5000c000 	.word	0x5000c000
100009a4:	54004000 	.word	0x54004000
100009a8:	2300      	movs	r3, #0
100009aa:	69fa      	ldr	r2, [r7, #28]
100009ac:	f002 0203 	and.w	r2, r2, #3
100009b0:	00d2      	lsls	r2, r2, #3
100009b2:	4093      	lsls	r3, r2
100009b4:	461a      	mov	r2, r3
100009b6:	69bb      	ldr	r3, [r7, #24]
100009b8:	4313      	orrs	r3, r2
100009ba:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
100009bc:	4934      	ldr	r1, [pc, #208]	; (10000a90 <HAL_GPIO_Init+0x350>)
100009be:	69fb      	ldr	r3, [r7, #28]
100009c0:	089b      	lsrs	r3, r3, #2
100009c2:	3318      	adds	r3, #24
100009c4:	69ba      	ldr	r2, [r7, #24]
100009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
100009ca:	697b      	ldr	r3, [r7, #20]
100009cc:	681b      	ldr	r3, [r3, #0]
100009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100009d0:	68fb      	ldr	r3, [r7, #12]
100009d2:	43db      	mvns	r3, r3
100009d4:	69ba      	ldr	r2, [r7, #24]
100009d6:	4013      	ands	r3, r2
100009d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100009da:	683b      	ldr	r3, [r7, #0]
100009dc:	685b      	ldr	r3, [r3, #4]
100009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
100009e2:	2b00      	cmp	r3, #0
100009e4:	d003      	beq.n	100009ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100009e6:	69ba      	ldr	r2, [r7, #24]
100009e8:	68fb      	ldr	r3, [r7, #12]
100009ea:	4313      	orrs	r3, r2
100009ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
100009ee:	697b      	ldr	r3, [r7, #20]
100009f0:	69ba      	ldr	r2, [r7, #24]
100009f2:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
100009f4:	697b      	ldr	r3, [r7, #20]
100009f6:	685b      	ldr	r3, [r3, #4]
100009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100009fa:	68fb      	ldr	r3, [r7, #12]
100009fc:	43db      	mvns	r3, r3
100009fe:	69ba      	ldr	r2, [r7, #24]
10000a00:	4013      	ands	r3, r2
10000a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000a04:	683b      	ldr	r3, [r7, #0]
10000a06:	685b      	ldr	r3, [r3, #4]
10000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000a0c:	2b00      	cmp	r3, #0
10000a0e:	d003      	beq.n	10000a18 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000a10:	69ba      	ldr	r2, [r7, #24]
10000a12:	68fb      	ldr	r3, [r7, #12]
10000a14:	4313      	orrs	r3, r2
10000a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000a18:	697b      	ldr	r3, [r7, #20]
10000a1a:	69ba      	ldr	r2, [r7, #24]
10000a1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000a1e:	4b1c      	ldr	r3, [pc, #112]	; (10000a90 <HAL_GPIO_Init+0x350>)
10000a20:	681b      	ldr	r3, [r3, #0]
10000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a24:	68fb      	ldr	r3, [r7, #12]
10000a26:	43db      	mvns	r3, r3
10000a28:	69ba      	ldr	r2, [r7, #24]
10000a2a:	4013      	ands	r3, r2
10000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000a2e:	683b      	ldr	r3, [r7, #0]
10000a30:	685b      	ldr	r3, [r3, #4]
10000a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000a36:	2b00      	cmp	r3, #0
10000a38:	d003      	beq.n	10000a42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000a3a:	69ba      	ldr	r2, [r7, #24]
10000a3c:	68fb      	ldr	r3, [r7, #12]
10000a3e:	4313      	orrs	r3, r2
10000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000a42:	4a13      	ldr	r2, [pc, #76]	; (10000a90 <HAL_GPIO_Init+0x350>)
10000a44:	69bb      	ldr	r3, [r7, #24]
10000a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000a48:	4b11      	ldr	r3, [pc, #68]	; (10000a90 <HAL_GPIO_Init+0x350>)
10000a4a:	685b      	ldr	r3, [r3, #4]
10000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a4e:	68fb      	ldr	r3, [r7, #12]
10000a50:	43db      	mvns	r3, r3
10000a52:	69ba      	ldr	r2, [r7, #24]
10000a54:	4013      	ands	r3, r2
10000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000a58:	683b      	ldr	r3, [r7, #0]
10000a5a:	685b      	ldr	r3, [r3, #4]
10000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10000a60:	2b00      	cmp	r3, #0
10000a62:	d003      	beq.n	10000a6c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000a64:	69ba      	ldr	r2, [r7, #24]
10000a66:	68fb      	ldr	r3, [r7, #12]
10000a68:	4313      	orrs	r3, r2
10000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000a6c:	4a08      	ldr	r2, [pc, #32]	; (10000a90 <HAL_GPIO_Init+0x350>)
10000a6e:	69bb      	ldr	r3, [r7, #24]
10000a70:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000a72:	69fb      	ldr	r3, [r7, #28]
10000a74:	3301      	adds	r3, #1
10000a76:	61fb      	str	r3, [r7, #28]
10000a78:	69fb      	ldr	r3, [r7, #28]
10000a7a:	2b0f      	cmp	r3, #15
10000a7c:	f67f ae6a 	bls.w	10000754 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000a80:	bf00      	nop
10000a82:	bf00      	nop
10000a84:	3724      	adds	r7, #36	; 0x24
10000a86:	46bd      	mov	sp, r7
10000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a8c:	4770      	bx	lr
10000a8e:	bf00      	nop
10000a90:	5000d000 	.word	0x5000d000

10000a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10000a94:	b480      	push	{r7}
10000a96:	b083      	sub	sp, #12
10000a98:	af00      	add	r7, sp, #0
10000a9a:	6078      	str	r0, [r7, #4]
10000a9c:	460b      	mov	r3, r1
10000a9e:	807b      	strh	r3, [r7, #2]
10000aa0:	4613      	mov	r3, r2
10000aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10000aa4:	787b      	ldrb	r3, [r7, #1]
10000aa6:	2b00      	cmp	r3, #0
10000aa8:	d003      	beq.n	10000ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10000aaa:	887a      	ldrh	r2, [r7, #2]
10000aac:	687b      	ldr	r3, [r7, #4]
10000aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10000ab0:	e003      	b.n	10000aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10000ab2:	887b      	ldrh	r3, [r7, #2]
10000ab4:	041a      	lsls	r2, r3, #16
10000ab6:	687b      	ldr	r3, [r7, #4]
10000ab8:	619a      	str	r2, [r3, #24]
}
10000aba:	bf00      	nop
10000abc:	370c      	adds	r7, #12
10000abe:	46bd      	mov	sp, r7
10000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ac4:	4770      	bx	lr

10000ac6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10000ac6:	b480      	push	{r7}
10000ac8:	b083      	sub	sp, #12
10000aca:	af00      	add	r7, sp, #0
10000acc:	6078      	str	r0, [r7, #4]
10000ace:	460b      	mov	r3, r1
10000ad0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
10000ad2:	687b      	ldr	r3, [r7, #4]
10000ad4:	695a      	ldr	r2, [r3, #20]
10000ad6:	887b      	ldrh	r3, [r7, #2]
10000ad8:	4013      	ands	r3, r2
10000ada:	2b00      	cmp	r3, #0
10000adc:	d003      	beq.n	10000ae6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10000ade:	887a      	ldrh	r2, [r7, #2]
10000ae0:	687b      	ldr	r3, [r7, #4]
10000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
10000ae4:	e002      	b.n	10000aec <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10000ae6:	887a      	ldrh	r2, [r7, #2]
10000ae8:	687b      	ldr	r3, [r7, #4]
10000aea:	619a      	str	r2, [r3, #24]
}
10000aec:	bf00      	nop
10000aee:	370c      	adds	r7, #12
10000af0:	46bd      	mov	sp, r7
10000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
10000af6:	4770      	bx	lr

10000af8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000af8:	b580      	push	{r7, lr}
10000afa:	b084      	sub	sp, #16
10000afc:	af00      	add	r7, sp, #0
10000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000b00:	2300      	movs	r3, #0
10000b02:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000b04:	687b      	ldr	r3, [r7, #4]
10000b06:	2b00      	cmp	r3, #0
10000b08:	d101      	bne.n	10000b0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000b0a:	2301      	movs	r3, #1
10000b0c:	e320      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000b0e:	687b      	ldr	r3, [r7, #4]
10000b10:	681b      	ldr	r3, [r3, #0]
10000b12:	f003 0301 	and.w	r3, r3, #1
10000b16:	2b00      	cmp	r3, #0
10000b18:	f000 8081 	beq.w	10000c1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b20:	6a1b      	ldr	r3, [r3, #32]
10000b22:	f003 0303 	and.w	r3, r3, #3
10000b26:	2b01      	cmp	r3, #1
10000b28:	d107      	bne.n	10000b3a <HAL_RCC_OscConfig+0x42>
10000b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b2e:	6a1b      	ldr	r3, [r3, #32]
10000b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b38:	d054      	beq.n	10000be4 <HAL_RCC_OscConfig+0xec>
10000b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b40:	f003 0307 	and.w	r3, r3, #7
10000b44:	2b01      	cmp	r3, #1
10000b46:	d107      	bne.n	10000b58 <HAL_RCC_OscConfig+0x60>
10000b48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b56:	d045      	beq.n	10000be4 <HAL_RCC_OscConfig+0xec>
10000b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000b5e:	f003 0303 	and.w	r3, r3, #3
10000b62:	2b01      	cmp	r3, #1
10000b64:	d107      	bne.n	10000b76 <HAL_RCC_OscConfig+0x7e>
10000b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b74:	d036      	beq.n	10000be4 <HAL_RCC_OscConfig+0xec>
10000b76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000b7c:	f003 0303 	and.w	r3, r3, #3
10000b80:	2b01      	cmp	r3, #1
10000b82:	d10f      	bne.n	10000ba4 <HAL_RCC_OscConfig+0xac>
10000b84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000b8c:	f003 0302 	and.w	r3, r3, #2
10000b90:	2b02      	cmp	r3, #2
10000b92:	d027      	beq.n	10000be4 <HAL_RCC_OscConfig+0xec>
10000b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000b9c:	f003 0302 	and.w	r3, r3, #2
10000ba0:	2b02      	cmp	r3, #2
10000ba2:	d01f      	beq.n	10000be4 <HAL_RCC_OscConfig+0xec>
10000ba4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ba8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000bac:	f003 0303 	and.w	r3, r3, #3
10000bb0:	2b01      	cmp	r3, #1
10000bb2:	d107      	bne.n	10000bc4 <HAL_RCC_OscConfig+0xcc>
10000bb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bb8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000bbc:	f003 0302 	and.w	r3, r3, #2
10000bc0:	2b02      	cmp	r3, #2
10000bc2:	d00f      	beq.n	10000be4 <HAL_RCC_OscConfig+0xec>
10000bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bc8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000bcc:	f003 0303 	and.w	r3, r3, #3
10000bd0:	2b01      	cmp	r3, #1
10000bd2:	d117      	bne.n	10000c04 <HAL_RCC_OscConfig+0x10c>
10000bd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bd8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000bdc:	f003 0302 	and.w	r3, r3, #2
10000be0:	2b02      	cmp	r3, #2
10000be2:	d10f      	bne.n	10000c04 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000be4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000be8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000bf4:	d112      	bne.n	10000c1c <HAL_RCC_OscConfig+0x124>
10000bf6:	687b      	ldr	r3, [r7, #4]
10000bf8:	685b      	ldr	r3, [r3, #4]
10000bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000bfe:	d00d      	beq.n	10000c1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000c00:	2301      	movs	r3, #1
10000c02:	e2a5      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000c04:	687b      	ldr	r3, [r7, #4]
10000c06:	685b      	ldr	r3, [r3, #4]
10000c08:	4618      	mov	r0, r3
10000c0a:	f000 faa7 	bl	1000115c <HAL_RCC_HSEConfig>
10000c0e:	4603      	mov	r3, r0
10000c10:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000c12:	7bfb      	ldrb	r3, [r7, #15]
10000c14:	2b00      	cmp	r3, #0
10000c16:	d002      	beq.n	10000c1e <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000c18:	7bfb      	ldrb	r3, [r7, #15]
10000c1a:	e299      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000c1c:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000c1e:	687b      	ldr	r3, [r7, #4]
10000c20:	681b      	ldr	r3, [r3, #0]
10000c22:	f003 0302 	and.w	r3, r3, #2
10000c26:	2b00      	cmp	r3, #0
10000c28:	f000 814e 	beq.w	10000ec8 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000c2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c30:	6a1b      	ldr	r3, [r3, #32]
10000c32:	f003 0303 	and.w	r3, r3, #3
10000c36:	2b00      	cmp	r3, #0
10000c38:	d107      	bne.n	10000c4a <HAL_RCC_OscConfig+0x152>
10000c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c3e:	6a1b      	ldr	r3, [r3, #32]
10000c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c48:	d055      	beq.n	10000cf6 <HAL_RCC_OscConfig+0x1fe>
10000c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000c50:	f003 0307 	and.w	r3, r3, #7
10000c54:	2b00      	cmp	r3, #0
10000c56:	d107      	bne.n	10000c68 <HAL_RCC_OscConfig+0x170>
10000c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c66:	d046      	beq.n	10000cf6 <HAL_RCC_OscConfig+0x1fe>
10000c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000c6e:	f003 0303 	and.w	r3, r3, #3
10000c72:	2b00      	cmp	r3, #0
10000c74:	d107      	bne.n	10000c86 <HAL_RCC_OscConfig+0x18e>
10000c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c84:	d037      	beq.n	10000cf6 <HAL_RCC_OscConfig+0x1fe>
10000c86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000c8c:	f003 0303 	and.w	r3, r3, #3
10000c90:	2b00      	cmp	r3, #0
10000c92:	d10f      	bne.n	10000cb4 <HAL_RCC_OscConfig+0x1bc>
10000c94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000c9c:	f003 0302 	and.w	r3, r3, #2
10000ca0:	2b02      	cmp	r3, #2
10000ca2:	d028      	beq.n	10000cf6 <HAL_RCC_OscConfig+0x1fe>
10000ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000cac:	f003 0302 	and.w	r3, r3, #2
10000cb0:	2b02      	cmp	r3, #2
10000cb2:	d020      	beq.n	10000cf6 <HAL_RCC_OscConfig+0x1fe>
10000cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cb8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000cbc:	f003 0303 	and.w	r3, r3, #3
10000cc0:	2b00      	cmp	r3, #0
10000cc2:	d107      	bne.n	10000cd4 <HAL_RCC_OscConfig+0x1dc>
10000cc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cc8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000ccc:	f003 0302 	and.w	r3, r3, #2
10000cd0:	2b02      	cmp	r3, #2
10000cd2:	d010      	beq.n	10000cf6 <HAL_RCC_OscConfig+0x1fe>
10000cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cd8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000cdc:	f003 0303 	and.w	r3, r3, #3
10000ce0:	2b00      	cmp	r3, #0
10000ce2:	f040 8088 	bne.w	10000df6 <HAL_RCC_OscConfig+0x2fe>
10000ce6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000cee:	f003 0302 	and.w	r3, r3, #2
10000cf2:	2b02      	cmp	r3, #2
10000cf4:	d17f      	bne.n	10000df6 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000cf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cfa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000cfe:	f003 0301 	and.w	r3, r3, #1
10000d02:	2b01      	cmp	r3, #1
10000d04:	d105      	bne.n	10000d12 <HAL_RCC_OscConfig+0x21a>
10000d06:	687b      	ldr	r3, [r7, #4]
10000d08:	68db      	ldr	r3, [r3, #12]
10000d0a:	2b01      	cmp	r3, #1
10000d0c:	d001      	beq.n	10000d12 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000d0e:	2301      	movs	r3, #1
10000d10:	e21e      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000d12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d16:	699b      	ldr	r3, [r3, #24]
10000d18:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000d1c:	687b      	ldr	r3, [r7, #4]
10000d1e:	691b      	ldr	r3, [r3, #16]
10000d20:	021b      	lsls	r3, r3, #8
10000d22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000d26:	4313      	orrs	r3, r2
10000d28:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000d30:	f003 0303 	and.w	r3, r3, #3
10000d34:	2b00      	cmp	r3, #0
10000d36:	d10f      	bne.n	10000d58 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000d40:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000d44:	2b02      	cmp	r3, #2
10000d46:	d047      	beq.n	10000dd8 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000d50:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000d54:	2b02      	cmp	r3, #2
10000d56:	d03f      	beq.n	10000dd8 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000d58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d5c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000d60:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000d64:	2b00      	cmp	r3, #0
10000d66:	d107      	bne.n	10000d78 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d6c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000d70:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000d74:	2b02      	cmp	r3, #2
10000d76:	d02f      	beq.n	10000dd8 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d7c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000d80:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000d84:	2b00      	cmp	r3, #0
10000d86:	d107      	bne.n	10000d98 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000d88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d8c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000d90:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000d94:	2b02      	cmp	r3, #2
10000d96:	d01f      	beq.n	10000dd8 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d9c:	699b      	ldr	r3, [r3, #24]
10000d9e:	f023 0203 	bic.w	r2, r3, #3
10000da2:	687b      	ldr	r3, [r7, #4]
10000da4:	695b      	ldr	r3, [r3, #20]
10000da6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000daa:	4313      	orrs	r3, r2
10000dac:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000dae:	f7ff fba9 	bl	10000504 <HAL_GetTick>
10000db2:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000db4:	e008      	b.n	10000dc8 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000db6:	f7ff fba5 	bl	10000504 <HAL_GetTick>
10000dba:	4602      	mov	r2, r0
10000dbc:	68bb      	ldr	r3, [r7, #8]
10000dbe:	1ad3      	subs	r3, r2, r3
10000dc0:	2b64      	cmp	r3, #100	; 0x64
10000dc2:	d901      	bls.n	10000dc8 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000dc4:	2303      	movs	r3, #3
10000dc6:	e1c3      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dcc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000dd0:	f003 0304 	and.w	r3, r3, #4
10000dd4:	2b04      	cmp	r3, #4
10000dd6:	d1ee      	bne.n	10000db6 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000dd8:	f001 f809 	bl	10001dee <HAL_RCC_GetSystemCoreClockFreq>
10000ddc:	4603      	mov	r3, r0
10000dde:	4ab3      	ldr	r2, [pc, #716]	; (100010ac <HAL_RCC_OscConfig+0x5b4>)
10000de0:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000de2:	4bb3      	ldr	r3, [pc, #716]	; (100010b0 <HAL_RCC_OscConfig+0x5b8>)
10000de4:	681b      	ldr	r3, [r3, #0]
10000de6:	4618      	mov	r0, r3
10000de8:	f7ff fb42 	bl	10000470 <HAL_InitTick>
10000dec:	4603      	mov	r3, r0
10000dee:	2b00      	cmp	r3, #0
10000df0:	d069      	beq.n	10000ec6 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000df2:	2301      	movs	r3, #1
10000df4:	e1ac      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000df6:	687b      	ldr	r3, [r7, #4]
10000df8:	68db      	ldr	r3, [r3, #12]
10000dfa:	2b00      	cmp	r3, #0
10000dfc:	d049      	beq.n	10000e92 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e02:	68db      	ldr	r3, [r3, #12]
10000e04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e08:	f043 0301 	orr.w	r3, r3, #1
10000e0c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e0e:	f7ff fb79 	bl	10000504 <HAL_GetTick>
10000e12:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000e14:	e008      	b.n	10000e28 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000e16:	f7ff fb75 	bl	10000504 <HAL_GetTick>
10000e1a:	4602      	mov	r2, r0
10000e1c:	68bb      	ldr	r3, [r7, #8]
10000e1e:	1ad3      	subs	r3, r2, r3
10000e20:	2b64      	cmp	r3, #100	; 0x64
10000e22:	d901      	bls.n	10000e28 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000e24:	2303      	movs	r3, #3
10000e26:	e193      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e2c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e30:	f003 0301 	and.w	r3, r3, #1
10000e34:	2b01      	cmp	r3, #1
10000e36:	d1ee      	bne.n	10000e16 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000e38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e3c:	699b      	ldr	r3, [r3, #24]
10000e3e:	f023 0203 	bic.w	r2, r3, #3
10000e42:	687b      	ldr	r3, [r7, #4]
10000e44:	695b      	ldr	r3, [r3, #20]
10000e46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e4a:	4313      	orrs	r3, r2
10000e4c:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e4e:	f7ff fb59 	bl	10000504 <HAL_GetTick>
10000e52:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000e54:	e008      	b.n	10000e68 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000e56:	f7ff fb55 	bl	10000504 <HAL_GetTick>
10000e5a:	4602      	mov	r2, r0
10000e5c:	68bb      	ldr	r3, [r7, #8]
10000e5e:	1ad3      	subs	r3, r2, r3
10000e60:	2b64      	cmp	r3, #100	; 0x64
10000e62:	d901      	bls.n	10000e68 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000e64:	2303      	movs	r3, #3
10000e66:	e173      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e6c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e70:	f003 0304 	and.w	r3, r3, #4
10000e74:	2b04      	cmp	r3, #4
10000e76:	d1ee      	bne.n	10000e56 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000e78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e7c:	699b      	ldr	r3, [r3, #24]
10000e7e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000e82:	687b      	ldr	r3, [r7, #4]
10000e84:	691b      	ldr	r3, [r3, #16]
10000e86:	021b      	lsls	r3, r3, #8
10000e88:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e8c:	4313      	orrs	r3, r2
10000e8e:	618b      	str	r3, [r1, #24]
10000e90:	e01a      	b.n	10000ec8 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000e92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e96:	2201      	movs	r2, #1
10000e98:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e9a:	f7ff fb33 	bl	10000504 <HAL_GetTick>
10000e9e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000ea0:	e008      	b.n	10000eb4 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000ea2:	f7ff fb2f 	bl	10000504 <HAL_GetTick>
10000ea6:	4602      	mov	r2, r0
10000ea8:	68bb      	ldr	r3, [r7, #8]
10000eaa:	1ad3      	subs	r3, r2, r3
10000eac:	2b64      	cmp	r3, #100	; 0x64
10000eae:	d901      	bls.n	10000eb4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000eb0:	2303      	movs	r3, #3
10000eb2:	e14d      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000eb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eb8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000ebc:	f003 0301 	and.w	r3, r3, #1
10000ec0:	2b01      	cmp	r3, #1
10000ec2:	d0ee      	beq.n	10000ea2 <HAL_RCC_OscConfig+0x3aa>
10000ec4:	e000      	b.n	10000ec8 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000ec6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000ec8:	687b      	ldr	r3, [r7, #4]
10000eca:	681b      	ldr	r3, [r3, #0]
10000ecc:	f003 0310 	and.w	r3, r3, #16
10000ed0:	2b00      	cmp	r3, #0
10000ed2:	f000 8091 	beq.w	10000ff8 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eda:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000ede:	f003 0303 	and.w	r3, r3, #3
10000ee2:	2b02      	cmp	r3, #2
10000ee4:	d107      	bne.n	10000ef6 <HAL_RCC_OscConfig+0x3fe>
10000ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000eee:	f003 0302 	and.w	r3, r3, #2
10000ef2:	2b02      	cmp	r3, #2
10000ef4:	d01e      	beq.n	10000f34 <HAL_RCC_OscConfig+0x43c>
10000ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000efc:	f003 0303 	and.w	r3, r3, #3
10000f00:	2b02      	cmp	r3, #2
10000f02:	d107      	bne.n	10000f14 <HAL_RCC_OscConfig+0x41c>
10000f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000f0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f12:	d00f      	beq.n	10000f34 <HAL_RCC_OscConfig+0x43c>
10000f14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f18:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000f1c:	f003 0303 	and.w	r3, r3, #3
10000f20:	2b02      	cmp	r3, #2
10000f22:	d122      	bne.n	10000f6a <HAL_RCC_OscConfig+0x472>
10000f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f28:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000f2c:	f003 0302 	and.w	r3, r3, #2
10000f30:	2b02      	cmp	r3, #2
10000f32:	d11a      	bne.n	10000f6a <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f38:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f3c:	f003 0310 	and.w	r3, r3, #16
10000f40:	2b10      	cmp	r3, #16
10000f42:	d105      	bne.n	10000f50 <HAL_RCC_OscConfig+0x458>
10000f44:	687b      	ldr	r3, [r7, #4]
10000f46:	69db      	ldr	r3, [r3, #28]
10000f48:	2b10      	cmp	r3, #16
10000f4a:	d001      	beq.n	10000f50 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000f4c:	2301      	movs	r3, #1
10000f4e:	e0ff      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f54:	69db      	ldr	r3, [r3, #28]
10000f56:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000f5a:	687b      	ldr	r3, [r7, #4]
10000f5c:	6a1b      	ldr	r3, [r3, #32]
10000f5e:	021b      	lsls	r3, r3, #8
10000f60:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f64:	4313      	orrs	r3, r2
10000f66:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000f68:	e046      	b.n	10000ff8 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000f6a:	687b      	ldr	r3, [r7, #4]
10000f6c:	69db      	ldr	r3, [r3, #28]
10000f6e:	2b00      	cmp	r3, #0
10000f70:	d029      	beq.n	10000fc6 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000f72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f76:	68db      	ldr	r3, [r3, #12]
10000f78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f7c:	f043 0310 	orr.w	r3, r3, #16
10000f80:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f82:	f7ff fabf 	bl	10000504 <HAL_GetTick>
10000f86:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000f88:	e008      	b.n	10000f9c <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000f8a:	f7ff fabb 	bl	10000504 <HAL_GetTick>
10000f8e:	4602      	mov	r2, r0
10000f90:	68bb      	ldr	r3, [r7, #8]
10000f92:	1ad3      	subs	r3, r2, r3
10000f94:	2b64      	cmp	r3, #100	; 0x64
10000f96:	d901      	bls.n	10000f9c <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000f98:	2303      	movs	r3, #3
10000f9a:	e0d9      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fa0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000fa4:	f003 0310 	and.w	r3, r3, #16
10000fa8:	2b10      	cmp	r3, #16
10000faa:	d1ee      	bne.n	10000f8a <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fb0:	69db      	ldr	r3, [r3, #28]
10000fb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000fb6:	687b      	ldr	r3, [r7, #4]
10000fb8:	6a1b      	ldr	r3, [r3, #32]
10000fba:	021b      	lsls	r3, r3, #8
10000fbc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000fc0:	4313      	orrs	r3, r2
10000fc2:	61cb      	str	r3, [r1, #28]
10000fc4:	e018      	b.n	10000ff8 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000fc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fca:	2210      	movs	r2, #16
10000fcc:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000fce:	f7ff fa99 	bl	10000504 <HAL_GetTick>
10000fd2:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000fd4:	e008      	b.n	10000fe8 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000fd6:	f7ff fa95 	bl	10000504 <HAL_GetTick>
10000fda:	4602      	mov	r2, r0
10000fdc:	68bb      	ldr	r3, [r7, #8]
10000fde:	1ad3      	subs	r3, r2, r3
10000fe0:	2b64      	cmp	r3, #100	; 0x64
10000fe2:	d901      	bls.n	10000fe8 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000fe4:	2303      	movs	r3, #3
10000fe6:	e0b3      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000fe8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000ff0:	f003 0310 	and.w	r3, r3, #16
10000ff4:	2b10      	cmp	r3, #16
10000ff6:	d0ee      	beq.n	10000fd6 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000ff8:	687b      	ldr	r3, [r7, #4]
10000ffa:	681b      	ldr	r3, [r3, #0]
10000ffc:	f003 0308 	and.w	r3, r3, #8
10001000:	2b00      	cmp	r3, #0
10001002:	d042      	beq.n	1000108a <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001004:	687b      	ldr	r3, [r7, #4]
10001006:	699b      	ldr	r3, [r3, #24]
10001008:	2b00      	cmp	r3, #0
1000100a:	d01f      	beq.n	1000104c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
1000100c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001010:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001014:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001018:	f043 0301 	orr.w	r3, r3, #1
1000101c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001020:	f7ff fa70 	bl	10000504 <HAL_GetTick>
10001024:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001026:	e008      	b.n	1000103a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001028:	f7ff fa6c 	bl	10000504 <HAL_GetTick>
1000102c:	4602      	mov	r2, r0
1000102e:	68bb      	ldr	r3, [r7, #8]
10001030:	1ad3      	subs	r3, r2, r3
10001032:	2b64      	cmp	r3, #100	; 0x64
10001034:	d901      	bls.n	1000103a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10001036:	2303      	movs	r3, #3
10001038:	e08a      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000103a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000103e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001042:	f003 0302 	and.w	r3, r3, #2
10001046:	2b02      	cmp	r3, #2
10001048:	d1ee      	bne.n	10001028 <HAL_RCC_OscConfig+0x530>
1000104a:	e01e      	b.n	1000108a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1000104c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001050:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001058:	f023 0301 	bic.w	r3, r3, #1
1000105c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001060:	f7ff fa50 	bl	10000504 <HAL_GetTick>
10001064:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001066:	e008      	b.n	1000107a <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001068:	f7ff fa4c 	bl	10000504 <HAL_GetTick>
1000106c:	4602      	mov	r2, r0
1000106e:	68bb      	ldr	r3, [r7, #8]
10001070:	1ad3      	subs	r3, r2, r3
10001072:	2b64      	cmp	r3, #100	; 0x64
10001074:	d901      	bls.n	1000107a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10001076:	2303      	movs	r3, #3
10001078:	e06a      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000107a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000107e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001082:	f003 0302 	and.w	r3, r3, #2
10001086:	2b02      	cmp	r3, #2
10001088:	d0ee      	beq.n	10001068 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1000108a:	687b      	ldr	r3, [r7, #4]
1000108c:	681b      	ldr	r3, [r3, #0]
1000108e:	f003 0304 	and.w	r3, r3, #4
10001092:	2b00      	cmp	r3, #0
10001094:	d02b      	beq.n	100010ee <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001096:	4b07      	ldr	r3, [pc, #28]	; (100010b4 <HAL_RCC_OscConfig+0x5bc>)
10001098:	681b      	ldr	r3, [r3, #0]
1000109a:	4a06      	ldr	r2, [pc, #24]	; (100010b4 <HAL_RCC_OscConfig+0x5bc>)
1000109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100010a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100010a2:	f7ff fa2f 	bl	10000504 <HAL_GetTick>
100010a6:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100010a8:	e00f      	b.n	100010ca <HAL_RCC_OscConfig+0x5d2>
100010aa:	bf00      	nop
100010ac:	10020000 	.word	0x10020000
100010b0:	10020004 	.word	0x10020004
100010b4:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100010b8:	f7ff fa24 	bl	10000504 <HAL_GetTick>
100010bc:	4602      	mov	r2, r0
100010be:	68bb      	ldr	r3, [r7, #8]
100010c0:	1ad3      	subs	r3, r2, r3
100010c2:	2b64      	cmp	r3, #100	; 0x64
100010c4:	d901      	bls.n	100010ca <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100010c6:	2303      	movs	r3, #3
100010c8:	e042      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100010ca:	4b23      	ldr	r3, [pc, #140]	; (10001158 <HAL_RCC_OscConfig+0x660>)
100010cc:	681b      	ldr	r3, [r3, #0]
100010ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
100010d2:	2b00      	cmp	r3, #0
100010d4:	d0f0      	beq.n	100010b8 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100010d6:	687b      	ldr	r3, [r7, #4]
100010d8:	689b      	ldr	r3, [r3, #8]
100010da:	4618      	mov	r0, r3
100010dc:	f000 f8a9 	bl	10001232 <HAL_RCC_LSEConfig>
100010e0:	4603      	mov	r3, r0
100010e2:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100010e4:	7bfb      	ldrb	r3, [r7, #15]
100010e6:	2b00      	cmp	r3, #0
100010e8:	d001      	beq.n	100010ee <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100010ea:	7bfb      	ldrb	r3, [r7, #15]
100010ec:	e030      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100010ee:	687b      	ldr	r3, [r7, #4]
100010f0:	3324      	adds	r3, #36	; 0x24
100010f2:	4618      	mov	r0, r3
100010f4:	f000 f91a 	bl	1000132c <RCC_PLL1_Config>
100010f8:	4603      	mov	r3, r0
100010fa:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100010fc:	7bfb      	ldrb	r3, [r7, #15]
100010fe:	2b00      	cmp	r3, #0
10001100:	d001      	beq.n	10001106 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001102:	7bfb      	ldrb	r3, [r7, #15]
10001104:	e024      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10001106:	687b      	ldr	r3, [r7, #4]
10001108:	3360      	adds	r3, #96	; 0x60
1000110a:	4618      	mov	r0, r3
1000110c:	f000 fecc 	bl	10001ea8 <RCCEx_PLL2_Config>
10001110:	4603      	mov	r3, r0
10001112:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001114:	7bfb      	ldrb	r3, [r7, #15]
10001116:	2b00      	cmp	r3, #0
10001118:	d001      	beq.n	1000111e <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000111a:	7bfb      	ldrb	r3, [r7, #15]
1000111c:	e018      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
1000111e:	687b      	ldr	r3, [r7, #4]
10001120:	339c      	adds	r3, #156	; 0x9c
10001122:	4618      	mov	r0, r3
10001124:	f001 f842 	bl	100021ac <RCCEx_PLL3_Config>
10001128:	4603      	mov	r3, r0
1000112a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000112c:	7bfb      	ldrb	r3, [r7, #15]
1000112e:	2b00      	cmp	r3, #0
10001130:	d001      	beq.n	10001136 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10001132:	7bfb      	ldrb	r3, [r7, #15]
10001134:	e00c      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10001136:	687b      	ldr	r3, [r7, #4]
10001138:	33d8      	adds	r3, #216	; 0xd8
1000113a:	4618      	mov	r0, r3
1000113c:	f001 f9a0 	bl	10002480 <RCCEx_PLL4_Config>
10001140:	4603      	mov	r3, r0
10001142:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001144:	7bfb      	ldrb	r3, [r7, #15]
10001146:	2b00      	cmp	r3, #0
10001148:	d001      	beq.n	1000114e <HAL_RCC_OscConfig+0x656>
  {
    return result;
1000114a:	7bfb      	ldrb	r3, [r7, #15]
1000114c:	e000      	b.n	10001150 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
1000114e:	2300      	movs	r3, #0
}
10001150:	4618      	mov	r0, r3
10001152:	3710      	adds	r7, #16
10001154:	46bd      	mov	sp, r7
10001156:	bd80      	pop	{r7, pc}
10001158:	50001000 	.word	0x50001000

1000115c <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
1000115c:	b580      	push	{r7, lr}
1000115e:	b084      	sub	sp, #16
10001160:	af00      	add	r7, sp, #0
10001162:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10001164:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001168:	f44f 7280 	mov.w	r2, #256	; 0x100
1000116c:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000116e:	f7ff f9c9 	bl	10000504 <HAL_GetTick>
10001172:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001174:	e008      	b.n	10001188 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001176:	f7ff f9c5 	bl	10000504 <HAL_GetTick>
1000117a:	4602      	mov	r2, r0
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	1ad3      	subs	r3, r2, r3
10001180:	2b64      	cmp	r3, #100	; 0x64
10001182:	d901      	bls.n	10001188 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10001184:	2303      	movs	r3, #3
10001186:	e050      	b.n	1000122a <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000118c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001190:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001198:	d0ed      	beq.n	10001176 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
1000119a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000119e:	f44f 6290 	mov.w	r2, #1152	; 0x480
100011a2:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100011a4:	687b      	ldr	r3, [r7, #4]
100011a6:	2b00      	cmp	r3, #0
100011a8:	d03e      	beq.n	10001228 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100011aa:	687b      	ldr	r3, [r7, #4]
100011ac:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
100011b0:	d108      	bne.n	100011c4 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100011b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011b6:	68db      	ldr	r3, [r3, #12]
100011b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100011c0:	60d3      	str	r3, [r2, #12]
100011c2:	e013      	b.n	100011ec <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100011c4:	687b      	ldr	r3, [r7, #4]
100011c6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
100011ca:	d10f      	bne.n	100011ec <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100011cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011d0:	68db      	ldr	r3, [r3, #12]
100011d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100011da:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100011dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011e0:	68db      	ldr	r3, [r3, #12]
100011e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100011ea:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100011ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011f0:	68db      	ldr	r3, [r3, #12]
100011f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100011fa:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100011fc:	f7ff f982 	bl	10000504 <HAL_GetTick>
10001200:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001202:	e008      	b.n	10001216 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001204:	f7ff f97e 	bl	10000504 <HAL_GetTick>
10001208:	4602      	mov	r2, r0
1000120a:	68fb      	ldr	r3, [r7, #12]
1000120c:	1ad3      	subs	r3, r2, r3
1000120e:	2b64      	cmp	r3, #100	; 0x64
10001210:	d901      	bls.n	10001216 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001212:	2303      	movs	r3, #3
10001214:	e009      	b.n	1000122a <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000121a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001226:	d1ed      	bne.n	10001204 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001228:	2300      	movs	r3, #0
}
1000122a:	4618      	mov	r0, r3
1000122c:	3710      	adds	r7, #16
1000122e:	46bd      	mov	sp, r7
10001230:	bd80      	pop	{r7, pc}

10001232 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10001232:	b580      	push	{r7, lr}
10001234:	b084      	sub	sp, #16
10001236:	af00      	add	r7, sp, #0
10001238:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000123a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000123e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001242:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001246:	f023 0301 	bic.w	r3, r3, #1
1000124a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000124e:	f7ff f959 	bl	10000504 <HAL_GetTick>
10001252:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001254:	e00a      	b.n	1000126c <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001256:	f7ff f955 	bl	10000504 <HAL_GetTick>
1000125a:	4602      	mov	r2, r0
1000125c:	68fb      	ldr	r3, [r7, #12]
1000125e:	1ad3      	subs	r3, r2, r3
10001260:	f241 3288 	movw	r2, #5000	; 0x1388
10001264:	4293      	cmp	r3, r2
10001266:	d901      	bls.n	1000126c <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001268:	2303      	movs	r3, #3
1000126a:	e05b      	b.n	10001324 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000126c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001270:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001274:	f003 0304 	and.w	r3, r3, #4
10001278:	2b04      	cmp	r3, #4
1000127a:	d0ec      	beq.n	10001256 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
1000127c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001280:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001288:	f023 030a 	bic.w	r3, r3, #10
1000128c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001290:	687b      	ldr	r3, [r7, #4]
10001292:	2b00      	cmp	r3, #0
10001294:	d045      	beq.n	10001322 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10001296:	687b      	ldr	r3, [r7, #4]
10001298:	2b03      	cmp	r3, #3
1000129a:	d10a      	bne.n	100012b2 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
1000129c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012a8:	f043 0302 	orr.w	r3, r3, #2
100012ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100012b0:	e016      	b.n	100012e0 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100012b2:	687b      	ldr	r3, [r7, #4]
100012b4:	2b0b      	cmp	r3, #11
100012b6:	d113      	bne.n	100012e0 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100012b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012c4:	f043 0308 	orr.w	r3, r3, #8
100012c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100012cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012d8:	f043 0302 	orr.w	r3, r3, #2
100012dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100012e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012ec:	f043 0301 	orr.w	r3, r3, #1
100012f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100012f4:	f7ff f906 	bl	10000504 <HAL_GetTick>
100012f8:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100012fa:	e00a      	b.n	10001312 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100012fc:	f7ff f902 	bl	10000504 <HAL_GetTick>
10001300:	4602      	mov	r2, r0
10001302:	68fb      	ldr	r3, [r7, #12]
10001304:	1ad3      	subs	r3, r2, r3
10001306:	f241 3288 	movw	r2, #5000	; 0x1388
1000130a:	4293      	cmp	r3, r2
1000130c:	d901      	bls.n	10001312 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
1000130e:	2303      	movs	r3, #3
10001310:	e008      	b.n	10001324 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001316:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000131a:	f003 0304 	and.w	r3, r3, #4
1000131e:	2b04      	cmp	r3, #4
10001320:	d1ec      	bne.n	100012fc <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10001322:	2300      	movs	r3, #0
}
10001324:	4618      	mov	r0, r3
10001326:	3710      	adds	r7, #16
10001328:	46bd      	mov	sp, r7
1000132a:	bd80      	pop	{r7, pc}

1000132c <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
1000132c:	b580      	push	{r7, lr}
1000132e:	b084      	sub	sp, #16
10001330:	af00      	add	r7, sp, #0
10001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10001334:	687b      	ldr	r3, [r7, #4]
10001336:	681b      	ldr	r3, [r3, #0]
10001338:	2b00      	cmp	r3, #0
1000133a:	f000 8174 	beq.w	10001626 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
1000133e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001342:	6a1b      	ldr	r3, [r3, #32]
10001344:	f003 0303 	and.w	r3, r3, #3
10001348:	2b02      	cmp	r3, #2
1000134a:	d108      	bne.n	1000135e <RCC_PLL1_Config+0x32>
1000134c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001350:	6a1b      	ldr	r3, [r3, #32]
10001352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000135a:	f000 8162 	beq.w	10001622 <RCC_PLL1_Config+0x2f6>
1000135e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001362:	6a1b      	ldr	r3, [r3, #32]
10001364:	f003 0303 	and.w	r3, r3, #3
10001368:	2b03      	cmp	r3, #3
1000136a:	d108      	bne.n	1000137e <RCC_PLL1_Config+0x52>
1000136c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001370:	6a1b      	ldr	r3, [r3, #32]
10001372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000137a:	f000 8152 	beq.w	10001622 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
1000137e:	687b      	ldr	r3, [r7, #4]
10001380:	681b      	ldr	r3, [r3, #0]
10001382:	2b02      	cmp	r3, #2
10001384:	f040 8123 	bne.w	100015ce <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000138c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001390:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
1000139c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100013a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013a8:	f023 0301 	bic.w	r3, r3, #1
100013ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100013b0:	f7ff f8a8 	bl	10000504 <HAL_GetTick>
100013b4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100013b6:	e008      	b.n	100013ca <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100013b8:	f7ff f8a4 	bl	10000504 <HAL_GetTick>
100013bc:	4602      	mov	r2, r0
100013be:	68fb      	ldr	r3, [r7, #12]
100013c0:	1ad3      	subs	r3, r2, r3
100013c2:	2b64      	cmp	r3, #100	; 0x64
100013c4:	d901      	bls.n	100013ca <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100013c6:	2303      	movs	r3, #3
100013c8:	e12e      	b.n	10001628 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100013ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100013d2:	f003 0302 	and.w	r3, r3, #2
100013d6:	2b02      	cmp	r3, #2
100013d8:	d0ee      	beq.n	100013b8 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100013da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100013e0:	f003 0307 	and.w	r3, r3, #7
100013e4:	2b02      	cmp	r3, #2
100013e6:	d112      	bne.n	1000140e <RCC_PLL1_Config+0xe2>
100013e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100013ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100013f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100013f6:	d10a      	bne.n	1000140e <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100013f8:	687b      	ldr	r3, [r7, #4]
100013fa:	685a      	ldr	r2, [r3, #4]
100013fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001402:	f003 0303 	and.w	r3, r3, #3
10001406:	429a      	cmp	r2, r3
10001408:	d00c      	beq.n	10001424 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000140a:	2301      	movs	r3, #1
1000140c:	e10c      	b.n	10001628 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
1000140e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001414:	f023 0203 	bic.w	r2, r3, #3
10001418:	687b      	ldr	r3, [r7, #4]
1000141a:	685b      	ldr	r3, [r3, #4]
1000141c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001420:	4313      	orrs	r3, r2
10001422:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001424:	e008      	b.n	10001438 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001426:	f7ff f86d 	bl	10000504 <HAL_GetTick>
1000142a:	4602      	mov	r2, r0
1000142c:	68fb      	ldr	r3, [r7, #12]
1000142e:	1ad3      	subs	r3, r2, r3
10001430:	2b64      	cmp	r3, #100	; 0x64
10001432:	d901      	bls.n	10001438 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10001434:	2303      	movs	r3, #3
10001436:	e0f7      	b.n	10001628 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000143e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001446:	d1ee      	bne.n	10001426 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000144c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10001450:	4b77      	ldr	r3, [pc, #476]	; (10001630 <RCC_PLL1_Config+0x304>)
10001452:	4013      	ands	r3, r2
10001454:	687a      	ldr	r2, [r7, #4]
10001456:	68d2      	ldr	r2, [r2, #12]
10001458:	1e51      	subs	r1, r2, #1
1000145a:	687a      	ldr	r2, [r7, #4]
1000145c:	6892      	ldr	r2, [r2, #8]
1000145e:	3a01      	subs	r2, #1
10001460:	0412      	lsls	r2, r2, #16
10001462:	430a      	orrs	r2, r1
10001464:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001468:	4313      	orrs	r3, r2
1000146a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
1000146e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10001476:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000147a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000147e:	687a      	ldr	r2, [r7, #4]
10001480:	6912      	ldr	r2, [r2, #16]
10001482:	1e51      	subs	r1, r2, #1
10001484:	687a      	ldr	r2, [r7, #4]
10001486:	6952      	ldr	r2, [r2, #20]
10001488:	3a01      	subs	r2, #1
1000148a:	0212      	lsls	r2, r2, #8
1000148c:	4311      	orrs	r1, r2
1000148e:	687a      	ldr	r2, [r7, #4]
10001490:	6992      	ldr	r2, [r2, #24]
10001492:	3a01      	subs	r2, #1
10001494:	0412      	lsls	r2, r2, #16
10001496:	430a      	orrs	r2, r1
10001498:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000149c:	4313      	orrs	r3, r2
1000149e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100014a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100014aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100014b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100014b6:	687b      	ldr	r3, [r7, #4]
100014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014ba:	2b02      	cmp	r3, #2
100014bc:	d003      	beq.n	100014c6 <RCC_PLL1_Config+0x19a>
100014be:	687b      	ldr	r3, [r7, #4]
100014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014c2:	2b00      	cmp	r3, #0
100014c4:	d10c      	bne.n	100014e0 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100014c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100014ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100014d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100014da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100014de:	e00f      	b.n	10001500 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100014e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100014e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100014ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100014f0:	687a      	ldr	r2, [r7, #4]
100014f2:	6a12      	ldr	r2, [r2, #32]
100014f4:	00d2      	lsls	r2, r2, #3
100014f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100014fa:	4313      	orrs	r3, r2
100014fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001510:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001514:	687b      	ldr	r3, [r7, #4]
10001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001518:	2b02      	cmp	r3, #2
1000151a:	d124      	bne.n	10001566 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
1000151c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10001524:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001528:	687b      	ldr	r3, [r7, #4]
1000152a:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000152c:	687b      	ldr	r3, [r7, #4]
1000152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001530:	4319      	orrs	r1, r3
10001532:	687b      	ldr	r3, [r7, #4]
10001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001536:	4319      	orrs	r1, r3
10001538:	687b      	ldr	r3, [r7, #4]
1000153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000153c:	4319      	orrs	r1, r3
1000153e:	687b      	ldr	r3, [r7, #4]
10001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001542:	041b      	lsls	r3, r3, #16
10001544:	430b      	orrs	r3, r1
10001546:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000154a:	4313      	orrs	r3, r2
1000154c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001558:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000155c:	f043 0304 	orr.w	r3, r3, #4
10001560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10001564:	e009      	b.n	1000157a <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10001566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000156e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001572:	f023 0304 	bic.w	r3, r3, #4
10001576:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
1000157a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000157e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001582:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001586:	f043 0301 	orr.w	r3, r3, #1
1000158a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000158e:	f7fe ffb9 	bl	10000504 <HAL_GetTick>
10001592:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001594:	e008      	b.n	100015a8 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001596:	f7fe ffb5 	bl	10000504 <HAL_GetTick>
1000159a:	4602      	mov	r2, r0
1000159c:	68fb      	ldr	r3, [r7, #12]
1000159e:	1ad3      	subs	r3, r2, r3
100015a0:	2b64      	cmp	r3, #100	; 0x64
100015a2:	d901      	bls.n	100015a8 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100015a4:	2303      	movs	r3, #3
100015a6:	e03f      	b.n	10001628 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100015a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015b0:	f003 0302 	and.w	r3, r3, #2
100015b4:	2b02      	cmp	r3, #2
100015b6:	d1ee      	bne.n	10001596 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100015b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100015c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100015cc:	e02b      	b.n	10001626 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100015ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100015de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100015e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015ee:	f023 0301 	bic.w	r3, r3, #1
100015f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100015f6:	f7fe ff85 	bl	10000504 <HAL_GetTick>
100015fa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100015fc:	e008      	b.n	10001610 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100015fe:	f7fe ff81 	bl	10000504 <HAL_GetTick>
10001602:	4602      	mov	r2, r0
10001604:	68fb      	ldr	r3, [r7, #12]
10001606:	1ad3      	subs	r3, r2, r3
10001608:	2b64      	cmp	r3, #100	; 0x64
1000160a:	d901      	bls.n	10001610 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
1000160c:	2303      	movs	r3, #3
1000160e:	e00b      	b.n	10001628 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001618:	f003 0302 	and.w	r3, r3, #2
1000161c:	2b02      	cmp	r3, #2
1000161e:	d0ee      	beq.n	100015fe <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001620:	e001      	b.n	10001626 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001622:	2301      	movs	r3, #1
10001624:	e000      	b.n	10001628 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10001626:	2300      	movs	r3, #0

}
10001628:	4618      	mov	r0, r3
1000162a:	3710      	adds	r7, #16
1000162c:	46bd      	mov	sp, r7
1000162e:	bd80      	pop	{r7, pc}
10001630:	ffc0fe00 	.word	0xffc0fe00

10001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10001634:	b580      	push	{r7, lr}
10001636:	b084      	sub	sp, #16
10001638:	af00      	add	r7, sp, #0
1000163a:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
1000163c:	2300      	movs	r3, #0
1000163e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001640:	687b      	ldr	r3, [r7, #4]
10001642:	2b00      	cmp	r3, #0
10001644:	d101      	bne.n	1000164a <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10001646:	2301      	movs	r3, #1
10001648:	e102      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
1000164a:	687b      	ldr	r3, [r7, #4]
1000164c:	681b      	ldr	r3, [r3, #0]
1000164e:	f003 0301 	and.w	r3, r3, #1
10001652:	2b00      	cmp	r3, #0
10001654:	d00b      	beq.n	1000166e <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10001656:	687b      	ldr	r3, [r7, #4]
10001658:	3304      	adds	r3, #4
1000165a:	4618      	mov	r0, r3
1000165c:	f000 f8fc 	bl	10001858 <RCC_MPUConfig>
10001660:	4603      	mov	r3, r0
10001662:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001664:	7bfb      	ldrb	r3, [r7, #15]
10001666:	2b00      	cmp	r3, #0
10001668:	d001      	beq.n	1000166e <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
1000166a:	7bfb      	ldrb	r3, [r7, #15]
1000166c:	e0f0      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000166e:	687b      	ldr	r3, [r7, #4]
10001670:	681b      	ldr	r3, [r3, #0]
10001672:	f003 0302 	and.w	r3, r3, #2
10001676:	2b00      	cmp	r3, #0
10001678:	d00b      	beq.n	10001692 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
1000167a:	687b      	ldr	r3, [r7, #4]
1000167c:	330c      	adds	r3, #12
1000167e:	4618      	mov	r0, r3
10001680:	f000 f960 	bl	10001944 <RCC_AXISSConfig>
10001684:	4603      	mov	r3, r0
10001686:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001688:	7bfb      	ldrb	r3, [r7, #15]
1000168a:	2b00      	cmp	r3, #0
1000168c:	d001      	beq.n	10001692 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
1000168e:	7bfb      	ldrb	r3, [r7, #15]
10001690:	e0de      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10001692:	687b      	ldr	r3, [r7, #4]
10001694:	681b      	ldr	r3, [r3, #0]
10001696:	f003 0304 	and.w	r3, r3, #4
1000169a:	2b00      	cmp	r3, #0
1000169c:	d00b      	beq.n	100016b6 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
1000169e:	687b      	ldr	r3, [r7, #4]
100016a0:	3314      	adds	r3, #20
100016a2:	4618      	mov	r0, r3
100016a4:	f000 f9e6 	bl	10001a74 <RCC_MCUConfig>
100016a8:	4603      	mov	r3, r0
100016aa:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100016ac:	7bfb      	ldrb	r3, [r7, #15]
100016ae:	2b00      	cmp	r3, #0
100016b0:	d001      	beq.n	100016b6 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100016b2:	7bfb      	ldrb	r3, [r7, #15]
100016b4:	e0cc      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	f003 0308 	and.w	r3, r3, #8
100016be:	2b00      	cmp	r3, #0
100016c0:	d020      	beq.n	10001704 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100016c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100016c8:	f023 0207 	bic.w	r2, r3, #7
100016cc:	687b      	ldr	r3, [r7, #4]
100016ce:	69db      	ldr	r3, [r3, #28]
100016d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100016d4:	4313      	orrs	r3, r2
100016d6:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100016d8:	f7fe ff14 	bl	10000504 <HAL_GetTick>
100016dc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100016de:	e009      	b.n	100016f4 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016e0:	f7fe ff10 	bl	10000504 <HAL_GetTick>
100016e4:	4602      	mov	r2, r0
100016e6:	68bb      	ldr	r3, [r7, #8]
100016e8:	1ad3      	subs	r3, r2, r3
100016ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100016ee:	d901      	bls.n	100016f4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100016f0:	2303      	movs	r3, #3
100016f2:	e0ad      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100016f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100016fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100016fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001702:	d1ed      	bne.n	100016e0 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10001704:	687b      	ldr	r3, [r7, #4]
10001706:	681b      	ldr	r3, [r3, #0]
10001708:	f003 0310 	and.w	r3, r3, #16
1000170c:	2b00      	cmp	r3, #0
1000170e:	d020      	beq.n	10001752 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001710:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001716:	f023 0207 	bic.w	r2, r3, #7
1000171a:	687b      	ldr	r3, [r7, #4]
1000171c:	6a1b      	ldr	r3, [r3, #32]
1000171e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001722:	4313      	orrs	r3, r2
10001724:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001726:	f7fe feed 	bl	10000504 <HAL_GetTick>
1000172a:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000172c:	e009      	b.n	10001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000172e:	f7fe fee9 	bl	10000504 <HAL_GetTick>
10001732:	4602      	mov	r2, r0
10001734:	68bb      	ldr	r3, [r7, #8]
10001736:	1ad3      	subs	r3, r2, r3
10001738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000173c:	d901      	bls.n	10001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
1000173e:	2303      	movs	r3, #3
10001740:	e086      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001742:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000174c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001750:	d1ed      	bne.n	1000172e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10001752:	687b      	ldr	r3, [r7, #4]
10001754:	681b      	ldr	r3, [r3, #0]
10001756:	f003 0320 	and.w	r3, r3, #32
1000175a:	2b00      	cmp	r3, #0
1000175c:	d023      	beq.n	100017a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000175e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001762:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001766:	f023 0207 	bic.w	r2, r3, #7
1000176a:	687b      	ldr	r3, [r7, #4]
1000176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000176e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001772:	4313      	orrs	r3, r2
10001774:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001778:	f7fe fec4 	bl	10000504 <HAL_GetTick>
1000177c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000177e:	e009      	b.n	10001794 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001780:	f7fe fec0 	bl	10000504 <HAL_GetTick>
10001784:	4602      	mov	r2, r0
10001786:	68bb      	ldr	r3, [r7, #8]
10001788:	1ad3      	subs	r3, r2, r3
1000178a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000178e:	d901      	bls.n	10001794 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001790:	2303      	movs	r3, #3
10001792:	e05d      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001798:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000179c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100017a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100017a4:	d1ec      	bne.n	10001780 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100017a6:	687b      	ldr	r3, [r7, #4]
100017a8:	681b      	ldr	r3, [r3, #0]
100017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
100017ae:	2b00      	cmp	r3, #0
100017b0:	d023      	beq.n	100017fa <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100017b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017b6:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100017ba:	f023 0207 	bic.w	r2, r3, #7
100017be:	687b      	ldr	r3, [r7, #4]
100017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100017c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017c6:	4313      	orrs	r3, r2
100017c8:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100017cc:	f7fe fe9a 	bl	10000504 <HAL_GetTick>
100017d0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100017d2:	e009      	b.n	100017e8 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100017d4:	f7fe fe96 	bl	10000504 <HAL_GetTick>
100017d8:	4602      	mov	r2, r0
100017da:	68bb      	ldr	r3, [r7, #8]
100017dc:	1ad3      	subs	r3, r2, r3
100017de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100017e2:	d901      	bls.n	100017e8 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100017e4:	2303      	movs	r3, #3
100017e6:	e033      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100017e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ec:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100017f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100017f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100017f8:	d1ec      	bne.n	100017d4 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100017fa:	687b      	ldr	r3, [r7, #4]
100017fc:	681b      	ldr	r3, [r3, #0]
100017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
10001802:	2b00      	cmp	r3, #0
10001804:	d023      	beq.n	1000184e <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10001806:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000180a:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
1000180e:	f023 0207 	bic.w	r2, r3, #7
10001812:	687b      	ldr	r3, [r7, #4]
10001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001816:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000181a:	4313      	orrs	r3, r2
1000181c:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001820:	f7fe fe70 	bl	10000504 <HAL_GetTick>
10001824:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001826:	e009      	b.n	1000183c <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001828:	f7fe fe6c 	bl	10000504 <HAL_GetTick>
1000182c:	4602      	mov	r2, r0
1000182e:	68bb      	ldr	r3, [r7, #8]
10001830:	1ad3      	subs	r3, r2, r3
10001832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001836:	d901      	bls.n	1000183c <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001838:	2303      	movs	r3, #3
1000183a:	e009      	b.n	10001850 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000183c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001840:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000184c:	d1ec      	bne.n	10001828 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
1000184e:	2300      	movs	r3, #0
}
10001850:	4618      	mov	r0, r3
10001852:	3710      	adds	r7, #16
10001854:	46bd      	mov	sp, r7
10001856:	bd80      	pop	{r7, pc}

10001858 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001858:	b580      	push	{r7, lr}
1000185a:	b084      	sub	sp, #16
1000185c:	af00      	add	r7, sp, #0
1000185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001860:	687b      	ldr	r3, [r7, #4]
10001862:	681b      	ldr	r3, [r3, #0]
10001864:	2b03      	cmp	r3, #3
10001866:	d840      	bhi.n	100018ea <RCC_MPUConfig+0x92>
10001868:	a201      	add	r2, pc, #4	; (adr r2, 10001870 <RCC_MPUConfig+0x18>)
1000186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000186e:	bf00      	nop
10001870:	10001881 	.word	0x10001881
10001874:	10001895 	.word	0x10001895
10001878:	100018ab 	.word	0x100018ab
1000187c:	100018bf 	.word	0x100018bf
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001884:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001888:	f003 0301 	and.w	r3, r3, #1
1000188c:	2b01      	cmp	r3, #1
1000188e:	d02e      	beq.n	100018ee <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001890:	2301      	movs	r3, #1
10001892:	e053      	b.n	1000193c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001894:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001898:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
100018a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100018a4:	d025      	beq.n	100018f2 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
100018a6:	2301      	movs	r3, #1
100018a8:	e048      	b.n	1000193c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018b2:	f003 0302 	and.w	r3, r3, #2
100018b6:	2b02      	cmp	r3, #2
100018b8:	d01d      	beq.n	100018f6 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100018ba:	2301      	movs	r3, #1
100018bc:	e03e      	b.n	1000193c <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018c6:	f003 0302 	and.w	r3, r3, #2
100018ca:	2b02      	cmp	r3, #2
100018cc:	d001      	beq.n	100018d2 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100018ce:	2301      	movs	r3, #1
100018d0:	e034      	b.n	1000193c <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100018d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100018d8:	f023 0207 	bic.w	r2, r3, #7
100018dc:	687b      	ldr	r3, [r7, #4]
100018de:	685b      	ldr	r3, [r3, #4]
100018e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100018e4:	4313      	orrs	r3, r2
100018e6:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100018e8:	e006      	b.n	100018f8 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100018ea:	2301      	movs	r3, #1
100018ec:	e026      	b.n	1000193c <RCC_MPUConfig+0xe4>
      break;
100018ee:	bf00      	nop
100018f0:	e002      	b.n	100018f8 <RCC_MPUConfig+0xa0>
      break;
100018f2:	bf00      	nop
100018f4:	e000      	b.n	100018f8 <RCC_MPUConfig+0xa0>
      break;
100018f6:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100018f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018fc:	6a1b      	ldr	r3, [r3, #32]
100018fe:	f023 0203 	bic.w	r2, r3, #3
10001902:	687b      	ldr	r3, [r7, #4]
10001904:	681b      	ldr	r3, [r3, #0]
10001906:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000190a:	4313      	orrs	r3, r2
1000190c:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000190e:	f7fe fdf9 	bl	10000504 <HAL_GetTick>
10001912:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001914:	e009      	b.n	1000192a <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001916:	f7fe fdf5 	bl	10000504 <HAL_GetTick>
1000191a:	4602      	mov	r2, r0
1000191c:	68fb      	ldr	r3, [r7, #12]
1000191e:	1ad3      	subs	r3, r2, r3
10001920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001924:	d901      	bls.n	1000192a <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001926:	2303      	movs	r3, #3
10001928:	e008      	b.n	1000193c <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000192a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000192e:	6a1b      	ldr	r3, [r3, #32]
10001930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001938:	d1ed      	bne.n	10001916 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
1000193a:	2300      	movs	r3, #0
}
1000193c:	4618      	mov	r0, r3
1000193e:	3710      	adds	r7, #16
10001940:	46bd      	mov	sp, r7
10001942:	bd80      	pop	{r7, pc}

10001944 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001944:	b580      	push	{r7, lr}
10001946:	b084      	sub	sp, #16
10001948:	af00      	add	r7, sp, #0
1000194a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
1000194c:	687b      	ldr	r3, [r7, #4]
1000194e:	681b      	ldr	r3, [r3, #0]
10001950:	2b02      	cmp	r3, #2
10001952:	d01b      	beq.n	1000198c <RCC_AXISSConfig+0x48>
10001954:	2b02      	cmp	r3, #2
10001956:	d823      	bhi.n	100019a0 <RCC_AXISSConfig+0x5c>
10001958:	2b00      	cmp	r3, #0
1000195a:	d002      	beq.n	10001962 <RCC_AXISSConfig+0x1e>
1000195c:	2b01      	cmp	r3, #1
1000195e:	d00a      	beq.n	10001976 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001960:	e01e      	b.n	100019a0 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001962:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001966:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000196a:	f003 0301 	and.w	r3, r3, #1
1000196e:	2b01      	cmp	r3, #1
10001970:	d018      	beq.n	100019a4 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001972:	2301      	movs	r3, #1
10001974:	e079      	b.n	10001a6a <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001976:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000197a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001986:	d00f      	beq.n	100019a8 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001988:	2301      	movs	r3, #1
1000198a:	e06e      	b.n	10001a6a <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000198c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001994:	f003 0302 	and.w	r3, r3, #2
10001998:	2b02      	cmp	r3, #2
1000199a:	d007      	beq.n	100019ac <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
1000199c:	2301      	movs	r3, #1
1000199e:	e064      	b.n	10001a6a <RCC_AXISSConfig+0x126>
      break;
100019a0:	bf00      	nop
100019a2:	e004      	b.n	100019ae <RCC_AXISSConfig+0x6a>
      break;
100019a4:	bf00      	nop
100019a6:	e002      	b.n	100019ae <RCC_AXISSConfig+0x6a>
      break;
100019a8:	bf00      	nop
100019aa:	e000      	b.n	100019ae <RCC_AXISSConfig+0x6a>
      break;
100019ac:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
100019ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100019b4:	f023 0207 	bic.w	r2, r3, #7
100019b8:	687b      	ldr	r3, [r7, #4]
100019ba:	681b      	ldr	r3, [r3, #0]
100019bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100019c0:	4313      	orrs	r3, r2
100019c2:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100019c4:	687b      	ldr	r3, [r7, #4]
100019c6:	681b      	ldr	r3, [r3, #0]
100019c8:	2b03      	cmp	r3, #3
100019ca:	d016      	beq.n	100019fa <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100019cc:	f7fe fd9a 	bl	10000504 <HAL_GetTick>
100019d0:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100019d2:	e009      	b.n	100019e8 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100019d4:	f7fe fd96 	bl	10000504 <HAL_GetTick>
100019d8:	4602      	mov	r2, r0
100019da:	68fb      	ldr	r3, [r7, #12]
100019dc:	1ad3      	subs	r3, r2, r3
100019de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100019e2:	d901      	bls.n	100019e8 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100019e4:	2303      	movs	r3, #3
100019e6:	e040      	b.n	10001a6a <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100019e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100019ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100019f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100019f6:	d1ed      	bne.n	100019d4 <RCC_AXISSConfig+0x90>
100019f8:	e015      	b.n	10001a26 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100019fa:	f7fe fd83 	bl	10000504 <HAL_GetTick>
100019fe:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001a00:	e009      	b.n	10001a16 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a02:	f7fe fd7f 	bl	10000504 <HAL_GetTick>
10001a06:	4602      	mov	r2, r0
10001a08:	68fb      	ldr	r3, [r7, #12]
10001a0a:	1ad3      	subs	r3, r2, r3
10001a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a10:	d901      	bls.n	10001a16 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001a12:	2303      	movs	r3, #3
10001a14:	e029      	b.n	10001a6a <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a24:	d0ed      	beq.n	10001a02 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001a26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001a2c:	f023 0207 	bic.w	r2, r3, #7
10001a30:	687b      	ldr	r3, [r7, #4]
10001a32:	685b      	ldr	r3, [r3, #4]
10001a34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a38:	4313      	orrs	r3, r2
10001a3a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a3c:	f7fe fd62 	bl	10000504 <HAL_GetTick>
10001a40:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001a42:	e009      	b.n	10001a58 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a44:	f7fe fd5e 	bl	10000504 <HAL_GetTick>
10001a48:	4602      	mov	r2, r0
10001a4a:	68fb      	ldr	r3, [r7, #12]
10001a4c:	1ad3      	subs	r3, r2, r3
10001a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a52:	d901      	bls.n	10001a58 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001a54:	2303      	movs	r3, #3
10001a56:	e008      	b.n	10001a6a <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a66:	d1ed      	bne.n	10001a44 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001a68:	2300      	movs	r3, #0
}
10001a6a:	4618      	mov	r0, r3
10001a6c:	3710      	adds	r7, #16
10001a6e:	46bd      	mov	sp, r7
10001a70:	bd80      	pop	{r7, pc}
	...

10001a74 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001a74:	b580      	push	{r7, lr}
10001a76:	b084      	sub	sp, #16
10001a78:	af00      	add	r7, sp, #0
10001a7a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001a7c:	687b      	ldr	r3, [r7, #4]
10001a7e:	681b      	ldr	r3, [r3, #0]
10001a80:	2b03      	cmp	r3, #3
10001a82:	d834      	bhi.n	10001aee <RCC_MCUConfig+0x7a>
10001a84:	a201      	add	r2, pc, #4	; (adr r2, 10001a8c <RCC_MCUConfig+0x18>)
10001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001a8a:	bf00      	nop
10001a8c:	10001a9d 	.word	0x10001a9d
10001a90:	10001ab1 	.word	0x10001ab1
10001a94:	10001ac7 	.word	0x10001ac7
10001a98:	10001adb 	.word	0x10001adb
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aa0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001aa4:	f003 0301 	and.w	r3, r3, #1
10001aa8:	2b01      	cmp	r3, #1
10001aaa:	d022      	beq.n	10001af2 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001aac:	2301      	movs	r3, #1
10001aae:	e081      	b.n	10001bb4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ab4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001ac0:	d019      	beq.n	10001af6 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001ac2:	2301      	movs	r3, #1
10001ac4:	e076      	b.n	10001bb4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aca:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ace:	f003 0310 	and.w	r3, r3, #16
10001ad2:	2b10      	cmp	r3, #16
10001ad4:	d011      	beq.n	10001afa <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001ad6:	2301      	movs	r3, #1
10001ad8:	e06c      	b.n	10001bb4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ade:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001ae2:	f003 0302 	and.w	r3, r3, #2
10001ae6:	2b02      	cmp	r3, #2
10001ae8:	d009      	beq.n	10001afe <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001aea:	2301      	movs	r3, #1
10001aec:	e062      	b.n	10001bb4 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001aee:	bf00      	nop
10001af0:	e006      	b.n	10001b00 <RCC_MCUConfig+0x8c>
      break;
10001af2:	bf00      	nop
10001af4:	e004      	b.n	10001b00 <RCC_MCUConfig+0x8c>
      break;
10001af6:	bf00      	nop
10001af8:	e002      	b.n	10001b00 <RCC_MCUConfig+0x8c>
      break;
10001afa:	bf00      	nop
10001afc:	e000      	b.n	10001b00 <RCC_MCUConfig+0x8c>
      break;
10001afe:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001b06:	f023 0203 	bic.w	r2, r3, #3
10001b0a:	687b      	ldr	r3, [r7, #4]
10001b0c:	681b      	ldr	r3, [r3, #0]
10001b0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b12:	4313      	orrs	r3, r2
10001b14:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001b16:	f7fe fcf5 	bl	10000504 <HAL_GetTick>
10001b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001b1c:	e009      	b.n	10001b32 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b1e:	f7fe fcf1 	bl	10000504 <HAL_GetTick>
10001b22:	4602      	mov	r2, r0
10001b24:	68fb      	ldr	r3, [r7, #12]
10001b26:	1ad3      	subs	r3, r2, r3
10001b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b2c:	d901      	bls.n	10001b32 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001b2e:	2303      	movs	r3, #3
10001b30:	e040      	b.n	10001bb4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b40:	d1ed      	bne.n	10001b1e <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b42:	f000 f954 	bl	10001dee <HAL_RCC_GetSystemCoreClockFreq>
10001b46:	4603      	mov	r3, r0
10001b48:	4a1c      	ldr	r2, [pc, #112]	; (10001bbc <RCC_MCUConfig+0x148>)
10001b4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001b4c:	4b1c      	ldr	r3, [pc, #112]	; (10001bc0 <RCC_MCUConfig+0x14c>)
10001b4e:	681b      	ldr	r3, [r3, #0]
10001b50:	4618      	mov	r0, r3
10001b52:	f7fe fc8d 	bl	10000470 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b5a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001b5e:	f023 020f 	bic.w	r2, r3, #15
10001b62:	687b      	ldr	r3, [r7, #4]
10001b64:	685b      	ldr	r3, [r3, #4]
10001b66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b6a:	4313      	orrs	r3, r2
10001b6c:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001b70:	f7fe fcc8 	bl	10000504 <HAL_GetTick>
10001b74:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001b76:	e009      	b.n	10001b8c <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b78:	f7fe fcc4 	bl	10000504 <HAL_GetTick>
10001b7c:	4602      	mov	r2, r0
10001b7e:	68fb      	ldr	r3, [r7, #12]
10001b80:	1ad3      	subs	r3, r2, r3
10001b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b86:	d901      	bls.n	10001b8c <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001b88:	2303      	movs	r3, #3
10001b8a:	e013      	b.n	10001bb4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001b8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b90:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b9c:	d1ec      	bne.n	10001b78 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b9e:	f000 f926 	bl	10001dee <HAL_RCC_GetSystemCoreClockFreq>
10001ba2:	4603      	mov	r3, r0
10001ba4:	4a05      	ldr	r2, [pc, #20]	; (10001bbc <RCC_MCUConfig+0x148>)
10001ba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001ba8:	4b05      	ldr	r3, [pc, #20]	; (10001bc0 <RCC_MCUConfig+0x14c>)
10001baa:	681b      	ldr	r3, [r3, #0]
10001bac:	4618      	mov	r0, r3
10001bae:	f7fe fc5f 	bl	10000470 <HAL_InitTick>
#endif

  return HAL_OK;
10001bb2:	2300      	movs	r3, #0
}
10001bb4:	4618      	mov	r0, r3
10001bb6:	3710      	adds	r7, #16
10001bb8:	46bd      	mov	sp, r7
10001bba:	bd80      	pop	{r7, pc}
10001bbc:	10020000 	.word	0x10020000
10001bc0:	10020004 	.word	0x10020004

10001bc4 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001bc4:	b480      	push	{r7}
10001bc6:	b089      	sub	sp, #36	; 0x24
10001bc8:	af00      	add	r7, sp, #0
10001bca:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001bcc:	2300      	movs	r3, #0
10001bce:	61bb      	str	r3, [r7, #24]
10001bd0:	2301      	movs	r3, #1
10001bd2:	617b      	str	r3, [r7, #20]
10001bd4:	2300      	movs	r3, #0
10001bd6:	613b      	str	r3, [r7, #16]
10001bd8:	2300      	movs	r3, #0
10001bda:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001bdc:	f04f 0300 	mov.w	r3, #0
10001be0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001be6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001bea:	f003 0303 	and.w	r3, r3, #3
10001bee:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001bf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bf4:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001bf8:	0c1b      	lsrs	r3, r3, #16
10001bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001bfe:	3301      	adds	r3, #1
10001c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c06:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001c0a:	0c1b      	lsrs	r3, r3, #16
10001c0c:	f003 0301 	and.w	r3, r3, #1
10001c10:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c16:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001c1a:	08db      	lsrs	r3, r3, #3
10001c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001c20:	693a      	ldr	r2, [r7, #16]
10001c22:	fb02 f303 	mul.w	r3, r2, r3
10001c26:	ee07 3a90 	vmov	s15, r3
10001c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c2e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c36:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001c3e:	3301      	adds	r3, #1
10001c40:	ee07 3a90 	vmov	s15, r3
10001c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c48:	edd7 6a02 	vldr	s13, [r7, #8]
10001c4c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10001da8 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001c50:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
10001c58:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001c5c:	69bb      	ldr	r3, [r7, #24]
10001c5e:	2b03      	cmp	r3, #3
10001c60:	d85b      	bhi.n	10001d1a <HAL_RCC_GetPLL3ClockFreq+0x156>
10001c62:	a201      	add	r2, pc, #4	; (adr r2, 10001c68 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001c68:	10001c79 	.word	0x10001c79
10001c6c:	10001cd7 	.word	0x10001cd7
10001c70:	10001cf5 	.word	0x10001cf5
10001c74:	10001d13 	.word	0x10001d13
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c7c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c80:	f003 0304 	and.w	r3, r3, #4
10001c84:	2b04      	cmp	r3, #4
10001c86:	d117      	bne.n	10001cb8 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c8c:	699b      	ldr	r3, [r3, #24]
10001c8e:	f003 0303 	and.w	r3, r3, #3
10001c92:	4a46      	ldr	r2, [pc, #280]	; (10001dac <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001c94:	fa22 f303 	lsr.w	r3, r2, r3
10001c98:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001c9a:	68fa      	ldr	r2, [r7, #12]
10001c9c:	697b      	ldr	r3, [r7, #20]
10001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
10001ca2:	ee07 3a90 	vmov	s15, r3
10001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001caa:	ed97 7a07 	vldr	s14, [r7, #28]
10001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
10001cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001cb6:	e030      	b.n	10001d1a <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001cb8:	4a3c      	ldr	r2, [pc, #240]	; (10001dac <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001cba:	697b      	ldr	r3, [r7, #20]
10001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
10001cc0:	ee07 3a90 	vmov	s15, r3
10001cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001cc8:	ed97 7a07 	vldr	s14, [r7, #28]
10001ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
10001cd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001cd4:	e021      	b.n	10001d1a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001cd6:	4a36      	ldr	r2, [pc, #216]	; (10001db0 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001cd8:	697b      	ldr	r3, [r7, #20]
10001cda:	fbb2 f3f3 	udiv	r3, r2, r3
10001cde:	ee07 3a90 	vmov	s15, r3
10001ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ce6:	ed97 7a07 	vldr	s14, [r7, #28]
10001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
10001cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001cf2:	e012      	b.n	10001d1a <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001cf4:	4a2f      	ldr	r2, [pc, #188]	; (10001db4 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001cf6:	697b      	ldr	r3, [r7, #20]
10001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
10001cfc:	ee07 3a90 	vmov	s15, r3
10001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d04:	ed97 7a07 	vldr	s14, [r7, #28]
10001d08:	ee67 7a27 	vmul.f32	s15, s14, s15
10001d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001d10:	e003      	b.n	10001d1a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001d12:	f04f 0300 	mov.w	r3, #0
10001d16:	61fb      	str	r3, [r7, #28]
      break;
10001d18:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d1e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001d26:	3301      	adds	r3, #1
10001d28:	ee07 3a90 	vmov	s15, r3
10001d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d30:	edd7 6a07 	vldr	s13, [r7, #28]
10001d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d3c:	ee17 2a90 	vmov	r2, s15
10001d40:	687b      	ldr	r3, [r7, #4]
10001d42:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d48:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001d4c:	0a1b      	lsrs	r3, r3, #8
10001d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001d52:	3301      	adds	r3, #1
10001d54:	ee07 3a90 	vmov	s15, r3
10001d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d5c:	edd7 6a07 	vldr	s13, [r7, #28]
10001d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d68:	ee17 2a90 	vmov	r2, s15
10001d6c:	687b      	ldr	r3, [r7, #4]
10001d6e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d74:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001d78:	0c1b      	lsrs	r3, r3, #16
10001d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001d7e:	3301      	adds	r3, #1
10001d80:	ee07 3a90 	vmov	s15, r3
10001d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d88:	edd7 6a07 	vldr	s13, [r7, #28]
10001d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d94:	ee17 2a90 	vmov	r2, s15
10001d98:	687b      	ldr	r3, [r7, #4]
10001d9a:	609a      	str	r2, [r3, #8]
}
10001d9c:	bf00      	nop
10001d9e:	3724      	adds	r7, #36	; 0x24
10001da0:	46bd      	mov	sp, r7
10001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001da6:	4770      	bx	lr
10001da8:	46000000 	.word	0x46000000
10001dac:	03d09000 	.word	0x03d09000
10001db0:	016e3600 	.word	0x016e3600
10001db4:	003d0900 	.word	0x003d0900

10001db8 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001db8:	b580      	push	{r7, lr}
10001dba:	b082      	sub	sp, #8
10001dbc:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001dbe:	2300      	movs	r3, #0
10001dc0:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dc6:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001dca:	f003 030f 	and.w	r3, r3, #15
10001dce:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	2b09      	cmp	r3, #9
10001dd4:	d901      	bls.n	10001dda <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001dd6:	2309      	movs	r3, #9
10001dd8:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001dda:	f000 f80f 	bl	10001dfc <HAL_RCC_GetMCUSSFreq>
10001dde:	4602      	mov	r2, r0
10001de0:	687b      	ldr	r3, [r7, #4]
10001de2:	fa22 f303 	lsr.w	r3, r2, r3
}
10001de6:	4618      	mov	r0, r3
10001de8:	3708      	adds	r7, #8
10001dea:	46bd      	mov	sp, r7
10001dec:	bd80      	pop	{r7, pc}

10001dee <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10001dee:	b580      	push	{r7, lr}
10001df0:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001df2:	f7ff ffe1 	bl	10001db8 <HAL_RCC_GetMCUFreq>
10001df6:	4603      	mov	r3, r0
#endif
}
10001df8:	4618      	mov	r0, r3
10001dfa:	bd80      	pop	{r7, pc}

10001dfc <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10001dfc:	b580      	push	{r7, lr}
10001dfe:	b084      	sub	sp, #16
10001e00:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001e02:	2300      	movs	r3, #0
10001e04:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e0c:	f003 0303 	and.w	r3, r3, #3
10001e10:	2b03      	cmp	r3, #3
10001e12:	d822      	bhi.n	10001e5a <HAL_RCC_GetMCUSSFreq+0x5e>
10001e14:	a201      	add	r2, pc, #4	; (adr r2, 10001e1c <HAL_RCC_GetMCUSSFreq+0x20>)
10001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001e1a:	bf00      	nop
10001e1c:	10001e3b 	.word	0x10001e3b
10001e20:	10001e4f 	.word	0x10001e4f
10001e24:	10001e55 	.word	0x10001e55
10001e28:	10001e2d 	.word	0x10001e2d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10001e2c:	463b      	mov	r3, r7
10001e2e:	4618      	mov	r0, r3
10001e30:	f7ff fec8 	bl	10001bc4 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001e34:	683b      	ldr	r3, [r7, #0]
10001e36:	60fb      	str	r3, [r7, #12]
      break;
10001e38:	e00f      	b.n	10001e5a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e3e:	699b      	ldr	r3, [r3, #24]
10001e40:	f003 0303 	and.w	r3, r3, #3
10001e44:	4a07      	ldr	r2, [pc, #28]	; (10001e64 <HAL_RCC_GetMCUSSFreq+0x68>)
10001e46:	fa22 f303 	lsr.w	r3, r2, r3
10001e4a:	60fb      	str	r3, [r7, #12]

      break;
10001e4c:	e005      	b.n	10001e5a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001e4e:	4b06      	ldr	r3, [pc, #24]	; (10001e68 <HAL_RCC_GetMCUSSFreq+0x6c>)
10001e50:	60fb      	str	r3, [r7, #12]
      break;
10001e52:	e002      	b.n	10001e5a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001e54:	4b05      	ldr	r3, [pc, #20]	; (10001e6c <HAL_RCC_GetMCUSSFreq+0x70>)
10001e56:	60fb      	str	r3, [r7, #12]
      break;
10001e58:	bf00      	nop
  }

  return mcussfreq;
10001e5a:	68fb      	ldr	r3, [r7, #12]
}
10001e5c:	4618      	mov	r0, r3
10001e5e:	3710      	adds	r7, #16
10001e60:	46bd      	mov	sp, r7
10001e62:	bd80      	pop	{r7, pc}
10001e64:	03d09000 	.word	0x03d09000
10001e68:	016e3600 	.word	0x016e3600
10001e6c:	003d0900 	.word	0x003d0900

10001e70 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10001e70:	b580      	push	{r7, lr}
10001e72:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10001e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e78:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10001e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10001e84:	d107      	bne.n	10001e96 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10001e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10001e8e:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10001e92:	f000 f802 	bl	10001e9a <HAL_RCC_WAKEUP_Callback>
  }
}
10001e96:	bf00      	nop
10001e98:	bd80      	pop	{r7, pc}

10001e9a <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10001e9a:	b480      	push	{r7}
10001e9c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10001e9e:	bf00      	nop
10001ea0:	46bd      	mov	sp, r7
10001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ea6:	4770      	bx	lr

10001ea8 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10001ea8:	b580      	push	{r7, lr}
10001eaa:	b084      	sub	sp, #16
10001eac:	af00      	add	r7, sp, #0
10001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001eb0:	687b      	ldr	r3, [r7, #4]
10001eb2:	681b      	ldr	r3, [r3, #0]
10001eb4:	2b00      	cmp	r3, #0
10001eb6:	f000 8171 	beq.w	1000219c <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10001eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ec0:	f003 0307 	and.w	r3, r3, #7
10001ec4:	2b02      	cmp	r3, #2
10001ec6:	d108      	bne.n	10001eda <RCCEx_PLL2_Config+0x32>
10001ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ed6:	f000 815f 	beq.w	10002198 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001eda:	687b      	ldr	r3, [r7, #4]
10001edc:	681b      	ldr	r3, [r3, #0]
10001ede:	2b02      	cmp	r3, #2
10001ee0:	f040 8130 	bne.w	10002144 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001eea:	f003 0303 	and.w	r3, r3, #3
10001eee:	2b00      	cmp	r3, #0
10001ef0:	d008      	beq.n	10001f04 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10001ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001ef8:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001efc:	2b01      	cmp	r3, #1
10001efe:	d001      	beq.n	10001f04 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001f00:	2301      	movs	r3, #1
10001f02:	e14c      	b.n	1000219e <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001f18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f24:	f023 0301 	bic.w	r3, r3, #1
10001f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001f2c:	f7fe faea 	bl	10000504 <HAL_GetTick>
10001f30:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001f32:	e008      	b.n	10001f46 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f34:	f7fe fae6 	bl	10000504 <HAL_GetTick>
10001f38:	4602      	mov	r2, r0
10001f3a:	68fb      	ldr	r3, [r7, #12]
10001f3c:	1ad3      	subs	r3, r2, r3
10001f3e:	2b64      	cmp	r3, #100	; 0x64
10001f40:	d901      	bls.n	10001f46 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001f42:	2303      	movs	r3, #3
10001f44:	e12b      	b.n	1000219e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001f46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f4e:	f003 0302 	and.w	r3, r3, #2
10001f52:	2b02      	cmp	r3, #2
10001f54:	d0ee      	beq.n	10001f34 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001f56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f5a:	6a1b      	ldr	r3, [r3, #32]
10001f5c:	f003 0303 	and.w	r3, r3, #3
10001f60:	2b02      	cmp	r3, #2
10001f62:	d107      	bne.n	10001f74 <RCCEx_PLL2_Config+0xcc>
10001f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f68:	6a1b      	ldr	r3, [r3, #32]
10001f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f72:	d00e      	beq.n	10001f92 <RCCEx_PLL2_Config+0xea>
10001f74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f78:	6a1b      	ldr	r3, [r3, #32]
10001f7a:	f003 0303 	and.w	r3, r3, #3
10001f7e:	2b03      	cmp	r3, #3
10001f80:	d112      	bne.n	10001fa8 <RCCEx_PLL2_Config+0x100>
10001f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f86:	6a1b      	ldr	r3, [r3, #32]
10001f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f90:	d10a      	bne.n	10001fa8 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001f92:	687b      	ldr	r3, [r7, #4]
10001f94:	685a      	ldr	r2, [r3, #4]
10001f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f9c:	f003 0303 	and.w	r3, r3, #3
10001fa0:	429a      	cmp	r2, r3
10001fa2:	d00c      	beq.n	10001fbe <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001fa4:	2301      	movs	r3, #1
10001fa6:	e0fa      	b.n	1000219e <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001fa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001fae:	f023 0203 	bic.w	r2, r3, #3
10001fb2:	687b      	ldr	r3, [r7, #4]
10001fb4:	685b      	ldr	r3, [r3, #4]
10001fb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001fba:	4313      	orrs	r3, r2
10001fbc:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10001fc6:	4b78      	ldr	r3, [pc, #480]	; (100021a8 <RCCEx_PLL2_Config+0x300>)
10001fc8:	4013      	ands	r3, r2
10001fca:	687a      	ldr	r2, [r7, #4]
10001fcc:	68d2      	ldr	r2, [r2, #12]
10001fce:	1e51      	subs	r1, r2, #1
10001fd0:	687a      	ldr	r2, [r7, #4]
10001fd2:	6892      	ldr	r2, [r2, #8]
10001fd4:	3a01      	subs	r2, #1
10001fd6:	0412      	lsls	r2, r2, #16
10001fd8:	430a      	orrs	r2, r1
10001fda:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001fde:	4313      	orrs	r3, r2
10001fe0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10001fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001fec:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001ff4:	687a      	ldr	r2, [r7, #4]
10001ff6:	6912      	ldr	r2, [r2, #16]
10001ff8:	1e51      	subs	r1, r2, #1
10001ffa:	687a      	ldr	r2, [r7, #4]
10001ffc:	6952      	ldr	r2, [r2, #20]
10001ffe:	3a01      	subs	r2, #1
10002000:	0212      	lsls	r2, r2, #8
10002002:	4311      	orrs	r1, r2
10002004:	687a      	ldr	r2, [r7, #4]
10002006:	6992      	ldr	r2, [r2, #24]
10002008:	3a01      	subs	r2, #1
1000200a:	0412      	lsls	r2, r2, #16
1000200c:	430a      	orrs	r2, r1
1000200e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002012:	4313      	orrs	r3, r2
10002014:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10002018:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000201c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002020:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002028:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
1000202c:	687b      	ldr	r3, [r7, #4]
1000202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002030:	2b02      	cmp	r3, #2
10002032:	d003      	beq.n	1000203c <RCCEx_PLL2_Config+0x194>
10002034:	687b      	ldr	r3, [r7, #4]
10002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002038:	2b00      	cmp	r3, #0
1000203a:	d10c      	bne.n	10002056 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
1000203c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002044:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002048:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000204c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002050:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10002054:	e00f      	b.n	10002076 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10002056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000205a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000205e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002062:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002066:	687a      	ldr	r2, [r7, #4]
10002068:	6a12      	ldr	r2, [r2, #32]
1000206a:	00d2      	lsls	r2, r2, #3
1000206c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002070:	4313      	orrs	r3, r2
10002072:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10002076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000207a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000207e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002086:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000208a:	687b      	ldr	r3, [r7, #4]
1000208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000208e:	2b02      	cmp	r3, #2
10002090:	d124      	bne.n	100020dc <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10002092:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000209a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000209e:	687b      	ldr	r3, [r7, #4]
100020a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
100020a2:	687b      	ldr	r3, [r7, #4]
100020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100020a6:	4319      	orrs	r1, r3
100020a8:	687b      	ldr	r3, [r7, #4]
100020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100020ac:	4319      	orrs	r1, r3
100020ae:	687b      	ldr	r3, [r7, #4]
100020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100020b2:	4319      	orrs	r1, r3
100020b4:	687b      	ldr	r3, [r7, #4]
100020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100020b8:	041b      	lsls	r3, r3, #16
100020ba:	430b      	orrs	r3, r1
100020bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020c0:	4313      	orrs	r3, r2
100020c2:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100020c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100020ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020d2:	f043 0304 	orr.w	r3, r3, #4
100020d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
100020da:	e009      	b.n	100020f0 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100020dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100020e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020e8:	f023 0304 	bic.w	r3, r3, #4
100020ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100020f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100020f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020fc:	f043 0301 	orr.w	r3, r3, #1
10002100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002104:	f7fe f9fe 	bl	10000504 <HAL_GetTick>
10002108:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000210a:	e008      	b.n	1000211e <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000210c:	f7fe f9fa 	bl	10000504 <HAL_GetTick>
10002110:	4602      	mov	r2, r0
10002112:	68fb      	ldr	r3, [r7, #12]
10002114:	1ad3      	subs	r3, r2, r3
10002116:	2b64      	cmp	r3, #100	; 0x64
10002118:	d901      	bls.n	1000211e <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
1000211a:	2303      	movs	r3, #3
1000211c:	e03f      	b.n	1000219e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000211e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002126:	f003 0302 	and.w	r3, r3, #2
1000212a:	2b02      	cmp	r3, #2
1000212c:	d1ee      	bne.n	1000210c <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000212e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000213a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000213e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10002142:	e02b      	b.n	1000219c <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000214c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000215c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002164:	f023 0301 	bic.w	r3, r3, #1
10002168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000216c:	f7fe f9ca 	bl	10000504 <HAL_GetTick>
10002170:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002172:	e008      	b.n	10002186 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002174:	f7fe f9c6 	bl	10000504 <HAL_GetTick>
10002178:	4602      	mov	r2, r0
1000217a:	68fb      	ldr	r3, [r7, #12]
1000217c:	1ad3      	subs	r3, r2, r3
1000217e:	2b64      	cmp	r3, #100	; 0x64
10002180:	d901      	bls.n	10002186 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10002182:	2303      	movs	r3, #3
10002184:	e00b      	b.n	1000219e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000218e:	f003 0302 	and.w	r3, r3, #2
10002192:	2b02      	cmp	r3, #2
10002194:	d0ee      	beq.n	10002174 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10002196:	e001      	b.n	1000219c <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002198:	2301      	movs	r3, #1
1000219a:	e000      	b.n	1000219e <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
1000219c:	2300      	movs	r3, #0

}
1000219e:	4618      	mov	r0, r3
100021a0:	3710      	adds	r7, #16
100021a2:	46bd      	mov	sp, r7
100021a4:	bd80      	pop	{r7, pc}
100021a6:	bf00      	nop
100021a8:	ffc0fe00 	.word	0xffc0fe00

100021ac <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100021ac:	b580      	push	{r7, lr}
100021ae:	b084      	sub	sp, #16
100021b0:	af00      	add	r7, sp, #0
100021b2:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100021b4:	687b      	ldr	r3, [r7, #4]
100021b6:	681b      	ldr	r3, [r3, #0]
100021b8:	2b00      	cmp	r3, #0
100021ba:	f000 815a 	beq.w	10002472 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100021be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100021c4:	f003 0303 	and.w	r3, r3, #3
100021c8:	2b03      	cmp	r3, #3
100021ca:	d108      	bne.n	100021de <RCCEx_PLL3_Config+0x32>
100021cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100021d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100021d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100021da:	f000 8148 	beq.w	1000246e <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100021de:	687b      	ldr	r3, [r7, #4]
100021e0:	681b      	ldr	r3, [r3, #0]
100021e2:	2b02      	cmp	r3, #2
100021e4:	f040 8119 	bne.w	1000241a <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100021e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100021f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100021f8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100021fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002200:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002204:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002208:	f023 0301 	bic.w	r3, r3, #1
1000220c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002210:	f7fe f978 	bl	10000504 <HAL_GetTick>
10002214:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002216:	e008      	b.n	1000222a <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002218:	f7fe f974 	bl	10000504 <HAL_GetTick>
1000221c:	4602      	mov	r2, r0
1000221e:	68fb      	ldr	r3, [r7, #12]
10002220:	1ad3      	subs	r3, r2, r3
10002222:	2b64      	cmp	r3, #100	; 0x64
10002224:	d901      	bls.n	1000222a <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10002226:	2303      	movs	r3, #3
10002228:	e124      	b.n	10002474 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000222a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000222e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002232:	f003 0302 	and.w	r3, r3, #2
10002236:	2b02      	cmp	r3, #2
10002238:	d0ee      	beq.n	10002218 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
1000223a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000223e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002242:	f023 0203 	bic.w	r2, r3, #3
10002246:	687b      	ldr	r3, [r7, #4]
10002248:	685b      	ldr	r3, [r3, #4]
1000224a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000224e:	4313      	orrs	r3, r2
10002250:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002254:	e008      	b.n	10002268 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002256:	f7fe f955 	bl	10000504 <HAL_GetTick>
1000225a:	4602      	mov	r2, r0
1000225c:	68fb      	ldr	r3, [r7, #12]
1000225e:	1ad3      	subs	r3, r2, r3
10002260:	2b64      	cmp	r3, #100	; 0x64
10002262:	d901      	bls.n	10002268 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10002264:	2303      	movs	r3, #3
10002266:	e105      	b.n	10002474 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002268:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000226c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002278:	d1ed      	bne.n	10002256 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
1000227a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000227e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002282:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002286:	687b      	ldr	r3, [r7, #4]
10002288:	69db      	ldr	r3, [r3, #28]
1000228a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000228e:	4313      	orrs	r3, r2
10002290:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10002294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002298:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
1000229c:	4b77      	ldr	r3, [pc, #476]	; (1000247c <RCCEx_PLL3_Config+0x2d0>)
1000229e:	4013      	ands	r3, r2
100022a0:	687a      	ldr	r2, [r7, #4]
100022a2:	68d2      	ldr	r2, [r2, #12]
100022a4:	1e51      	subs	r1, r2, #1
100022a6:	687a      	ldr	r2, [r7, #4]
100022a8:	6892      	ldr	r2, [r2, #8]
100022aa:	3a01      	subs	r2, #1
100022ac:	0412      	lsls	r2, r2, #16
100022ae:	430a      	orrs	r2, r1
100022b0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022b4:	4313      	orrs	r3, r2
100022b6:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
100022ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022be:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100022c2:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100022c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100022ca:	687a      	ldr	r2, [r7, #4]
100022cc:	6912      	ldr	r2, [r2, #16]
100022ce:	1e51      	subs	r1, r2, #1
100022d0:	687a      	ldr	r2, [r7, #4]
100022d2:	6952      	ldr	r2, [r2, #20]
100022d4:	3a01      	subs	r2, #1
100022d6:	0212      	lsls	r2, r2, #8
100022d8:	4311      	orrs	r1, r2
100022da:	687a      	ldr	r2, [r7, #4]
100022dc:	6992      	ldr	r2, [r2, #24]
100022de:	3a01      	subs	r2, #1
100022e0:	0412      	lsls	r2, r2, #16
100022e2:	430a      	orrs	r2, r1
100022e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022e8:	4313      	orrs	r3, r2
100022ea:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100022ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022f2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100022f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100022fe:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10002302:	687b      	ldr	r3, [r7, #4]
10002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002306:	2b02      	cmp	r3, #2
10002308:	d003      	beq.n	10002312 <RCCEx_PLL3_Config+0x166>
1000230a:	687b      	ldr	r3, [r7, #4]
1000230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000230e:	2b00      	cmp	r3, #0
10002310:	d10c      	bne.n	1000232c <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10002312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002316:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000231a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000231e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002322:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002326:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
1000232a:	e00f      	b.n	1000234c <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
1000232c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002330:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002334:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002338:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000233c:	687a      	ldr	r2, [r7, #4]
1000233e:	6a12      	ldr	r2, [r2, #32]
10002340:	00d2      	lsls	r2, r2, #3
10002342:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002346:	4313      	orrs	r3, r2
10002348:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
1000234c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002350:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002354:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000235c:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002360:	687b      	ldr	r3, [r7, #4]
10002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002364:	2b02      	cmp	r3, #2
10002366:	d124      	bne.n	100023b2 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000236c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10002370:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002374:	687b      	ldr	r3, [r7, #4]
10002376:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002378:	687b      	ldr	r3, [r7, #4]
1000237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000237c:	4319      	orrs	r1, r3
1000237e:	687b      	ldr	r3, [r7, #4]
10002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002382:	4319      	orrs	r1, r3
10002384:	687b      	ldr	r3, [r7, #4]
10002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002388:	4319      	orrs	r1, r3
1000238a:	687b      	ldr	r3, [r7, #4]
1000238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000238e:	041b      	lsls	r3, r3, #16
10002390:	430b      	orrs	r3, r1
10002392:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002396:	4313      	orrs	r3, r2
10002398:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
1000239c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023a8:	f043 0304 	orr.w	r3, r3, #4
100023ac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100023b0:	e009      	b.n	100023c6 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100023b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023be:	f023 0304 	bic.w	r3, r3, #4
100023c2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100023c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023d2:	f043 0301 	orr.w	r3, r3, #1
100023d6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100023da:	f7fe f893 	bl	10000504 <HAL_GetTick>
100023de:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100023e0:	e008      	b.n	100023f4 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100023e2:	f7fe f88f 	bl	10000504 <HAL_GetTick>
100023e6:	4602      	mov	r2, r0
100023e8:	68fb      	ldr	r3, [r7, #12]
100023ea:	1ad3      	subs	r3, r2, r3
100023ec:	2b64      	cmp	r3, #100	; 0x64
100023ee:	d901      	bls.n	100023f4 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100023f0:	2303      	movs	r3, #3
100023f2:	e03f      	b.n	10002474 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100023f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023f8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023fc:	f003 0302 	and.w	r3, r3, #2
10002400:	2b02      	cmp	r3, #2
10002402:	d1ee      	bne.n	100023e2 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002404:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002408:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000240c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002410:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002414:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002418:	e02b      	b.n	10002472 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000241a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000241e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002422:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000242a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
1000242e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002432:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000243a:	f023 0301 	bic.w	r3, r3, #1
1000243e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002442:	f7fe f85f 	bl	10000504 <HAL_GetTick>
10002446:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002448:	e008      	b.n	1000245c <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000244a:	f7fe f85b 	bl	10000504 <HAL_GetTick>
1000244e:	4602      	mov	r2, r0
10002450:	68fb      	ldr	r3, [r7, #12]
10002452:	1ad3      	subs	r3, r2, r3
10002454:	2b64      	cmp	r3, #100	; 0x64
10002456:	d901      	bls.n	1000245c <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002458:	2303      	movs	r3, #3
1000245a:	e00b      	b.n	10002474 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000245c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002460:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002464:	f003 0302 	and.w	r3, r3, #2
10002468:	2b02      	cmp	r3, #2
1000246a:	d0ee      	beq.n	1000244a <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
1000246c:	e001      	b.n	10002472 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000246e:	2301      	movs	r3, #1
10002470:	e000      	b.n	10002474 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002472:	2300      	movs	r3, #0
}
10002474:	4618      	mov	r0, r3
10002476:	3710      	adds	r7, #16
10002478:	46bd      	mov	sp, r7
1000247a:	bd80      	pop	{r7, pc}
1000247c:	ffc0fe00 	.word	0xffc0fe00

10002480 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002480:	b580      	push	{r7, lr}
10002482:	b084      	sub	sp, #16
10002484:	af00      	add	r7, sp, #0
10002486:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002488:	687b      	ldr	r3, [r7, #4]
1000248a:	681b      	ldr	r3, [r3, #0]
1000248c:	2b00      	cmp	r3, #0
1000248e:	f000 8147 	beq.w	10002720 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002492:	687b      	ldr	r3, [r7, #4]
10002494:	681b      	ldr	r3, [r3, #0]
10002496:	2b02      	cmp	r3, #2
10002498:	f040 8119 	bne.w	100026ce <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000249c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024a0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100024a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100024ac:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100024b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100024b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024bc:	f023 0301 	bic.w	r3, r3, #1
100024c0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100024c4:	f7fe f81e 	bl	10000504 <HAL_GetTick>
100024c8:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100024ca:	e008      	b.n	100024de <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100024cc:	f7fe f81a 	bl	10000504 <HAL_GetTick>
100024d0:	4602      	mov	r2, r0
100024d2:	68fb      	ldr	r3, [r7, #12]
100024d4:	1ad3      	subs	r3, r2, r3
100024d6:	2b64      	cmp	r3, #100	; 0x64
100024d8:	d901      	bls.n	100024de <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100024da:	2303      	movs	r3, #3
100024dc:	e121      	b.n	10002722 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100024de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024e2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100024e6:	f003 0302 	and.w	r3, r3, #2
100024ea:	2b02      	cmp	r3, #2
100024ec:	d0ee      	beq.n	100024cc <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100024ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024f2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100024f6:	f023 0203 	bic.w	r2, r3, #3
100024fa:	687b      	ldr	r3, [r7, #4]
100024fc:	685b      	ldr	r3, [r3, #4]
100024fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002502:	4313      	orrs	r3, r2
10002504:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002508:	e008      	b.n	1000251c <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000250a:	f7fd fffb 	bl	10000504 <HAL_GetTick>
1000250e:	4602      	mov	r2, r0
10002510:	68fb      	ldr	r3, [r7, #12]
10002512:	1ad3      	subs	r3, r2, r3
10002514:	2b64      	cmp	r3, #100	; 0x64
10002516:	d901      	bls.n	1000251c <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002518:	2303      	movs	r3, #3
1000251a:	e102      	b.n	10002722 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000251c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002520:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000252c:	d1ed      	bne.n	1000250a <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
1000252e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002532:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10002536:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000253a:	687b      	ldr	r3, [r7, #4]
1000253c:	69db      	ldr	r3, [r3, #28]
1000253e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002542:	4313      	orrs	r3, r2
10002544:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000254c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002550:	4b76      	ldr	r3, [pc, #472]	; (1000272c <RCCEx_PLL4_Config+0x2ac>)
10002552:	4013      	ands	r3, r2
10002554:	687a      	ldr	r2, [r7, #4]
10002556:	68d2      	ldr	r2, [r2, #12]
10002558:	1e51      	subs	r1, r2, #1
1000255a:	687a      	ldr	r2, [r7, #4]
1000255c:	6892      	ldr	r2, [r2, #8]
1000255e:	3a01      	subs	r2, #1
10002560:	0412      	lsls	r2, r2, #16
10002562:	430a      	orrs	r2, r1
10002564:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002568:	4313      	orrs	r3, r2
1000256a:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
1000256e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002572:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002576:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000257a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000257e:	687a      	ldr	r2, [r7, #4]
10002580:	6912      	ldr	r2, [r2, #16]
10002582:	1e51      	subs	r1, r2, #1
10002584:	687a      	ldr	r2, [r7, #4]
10002586:	6952      	ldr	r2, [r2, #20]
10002588:	3a01      	subs	r2, #1
1000258a:	0212      	lsls	r2, r2, #8
1000258c:	4311      	orrs	r1, r2
1000258e:	687a      	ldr	r2, [r7, #4]
10002590:	6992      	ldr	r2, [r2, #24]
10002592:	3a01      	subs	r2, #1
10002594:	0412      	lsls	r2, r2, #16
10002596:	430a      	orrs	r2, r1
10002598:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000259c:	4313      	orrs	r3, r2
1000259e:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100025a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100025aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100025b2:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100025b6:	687b      	ldr	r3, [r7, #4]
100025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100025ba:	2b02      	cmp	r3, #2
100025bc:	d003      	beq.n	100025c6 <RCCEx_PLL4_Config+0x146>
100025be:	687b      	ldr	r3, [r7, #4]
100025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100025c2:	2b00      	cmp	r3, #0
100025c4:	d10c      	bne.n	100025e0 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100025c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ca:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100025ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100025d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100025da:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
100025de:	e00f      	b.n	10002600 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
100025e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025e4:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100025e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100025ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100025f0:	687a      	ldr	r2, [r7, #4]
100025f2:	6a12      	ldr	r2, [r2, #32]
100025f4:	00d2      	lsls	r2, r2, #3
100025f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025fa:	4313      	orrs	r3, r2
100025fc:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002604:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002610:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002614:	687b      	ldr	r3, [r7, #4]
10002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002618:	2b02      	cmp	r3, #2
1000261a:	d124      	bne.n	10002666 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
1000261c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002620:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10002624:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002628:	687b      	ldr	r3, [r7, #4]
1000262a:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000262c:	687b      	ldr	r3, [r7, #4]
1000262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002630:	4319      	orrs	r1, r3
10002632:	687b      	ldr	r3, [r7, #4]
10002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002636:	4319      	orrs	r1, r3
10002638:	687b      	ldr	r3, [r7, #4]
1000263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000263c:	4319      	orrs	r1, r3
1000263e:	687b      	ldr	r3, [r7, #4]
10002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002642:	041b      	lsls	r3, r3, #16
10002644:	430b      	orrs	r3, r1
10002646:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000264a:	4313      	orrs	r3, r2
1000264c:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002654:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002658:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000265c:	f043 0304 	orr.w	r3, r3, #4
10002660:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002664:	e009      	b.n	1000267a <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000266a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000266e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002672:	f023 0304 	bic.w	r3, r3, #4
10002676:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
1000267a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000267e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002686:	f043 0301 	orr.w	r3, r3, #1
1000268a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000268e:	f7fd ff39 	bl	10000504 <HAL_GetTick>
10002692:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002694:	e008      	b.n	100026a8 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002696:	f7fd ff35 	bl	10000504 <HAL_GetTick>
1000269a:	4602      	mov	r2, r0
1000269c:	68fb      	ldr	r3, [r7, #12]
1000269e:	1ad3      	subs	r3, r2, r3
100026a0:	2b64      	cmp	r3, #100	; 0x64
100026a2:	d901      	bls.n	100026a8 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100026a4:	2303      	movs	r3, #3
100026a6:	e03c      	b.n	10002722 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100026a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026ac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026b0:	f003 0302 	and.w	r3, r3, #2
100026b4:	2b02      	cmp	r3, #2
100026b6:	d1ee      	bne.n	10002696 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100026b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100026c8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100026cc:	e028      	b.n	10002720 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100026ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026d2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100026de:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
100026e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026e6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026ee:	f023 0301 	bic.w	r3, r3, #1
100026f2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100026f6:	f7fd ff05 	bl	10000504 <HAL_GetTick>
100026fa:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100026fc:	e008      	b.n	10002710 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100026fe:	f7fd ff01 	bl	10000504 <HAL_GetTick>
10002702:	4602      	mov	r2, r0
10002704:	68fb      	ldr	r3, [r7, #12]
10002706:	1ad3      	subs	r3, r2, r3
10002708:	2b64      	cmp	r3, #100	; 0x64
1000270a:	d901      	bls.n	10002710 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
1000270c:	2303      	movs	r3, #3
1000270e:	e008      	b.n	10002722 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002710:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002714:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002718:	f003 0302 	and.w	r3, r3, #2
1000271c:	2b02      	cmp	r3, #2
1000271e:	d0ee      	beq.n	100026fe <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002720:	2300      	movs	r3, #0
}
10002722:	4618      	mov	r0, r3
10002724:	3710      	adds	r7, #16
10002726:	46bd      	mov	sp, r7
10002728:	bd80      	pop	{r7, pc}
1000272a:	bf00      	nop
1000272c:	ffc0fe00 	.word	0xffc0fe00

10002730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
10002730:	b580      	push	{r7, lr}
10002732:	b082      	sub	sp, #8
10002734:	af00      	add	r7, sp, #0
10002736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
10002738:	687b      	ldr	r3, [r7, #4]
1000273a:	2b00      	cmp	r3, #0
1000273c:	d101      	bne.n	10002742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1000273e:	2301      	movs	r3, #1
10002740:	e01d      	b.n	1000277e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
10002748:	b2db      	uxtb	r3, r3
1000274a:	2b00      	cmp	r3, #0
1000274c:	d106      	bne.n	1000275c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	2200      	movs	r2, #0
10002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
10002756:	6878      	ldr	r0, [r7, #4]
10002758:	f7fd fe52 	bl	10000400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1000275c:	687b      	ldr	r3, [r7, #4]
1000275e:	2202      	movs	r2, #2
10002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
10002764:	687b      	ldr	r3, [r7, #4]
10002766:	681a      	ldr	r2, [r3, #0]
10002768:	687b      	ldr	r3, [r7, #4]
1000276a:	3304      	adds	r3, #4
1000276c:	4619      	mov	r1, r3
1000276e:	4610      	mov	r0, r2
10002770:	f000 fa16 	bl	10002ba0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
10002774:	687b      	ldr	r3, [r7, #4]
10002776:	2201      	movs	r2, #1
10002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
1000277c:	2300      	movs	r3, #0
}
1000277e:	4618      	mov	r0, r3
10002780:	3708      	adds	r7, #8
10002782:	46bd      	mov	sp, r7
10002784:	bd80      	pop	{r7, pc}

10002786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
10002786:	b580      	push	{r7, lr}
10002788:	b082      	sub	sp, #8
1000278a:	af00      	add	r7, sp, #0
1000278c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
1000278e:	687b      	ldr	r3, [r7, #4]
10002790:	681b      	ldr	r3, [r3, #0]
10002792:	691b      	ldr	r3, [r3, #16]
10002794:	f003 0302 	and.w	r3, r3, #2
10002798:	2b02      	cmp	r3, #2
1000279a:	d122      	bne.n	100027e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
1000279c:	687b      	ldr	r3, [r7, #4]
1000279e:	681b      	ldr	r3, [r3, #0]
100027a0:	68db      	ldr	r3, [r3, #12]
100027a2:	f003 0302 	and.w	r3, r3, #2
100027a6:	2b02      	cmp	r3, #2
100027a8:	d11b      	bne.n	100027e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
100027aa:	687b      	ldr	r3, [r7, #4]
100027ac:	681b      	ldr	r3, [r3, #0]
100027ae:	f06f 0202 	mvn.w	r2, #2
100027b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
100027b4:	687b      	ldr	r3, [r7, #4]
100027b6:	2201      	movs	r2, #1
100027b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
100027ba:	687b      	ldr	r3, [r7, #4]
100027bc:	681b      	ldr	r3, [r3, #0]
100027be:	699b      	ldr	r3, [r3, #24]
100027c0:	f003 0303 	and.w	r3, r3, #3
100027c4:	2b00      	cmp	r3, #0
100027c6:	d003      	beq.n	100027d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
100027c8:	6878      	ldr	r0, [r7, #4]
100027ca:	f000 f9cb 	bl	10002b64 <HAL_TIM_IC_CaptureCallback>
100027ce:	e005      	b.n	100027dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
100027d0:	6878      	ldr	r0, [r7, #4]
100027d2:	f000 f9bd 	bl	10002b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
100027d6:	6878      	ldr	r0, [r7, #4]
100027d8:	f000 f9ce 	bl	10002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100027dc:	687b      	ldr	r3, [r7, #4]
100027de:	2200      	movs	r2, #0
100027e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
100027e2:	687b      	ldr	r3, [r7, #4]
100027e4:	681b      	ldr	r3, [r3, #0]
100027e6:	691b      	ldr	r3, [r3, #16]
100027e8:	f003 0304 	and.w	r3, r3, #4
100027ec:	2b04      	cmp	r3, #4
100027ee:	d122      	bne.n	10002836 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
100027f0:	687b      	ldr	r3, [r7, #4]
100027f2:	681b      	ldr	r3, [r3, #0]
100027f4:	68db      	ldr	r3, [r3, #12]
100027f6:	f003 0304 	and.w	r3, r3, #4
100027fa:	2b04      	cmp	r3, #4
100027fc:	d11b      	bne.n	10002836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
100027fe:	687b      	ldr	r3, [r7, #4]
10002800:	681b      	ldr	r3, [r3, #0]
10002802:	f06f 0204 	mvn.w	r2, #4
10002806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
10002808:	687b      	ldr	r3, [r7, #4]
1000280a:	2202      	movs	r2, #2
1000280c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	681b      	ldr	r3, [r3, #0]
10002812:	699b      	ldr	r3, [r3, #24]
10002814:	f403 7340 	and.w	r3, r3, #768	; 0x300
10002818:	2b00      	cmp	r3, #0
1000281a:	d003      	beq.n	10002824 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1000281c:	6878      	ldr	r0, [r7, #4]
1000281e:	f000 f9a1 	bl	10002b64 <HAL_TIM_IC_CaptureCallback>
10002822:	e005      	b.n	10002830 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
10002824:	6878      	ldr	r0, [r7, #4]
10002826:	f000 f993 	bl	10002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1000282a:	6878      	ldr	r0, [r7, #4]
1000282c:	f000 f9a4 	bl	10002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10002830:	687b      	ldr	r3, [r7, #4]
10002832:	2200      	movs	r2, #0
10002834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
10002836:	687b      	ldr	r3, [r7, #4]
10002838:	681b      	ldr	r3, [r3, #0]
1000283a:	691b      	ldr	r3, [r3, #16]
1000283c:	f003 0308 	and.w	r3, r3, #8
10002840:	2b08      	cmp	r3, #8
10002842:	d122      	bne.n	1000288a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
10002844:	687b      	ldr	r3, [r7, #4]
10002846:	681b      	ldr	r3, [r3, #0]
10002848:	68db      	ldr	r3, [r3, #12]
1000284a:	f003 0308 	and.w	r3, r3, #8
1000284e:	2b08      	cmp	r3, #8
10002850:	d11b      	bne.n	1000288a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
10002852:	687b      	ldr	r3, [r7, #4]
10002854:	681b      	ldr	r3, [r3, #0]
10002856:	f06f 0208 	mvn.w	r2, #8
1000285a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1000285c:	687b      	ldr	r3, [r7, #4]
1000285e:	2204      	movs	r2, #4
10002860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	681b      	ldr	r3, [r3, #0]
10002866:	69db      	ldr	r3, [r3, #28]
10002868:	f003 0303 	and.w	r3, r3, #3
1000286c:	2b00      	cmp	r3, #0
1000286e:	d003      	beq.n	10002878 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
10002870:	6878      	ldr	r0, [r7, #4]
10002872:	f000 f977 	bl	10002b64 <HAL_TIM_IC_CaptureCallback>
10002876:	e005      	b.n	10002884 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
10002878:	6878      	ldr	r0, [r7, #4]
1000287a:	f000 f969 	bl	10002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1000287e:	6878      	ldr	r0, [r7, #4]
10002880:	f000 f97a 	bl	10002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10002884:	687b      	ldr	r3, [r7, #4]
10002886:	2200      	movs	r2, #0
10002888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
1000288a:	687b      	ldr	r3, [r7, #4]
1000288c:	681b      	ldr	r3, [r3, #0]
1000288e:	691b      	ldr	r3, [r3, #16]
10002890:	f003 0310 	and.w	r3, r3, #16
10002894:	2b10      	cmp	r3, #16
10002896:	d122      	bne.n	100028de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
10002898:	687b      	ldr	r3, [r7, #4]
1000289a:	681b      	ldr	r3, [r3, #0]
1000289c:	68db      	ldr	r3, [r3, #12]
1000289e:	f003 0310 	and.w	r3, r3, #16
100028a2:	2b10      	cmp	r3, #16
100028a4:	d11b      	bne.n	100028de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
100028a6:	687b      	ldr	r3, [r7, #4]
100028a8:	681b      	ldr	r3, [r3, #0]
100028aa:	f06f 0210 	mvn.w	r2, #16
100028ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
100028b0:	687b      	ldr	r3, [r7, #4]
100028b2:	2208      	movs	r2, #8
100028b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
100028b6:	687b      	ldr	r3, [r7, #4]
100028b8:	681b      	ldr	r3, [r3, #0]
100028ba:	69db      	ldr	r3, [r3, #28]
100028bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
100028c0:	2b00      	cmp	r3, #0
100028c2:	d003      	beq.n	100028cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
100028c4:	6878      	ldr	r0, [r7, #4]
100028c6:	f000 f94d 	bl	10002b64 <HAL_TIM_IC_CaptureCallback>
100028ca:	e005      	b.n	100028d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
100028cc:	6878      	ldr	r0, [r7, #4]
100028ce:	f000 f93f 	bl	10002b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
100028d2:	6878      	ldr	r0, [r7, #4]
100028d4:	f000 f950 	bl	10002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100028d8:	687b      	ldr	r3, [r7, #4]
100028da:	2200      	movs	r2, #0
100028dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
100028de:	687b      	ldr	r3, [r7, #4]
100028e0:	681b      	ldr	r3, [r3, #0]
100028e2:	691b      	ldr	r3, [r3, #16]
100028e4:	f003 0301 	and.w	r3, r3, #1
100028e8:	2b01      	cmp	r3, #1
100028ea:	d10e      	bne.n	1000290a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
100028ec:	687b      	ldr	r3, [r7, #4]
100028ee:	681b      	ldr	r3, [r3, #0]
100028f0:	68db      	ldr	r3, [r3, #12]
100028f2:	f003 0301 	and.w	r3, r3, #1
100028f6:	2b01      	cmp	r3, #1
100028f8:	d107      	bne.n	1000290a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
100028fa:	687b      	ldr	r3, [r7, #4]
100028fc:	681b      	ldr	r3, [r3, #0]
100028fe:	f06f 0201 	mvn.w	r2, #1
10002902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
10002904:	6878      	ldr	r0, [r7, #4]
10002906:	f7fd fbe9 	bl	100000dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	681b      	ldr	r3, [r3, #0]
1000290e:	691b      	ldr	r3, [r3, #16]
10002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002914:	2b80      	cmp	r3, #128	; 0x80
10002916:	d10e      	bne.n	10002936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
10002918:	687b      	ldr	r3, [r7, #4]
1000291a:	681b      	ldr	r3, [r3, #0]
1000291c:	68db      	ldr	r3, [r3, #12]
1000291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002922:	2b80      	cmp	r3, #128	; 0x80
10002924:	d107      	bne.n	10002936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
10002926:	687b      	ldr	r3, [r7, #4]
10002928:	681b      	ldr	r3, [r3, #0]
1000292a:	f06f 0280 	mvn.w	r2, #128	; 0x80
1000292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
10002930:	6878      	ldr	r0, [r7, #4]
10002932:	f000 facd 	bl	10002ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	681b      	ldr	r3, [r3, #0]
1000293a:	691b      	ldr	r3, [r3, #16]
1000293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002944:	d10e      	bne.n	10002964 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
10002946:	687b      	ldr	r3, [r7, #4]
10002948:	681b      	ldr	r3, [r3, #0]
1000294a:	68db      	ldr	r3, [r3, #12]
1000294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
10002950:	2b80      	cmp	r3, #128	; 0x80
10002952:	d107      	bne.n	10002964 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
10002954:	687b      	ldr	r3, [r7, #4]
10002956:	681b      	ldr	r3, [r3, #0]
10002958:	f46f 7280 	mvn.w	r2, #256	; 0x100
1000295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
1000295e:	6878      	ldr	r0, [r7, #4]
10002960:	f000 fac0 	bl	10002ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
10002964:	687b      	ldr	r3, [r7, #4]
10002966:	681b      	ldr	r3, [r3, #0]
10002968:	691b      	ldr	r3, [r3, #16]
1000296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000296e:	2b40      	cmp	r3, #64	; 0x40
10002970:	d10e      	bne.n	10002990 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
10002972:	687b      	ldr	r3, [r7, #4]
10002974:	681b      	ldr	r3, [r3, #0]
10002976:	68db      	ldr	r3, [r3, #12]
10002978:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000297c:	2b40      	cmp	r3, #64	; 0x40
1000297e:	d107      	bne.n	10002990 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
10002980:	687b      	ldr	r3, [r7, #4]
10002982:	681b      	ldr	r3, [r3, #0]
10002984:	f06f 0240 	mvn.w	r2, #64	; 0x40
10002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1000298a:	6878      	ldr	r0, [r7, #4]
1000298c:	f000 f8fe 	bl	10002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
10002990:	687b      	ldr	r3, [r7, #4]
10002992:	681b      	ldr	r3, [r3, #0]
10002994:	691b      	ldr	r3, [r3, #16]
10002996:	f003 0320 	and.w	r3, r3, #32
1000299a:	2b20      	cmp	r3, #32
1000299c:	d10e      	bne.n	100029bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
1000299e:	687b      	ldr	r3, [r7, #4]
100029a0:	681b      	ldr	r3, [r3, #0]
100029a2:	68db      	ldr	r3, [r3, #12]
100029a4:	f003 0320 	and.w	r3, r3, #32
100029a8:	2b20      	cmp	r3, #32
100029aa:	d107      	bne.n	100029bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
100029ac:	687b      	ldr	r3, [r7, #4]
100029ae:	681b      	ldr	r3, [r3, #0]
100029b0:	f06f 0220 	mvn.w	r2, #32
100029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
100029b6:	6878      	ldr	r0, [r7, #4]
100029b8:	f000 fa80 	bl	10002ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
100029bc:	bf00      	nop
100029be:	3708      	adds	r7, #8
100029c0:	46bd      	mov	sp, r7
100029c2:	bd80      	pop	{r7, pc}

100029c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
100029c4:	b580      	push	{r7, lr}
100029c6:	b084      	sub	sp, #16
100029c8:	af00      	add	r7, sp, #0
100029ca:	6078      	str	r0, [r7, #4]
100029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
100029ce:	687b      	ldr	r3, [r7, #4]
100029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
100029d4:	2b01      	cmp	r3, #1
100029d6:	d101      	bne.n	100029dc <HAL_TIM_ConfigClockSource+0x18>
100029d8:	2302      	movs	r3, #2
100029da:	e0b5      	b.n	10002b48 <HAL_TIM_ConfigClockSource+0x184>
100029dc:	687b      	ldr	r3, [r7, #4]
100029de:	2201      	movs	r2, #1
100029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
100029e4:	687b      	ldr	r3, [r7, #4]
100029e6:	2202      	movs	r2, #2
100029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
100029ec:	687b      	ldr	r3, [r7, #4]
100029ee:	681b      	ldr	r3, [r3, #0]
100029f0:	689b      	ldr	r3, [r3, #8]
100029f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
100029f4:	68fb      	ldr	r3, [r7, #12]
100029f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
100029fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
100029fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
10002a00:	68fb      	ldr	r3, [r7, #12]
10002a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002a06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	681b      	ldr	r3, [r3, #0]
10002a0c:	68fa      	ldr	r2, [r7, #12]
10002a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
10002a10:	683b      	ldr	r3, [r7, #0]
10002a12:	681b      	ldr	r3, [r3, #0]
10002a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
10002a18:	d03e      	beq.n	10002a98 <HAL_TIM_ConfigClockSource+0xd4>
10002a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
10002a1e:	f200 8087 	bhi.w	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10002a26:	f000 8085 	beq.w	10002b34 <HAL_TIM_ConfigClockSource+0x170>
10002a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10002a2e:	d87f      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a30:	2b70      	cmp	r3, #112	; 0x70
10002a32:	d01a      	beq.n	10002a6a <HAL_TIM_ConfigClockSource+0xa6>
10002a34:	2b70      	cmp	r3, #112	; 0x70
10002a36:	d87b      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a38:	2b60      	cmp	r3, #96	; 0x60
10002a3a:	d050      	beq.n	10002ade <HAL_TIM_ConfigClockSource+0x11a>
10002a3c:	2b60      	cmp	r3, #96	; 0x60
10002a3e:	d877      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a40:	2b50      	cmp	r3, #80	; 0x50
10002a42:	d03c      	beq.n	10002abe <HAL_TIM_ConfigClockSource+0xfa>
10002a44:	2b50      	cmp	r3, #80	; 0x50
10002a46:	d873      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a48:	2b40      	cmp	r3, #64	; 0x40
10002a4a:	d058      	beq.n	10002afe <HAL_TIM_ConfigClockSource+0x13a>
10002a4c:	2b40      	cmp	r3, #64	; 0x40
10002a4e:	d86f      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a50:	2b30      	cmp	r3, #48	; 0x30
10002a52:	d064      	beq.n	10002b1e <HAL_TIM_ConfigClockSource+0x15a>
10002a54:	2b30      	cmp	r3, #48	; 0x30
10002a56:	d86b      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a58:	2b20      	cmp	r3, #32
10002a5a:	d060      	beq.n	10002b1e <HAL_TIM_ConfigClockSource+0x15a>
10002a5c:	2b20      	cmp	r3, #32
10002a5e:	d867      	bhi.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
10002a60:	2b00      	cmp	r3, #0
10002a62:	d05c      	beq.n	10002b1e <HAL_TIM_ConfigClockSource+0x15a>
10002a64:	2b10      	cmp	r3, #16
10002a66:	d05a      	beq.n	10002b1e <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
10002a68:	e062      	b.n	10002b30 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
10002a6a:	687b      	ldr	r3, [r7, #4]
10002a6c:	6818      	ldr	r0, [r3, #0]
10002a6e:	683b      	ldr	r3, [r7, #0]
10002a70:	6899      	ldr	r1, [r3, #8]
10002a72:	683b      	ldr	r3, [r7, #0]
10002a74:	685a      	ldr	r2, [r3, #4]
10002a76:	683b      	ldr	r3, [r7, #0]
10002a78:	68db      	ldr	r3, [r3, #12]
10002a7a:	f000 f9a5 	bl	10002dc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
10002a7e:	687b      	ldr	r3, [r7, #4]
10002a80:	681b      	ldr	r3, [r3, #0]
10002a82:	689b      	ldr	r3, [r3, #8]
10002a84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
10002a86:	68fb      	ldr	r3, [r7, #12]
10002a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
10002a8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
10002a8e:	687b      	ldr	r3, [r7, #4]
10002a90:	681b      	ldr	r3, [r3, #0]
10002a92:	68fa      	ldr	r2, [r7, #12]
10002a94:	609a      	str	r2, [r3, #8]
      break;
10002a96:	e04e      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
10002a98:	687b      	ldr	r3, [r7, #4]
10002a9a:	6818      	ldr	r0, [r3, #0]
10002a9c:	683b      	ldr	r3, [r7, #0]
10002a9e:	6899      	ldr	r1, [r3, #8]
10002aa0:	683b      	ldr	r3, [r7, #0]
10002aa2:	685a      	ldr	r2, [r3, #4]
10002aa4:	683b      	ldr	r3, [r7, #0]
10002aa6:	68db      	ldr	r3, [r3, #12]
10002aa8:	f000 f98e 	bl	10002dc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
10002aac:	687b      	ldr	r3, [r7, #4]
10002aae:	681b      	ldr	r3, [r3, #0]
10002ab0:	689a      	ldr	r2, [r3, #8]
10002ab2:	687b      	ldr	r3, [r7, #4]
10002ab4:	681b      	ldr	r3, [r3, #0]
10002ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
10002aba:	609a      	str	r2, [r3, #8]
      break;
10002abc:	e03b      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
10002abe:	687b      	ldr	r3, [r7, #4]
10002ac0:	6818      	ldr	r0, [r3, #0]
10002ac2:	683b      	ldr	r3, [r7, #0]
10002ac4:	6859      	ldr	r1, [r3, #4]
10002ac6:	683b      	ldr	r3, [r7, #0]
10002ac8:	68db      	ldr	r3, [r3, #12]
10002aca:	461a      	mov	r2, r3
10002acc:	f000 f900 	bl	10002cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
10002ad0:	687b      	ldr	r3, [r7, #4]
10002ad2:	681b      	ldr	r3, [r3, #0]
10002ad4:	2150      	movs	r1, #80	; 0x50
10002ad6:	4618      	mov	r0, r3
10002ad8:	f000 f959 	bl	10002d8e <TIM_ITRx_SetConfig>
      break;
10002adc:	e02b      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
10002ade:	687b      	ldr	r3, [r7, #4]
10002ae0:	6818      	ldr	r0, [r3, #0]
10002ae2:	683b      	ldr	r3, [r7, #0]
10002ae4:	6859      	ldr	r1, [r3, #4]
10002ae6:	683b      	ldr	r3, [r7, #0]
10002ae8:	68db      	ldr	r3, [r3, #12]
10002aea:	461a      	mov	r2, r3
10002aec:	f000 f91f 	bl	10002d2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
10002af0:	687b      	ldr	r3, [r7, #4]
10002af2:	681b      	ldr	r3, [r3, #0]
10002af4:	2160      	movs	r1, #96	; 0x60
10002af6:	4618      	mov	r0, r3
10002af8:	f000 f949 	bl	10002d8e <TIM_ITRx_SetConfig>
      break;
10002afc:	e01b      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
10002afe:	687b      	ldr	r3, [r7, #4]
10002b00:	6818      	ldr	r0, [r3, #0]
10002b02:	683b      	ldr	r3, [r7, #0]
10002b04:	6859      	ldr	r1, [r3, #4]
10002b06:	683b      	ldr	r3, [r7, #0]
10002b08:	68db      	ldr	r3, [r3, #12]
10002b0a:	461a      	mov	r2, r3
10002b0c:	f000 f8e0 	bl	10002cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
10002b10:	687b      	ldr	r3, [r7, #4]
10002b12:	681b      	ldr	r3, [r3, #0]
10002b14:	2140      	movs	r1, #64	; 0x40
10002b16:	4618      	mov	r0, r3
10002b18:	f000 f939 	bl	10002d8e <TIM_ITRx_SetConfig>
      break;
10002b1c:	e00b      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
10002b1e:	687b      	ldr	r3, [r7, #4]
10002b20:	681a      	ldr	r2, [r3, #0]
10002b22:	683b      	ldr	r3, [r7, #0]
10002b24:	681b      	ldr	r3, [r3, #0]
10002b26:	4619      	mov	r1, r3
10002b28:	4610      	mov	r0, r2
10002b2a:	f000 f930 	bl	10002d8e <TIM_ITRx_SetConfig>
      break;
10002b2e:	e002      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      break;
10002b30:	bf00      	nop
10002b32:	e000      	b.n	10002b36 <HAL_TIM_ConfigClockSource+0x172>
      break;
10002b34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
10002b36:	687b      	ldr	r3, [r7, #4]
10002b38:	2201      	movs	r2, #1
10002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
10002b3e:	687b      	ldr	r3, [r7, #4]
10002b40:	2200      	movs	r2, #0
10002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
10002b46:	2300      	movs	r3, #0
}
10002b48:	4618      	mov	r0, r3
10002b4a:	3710      	adds	r7, #16
10002b4c:	46bd      	mov	sp, r7
10002b4e:	bd80      	pop	{r7, pc}

10002b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
10002b50:	b480      	push	{r7}
10002b52:	b083      	sub	sp, #12
10002b54:	af00      	add	r7, sp, #0
10002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
10002b58:	bf00      	nop
10002b5a:	370c      	adds	r7, #12
10002b5c:	46bd      	mov	sp, r7
10002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b62:	4770      	bx	lr

10002b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
10002b64:	b480      	push	{r7}
10002b66:	b083      	sub	sp, #12
10002b68:	af00      	add	r7, sp, #0
10002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
10002b6c:	bf00      	nop
10002b6e:	370c      	adds	r7, #12
10002b70:	46bd      	mov	sp, r7
10002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b76:	4770      	bx	lr

10002b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
10002b78:	b480      	push	{r7}
10002b7a:	b083      	sub	sp, #12
10002b7c:	af00      	add	r7, sp, #0
10002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
10002b80:	bf00      	nop
10002b82:	370c      	adds	r7, #12
10002b84:	46bd      	mov	sp, r7
10002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b8a:	4770      	bx	lr

10002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
10002b8c:	b480      	push	{r7}
10002b8e:	b083      	sub	sp, #12
10002b90:	af00      	add	r7, sp, #0
10002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
10002b94:	bf00      	nop
10002b96:	370c      	adds	r7, #12
10002b98:	46bd      	mov	sp, r7
10002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b9e:	4770      	bx	lr

10002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
10002ba0:	b480      	push	{r7}
10002ba2:	b085      	sub	sp, #20
10002ba4:	af00      	add	r7, sp, #0
10002ba6:	6078      	str	r0, [r7, #4]
10002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
10002baa:	687b      	ldr	r3, [r7, #4]
10002bac:	681b      	ldr	r3, [r3, #0]
10002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
10002bb0:	687b      	ldr	r3, [r7, #4]
10002bb2:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10002bb6:	d013      	beq.n	10002be0 <TIM_Base_SetConfig+0x40>
10002bb8:	687b      	ldr	r3, [r7, #4]
10002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10002bbe:	d00f      	beq.n	10002be0 <TIM_Base_SetConfig+0x40>
10002bc0:	687b      	ldr	r3, [r7, #4]
10002bc2:	4a3c      	ldr	r2, [pc, #240]	; (10002cb4 <TIM_Base_SetConfig+0x114>)
10002bc4:	4293      	cmp	r3, r2
10002bc6:	d00b      	beq.n	10002be0 <TIM_Base_SetConfig+0x40>
10002bc8:	687b      	ldr	r3, [r7, #4]
10002bca:	4a3b      	ldr	r2, [pc, #236]	; (10002cb8 <TIM_Base_SetConfig+0x118>)
10002bcc:	4293      	cmp	r3, r2
10002bce:	d007      	beq.n	10002be0 <TIM_Base_SetConfig+0x40>
10002bd0:	687b      	ldr	r3, [r7, #4]
10002bd2:	4a3a      	ldr	r2, [pc, #232]	; (10002cbc <TIM_Base_SetConfig+0x11c>)
10002bd4:	4293      	cmp	r3, r2
10002bd6:	d003      	beq.n	10002be0 <TIM_Base_SetConfig+0x40>
10002bd8:	687b      	ldr	r3, [r7, #4]
10002bda:	4a39      	ldr	r2, [pc, #228]	; (10002cc0 <TIM_Base_SetConfig+0x120>)
10002bdc:	4293      	cmp	r3, r2
10002bde:	d108      	bne.n	10002bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
10002be0:	68fb      	ldr	r3, [r7, #12]
10002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
10002be8:	683b      	ldr	r3, [r7, #0]
10002bea:	685b      	ldr	r3, [r3, #4]
10002bec:	68fa      	ldr	r2, [r7, #12]
10002bee:	4313      	orrs	r3, r2
10002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
10002bf2:	687b      	ldr	r3, [r7, #4]
10002bf4:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10002bf8:	d01f      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002bfa:	687b      	ldr	r3, [r7, #4]
10002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
10002c00:	d01b      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c02:	687b      	ldr	r3, [r7, #4]
10002c04:	4a2b      	ldr	r2, [pc, #172]	; (10002cb4 <TIM_Base_SetConfig+0x114>)
10002c06:	4293      	cmp	r3, r2
10002c08:	d017      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c0a:	687b      	ldr	r3, [r7, #4]
10002c0c:	4a2a      	ldr	r2, [pc, #168]	; (10002cb8 <TIM_Base_SetConfig+0x118>)
10002c0e:	4293      	cmp	r3, r2
10002c10:	d013      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c12:	687b      	ldr	r3, [r7, #4]
10002c14:	4a29      	ldr	r2, [pc, #164]	; (10002cbc <TIM_Base_SetConfig+0x11c>)
10002c16:	4293      	cmp	r3, r2
10002c18:	d00f      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c1a:	687b      	ldr	r3, [r7, #4]
10002c1c:	4a28      	ldr	r2, [pc, #160]	; (10002cc0 <TIM_Base_SetConfig+0x120>)
10002c1e:	4293      	cmp	r3, r2
10002c20:	d00b      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	4a27      	ldr	r2, [pc, #156]	; (10002cc4 <TIM_Base_SetConfig+0x124>)
10002c26:	4293      	cmp	r3, r2
10002c28:	d007      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c2a:	687b      	ldr	r3, [r7, #4]
10002c2c:	4a26      	ldr	r2, [pc, #152]	; (10002cc8 <TIM_Base_SetConfig+0x128>)
10002c2e:	4293      	cmp	r3, r2
10002c30:	d003      	beq.n	10002c3a <TIM_Base_SetConfig+0x9a>
10002c32:	687b      	ldr	r3, [r7, #4]
10002c34:	4a25      	ldr	r2, [pc, #148]	; (10002ccc <TIM_Base_SetConfig+0x12c>)
10002c36:	4293      	cmp	r3, r2
10002c38:	d108      	bne.n	10002c4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
10002c3a:	68fb      	ldr	r3, [r7, #12]
10002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
10002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
10002c42:	683b      	ldr	r3, [r7, #0]
10002c44:	68db      	ldr	r3, [r3, #12]
10002c46:	68fa      	ldr	r2, [r7, #12]
10002c48:	4313      	orrs	r3, r2
10002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
10002c4c:	68fb      	ldr	r3, [r7, #12]
10002c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
10002c52:	683b      	ldr	r3, [r7, #0]
10002c54:	695b      	ldr	r3, [r3, #20]
10002c56:	4313      	orrs	r3, r2
10002c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
10002c5a:	687b      	ldr	r3, [r7, #4]
10002c5c:	68fa      	ldr	r2, [r7, #12]
10002c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
10002c60:	683b      	ldr	r3, [r7, #0]
10002c62:	689a      	ldr	r2, [r3, #8]
10002c64:	687b      	ldr	r3, [r7, #4]
10002c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
10002c68:	683b      	ldr	r3, [r7, #0]
10002c6a:	681a      	ldr	r2, [r3, #0]
10002c6c:	687b      	ldr	r3, [r7, #4]
10002c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10002c76:	d00f      	beq.n	10002c98 <TIM_Base_SetConfig+0xf8>
10002c78:	687b      	ldr	r3, [r7, #4]
10002c7a:	4a11      	ldr	r2, [pc, #68]	; (10002cc0 <TIM_Base_SetConfig+0x120>)
10002c7c:	4293      	cmp	r3, r2
10002c7e:	d00b      	beq.n	10002c98 <TIM_Base_SetConfig+0xf8>
10002c80:	687b      	ldr	r3, [r7, #4]
10002c82:	4a10      	ldr	r2, [pc, #64]	; (10002cc4 <TIM_Base_SetConfig+0x124>)
10002c84:	4293      	cmp	r3, r2
10002c86:	d007      	beq.n	10002c98 <TIM_Base_SetConfig+0xf8>
10002c88:	687b      	ldr	r3, [r7, #4]
10002c8a:	4a0f      	ldr	r2, [pc, #60]	; (10002cc8 <TIM_Base_SetConfig+0x128>)
10002c8c:	4293      	cmp	r3, r2
10002c8e:	d003      	beq.n	10002c98 <TIM_Base_SetConfig+0xf8>
10002c90:	687b      	ldr	r3, [r7, #4]
10002c92:	4a0e      	ldr	r2, [pc, #56]	; (10002ccc <TIM_Base_SetConfig+0x12c>)
10002c94:	4293      	cmp	r3, r2
10002c96:	d103      	bne.n	10002ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
10002c98:	683b      	ldr	r3, [r7, #0]
10002c9a:	691a      	ldr	r2, [r3, #16]
10002c9c:	687b      	ldr	r3, [r7, #4]
10002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
10002ca0:	687b      	ldr	r3, [r7, #4]
10002ca2:	2201      	movs	r2, #1
10002ca4:	615a      	str	r2, [r3, #20]
}
10002ca6:	bf00      	nop
10002ca8:	3714      	adds	r7, #20
10002caa:	46bd      	mov	sp, r7
10002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cb0:	4770      	bx	lr
10002cb2:	bf00      	nop
10002cb4:	40001000 	.word	0x40001000
10002cb8:	40002000 	.word	0x40002000
10002cbc:	40003000 	.word	0x40003000
10002cc0:	44001000 	.word	0x44001000
10002cc4:	44006000 	.word	0x44006000
10002cc8:	44007000 	.word	0x44007000
10002ccc:	44008000 	.word	0x44008000

10002cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
10002cd0:	b480      	push	{r7}
10002cd2:	b087      	sub	sp, #28
10002cd4:	af00      	add	r7, sp, #0
10002cd6:	60f8      	str	r0, [r7, #12]
10002cd8:	60b9      	str	r1, [r7, #8]
10002cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
10002cdc:	68fb      	ldr	r3, [r7, #12]
10002cde:	6a1b      	ldr	r3, [r3, #32]
10002ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
10002ce2:	68fb      	ldr	r3, [r7, #12]
10002ce4:	6a1b      	ldr	r3, [r3, #32]
10002ce6:	f023 0201 	bic.w	r2, r3, #1
10002cea:	68fb      	ldr	r3, [r7, #12]
10002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
10002cee:	68fb      	ldr	r3, [r7, #12]
10002cf0:	699b      	ldr	r3, [r3, #24]
10002cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
10002cf4:	693b      	ldr	r3, [r7, #16]
10002cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
10002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
10002cfc:	687b      	ldr	r3, [r7, #4]
10002cfe:	011b      	lsls	r3, r3, #4
10002d00:	693a      	ldr	r2, [r7, #16]
10002d02:	4313      	orrs	r3, r2
10002d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
10002d06:	697b      	ldr	r3, [r7, #20]
10002d08:	f023 030a 	bic.w	r3, r3, #10
10002d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
10002d0e:	697a      	ldr	r2, [r7, #20]
10002d10:	68bb      	ldr	r3, [r7, #8]
10002d12:	4313      	orrs	r3, r2
10002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
10002d16:	68fb      	ldr	r3, [r7, #12]
10002d18:	693a      	ldr	r2, [r7, #16]
10002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
10002d1c:	68fb      	ldr	r3, [r7, #12]
10002d1e:	697a      	ldr	r2, [r7, #20]
10002d20:	621a      	str	r2, [r3, #32]
}
10002d22:	bf00      	nop
10002d24:	371c      	adds	r7, #28
10002d26:	46bd      	mov	sp, r7
10002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d2c:	4770      	bx	lr

10002d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
10002d2e:	b480      	push	{r7}
10002d30:	b087      	sub	sp, #28
10002d32:	af00      	add	r7, sp, #0
10002d34:	60f8      	str	r0, [r7, #12]
10002d36:	60b9      	str	r1, [r7, #8]
10002d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
10002d3a:	68fb      	ldr	r3, [r7, #12]
10002d3c:	6a1b      	ldr	r3, [r3, #32]
10002d3e:	f023 0210 	bic.w	r2, r3, #16
10002d42:	68fb      	ldr	r3, [r7, #12]
10002d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
10002d46:	68fb      	ldr	r3, [r7, #12]
10002d48:	699b      	ldr	r3, [r3, #24]
10002d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
10002d4c:	68fb      	ldr	r3, [r7, #12]
10002d4e:	6a1b      	ldr	r3, [r3, #32]
10002d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
10002d52:	697b      	ldr	r3, [r7, #20]
10002d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
10002d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
10002d5a:	687b      	ldr	r3, [r7, #4]
10002d5c:	031b      	lsls	r3, r3, #12
10002d5e:	697a      	ldr	r2, [r7, #20]
10002d60:	4313      	orrs	r3, r2
10002d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
10002d64:	693b      	ldr	r3, [r7, #16]
10002d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
10002d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
10002d6c:	68bb      	ldr	r3, [r7, #8]
10002d6e:	011b      	lsls	r3, r3, #4
10002d70:	693a      	ldr	r2, [r7, #16]
10002d72:	4313      	orrs	r3, r2
10002d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
10002d76:	68fb      	ldr	r3, [r7, #12]
10002d78:	697a      	ldr	r2, [r7, #20]
10002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
10002d7c:	68fb      	ldr	r3, [r7, #12]
10002d7e:	693a      	ldr	r2, [r7, #16]
10002d80:	621a      	str	r2, [r3, #32]
}
10002d82:	bf00      	nop
10002d84:	371c      	adds	r7, #28
10002d86:	46bd      	mov	sp, r7
10002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d8c:	4770      	bx	lr

10002d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
10002d8e:	b480      	push	{r7}
10002d90:	b085      	sub	sp, #20
10002d92:	af00      	add	r7, sp, #0
10002d94:	6078      	str	r0, [r7, #4]
10002d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
10002d98:	687b      	ldr	r3, [r7, #4]
10002d9a:	689b      	ldr	r3, [r3, #8]
10002d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
10002d9e:	68fb      	ldr	r3, [r7, #12]
10002da0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
10002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
10002daa:	683a      	ldr	r2, [r7, #0]
10002dac:	68fb      	ldr	r3, [r7, #12]
10002dae:	4313      	orrs	r3, r2
10002db0:	f043 0307 	orr.w	r3, r3, #7
10002db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
10002db6:	687b      	ldr	r3, [r7, #4]
10002db8:	68fa      	ldr	r2, [r7, #12]
10002dba:	609a      	str	r2, [r3, #8]
}
10002dbc:	bf00      	nop
10002dbe:	3714      	adds	r7, #20
10002dc0:	46bd      	mov	sp, r7
10002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10002dc6:	4770      	bx	lr

10002dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
10002dc8:	b480      	push	{r7}
10002dca:	b087      	sub	sp, #28
10002dcc:	af00      	add	r7, sp, #0
10002dce:	60f8      	str	r0, [r7, #12]
10002dd0:	60b9      	str	r1, [r7, #8]
10002dd2:	607a      	str	r2, [r7, #4]
10002dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
10002dd6:	68fb      	ldr	r3, [r7, #12]
10002dd8:	689b      	ldr	r3, [r3, #8]
10002dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
10002ddc:	697b      	ldr	r3, [r7, #20]
10002dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
10002de4:	683b      	ldr	r3, [r7, #0]
10002de6:	021a      	lsls	r2, r3, #8
10002de8:	687b      	ldr	r3, [r7, #4]
10002dea:	431a      	orrs	r2, r3
10002dec:	68bb      	ldr	r3, [r7, #8]
10002dee:	4313      	orrs	r3, r2
10002df0:	697a      	ldr	r2, [r7, #20]
10002df2:	4313      	orrs	r3, r2
10002df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
10002df6:	68fb      	ldr	r3, [r7, #12]
10002df8:	697a      	ldr	r2, [r7, #20]
10002dfa:	609a      	str	r2, [r3, #8]
}
10002dfc:	bf00      	nop
10002dfe:	371c      	adds	r7, #28
10002e00:	46bd      	mov	sp, r7
10002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e06:	4770      	bx	lr

10002e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
10002e08:	b480      	push	{r7}
10002e0a:	b085      	sub	sp, #20
10002e0c:	af00      	add	r7, sp, #0
10002e0e:	6078      	str	r0, [r7, #4]
10002e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
10002e12:	687b      	ldr	r3, [r7, #4]
10002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
10002e18:	2b01      	cmp	r3, #1
10002e1a:	d101      	bne.n	10002e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
10002e1c:	2302      	movs	r3, #2
10002e1e:	e045      	b.n	10002eac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
10002e20:	687b      	ldr	r3, [r7, #4]
10002e22:	2201      	movs	r2, #1
10002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
10002e28:	687b      	ldr	r3, [r7, #4]
10002e2a:	2202      	movs	r2, #2
10002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
10002e30:	687b      	ldr	r3, [r7, #4]
10002e32:	681b      	ldr	r3, [r3, #0]
10002e34:	685b      	ldr	r3, [r3, #4]
10002e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
10002e38:	687b      	ldr	r3, [r7, #4]
10002e3a:	681b      	ldr	r3, [r3, #0]
10002e3c:	689b      	ldr	r3, [r3, #8]
10002e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
10002e40:	687b      	ldr	r3, [r7, #4]
10002e42:	681b      	ldr	r3, [r3, #0]
10002e44:	f1b3 4f88 	cmp.w	r3, #1140850688	; 0x44000000
10002e48:	d004      	beq.n	10002e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
10002e4a:	687b      	ldr	r3, [r7, #4]
10002e4c:	681b      	ldr	r3, [r3, #0]
10002e4e:	4a1a      	ldr	r2, [pc, #104]	; (10002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
10002e50:	4293      	cmp	r3, r2
10002e52:	d108      	bne.n	10002e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
10002e54:	68fb      	ldr	r3, [r7, #12]
10002e56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
10002e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
10002e5c:	683b      	ldr	r3, [r7, #0]
10002e5e:	685b      	ldr	r3, [r3, #4]
10002e60:	68fa      	ldr	r2, [r7, #12]
10002e62:	4313      	orrs	r3, r2
10002e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
10002e66:	68fb      	ldr	r3, [r7, #12]
10002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
10002e6e:	683b      	ldr	r3, [r7, #0]
10002e70:	681b      	ldr	r3, [r3, #0]
10002e72:	68fa      	ldr	r2, [r7, #12]
10002e74:	4313      	orrs	r3, r2
10002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
10002e78:	68bb      	ldr	r3, [r7, #8]
10002e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
10002e7e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
10002e80:	683b      	ldr	r3, [r7, #0]
10002e82:	689b      	ldr	r3, [r3, #8]
10002e84:	68ba      	ldr	r2, [r7, #8]
10002e86:	4313      	orrs	r3, r2
10002e88:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
10002e8a:	687b      	ldr	r3, [r7, #4]
10002e8c:	681b      	ldr	r3, [r3, #0]
10002e8e:	68fa      	ldr	r2, [r7, #12]
10002e90:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
10002e92:	687b      	ldr	r3, [r7, #4]
10002e94:	681b      	ldr	r3, [r3, #0]
10002e96:	68ba      	ldr	r2, [r7, #8]
10002e98:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
10002e9a:	687b      	ldr	r3, [r7, #4]
10002e9c:	2201      	movs	r2, #1
10002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
10002ea2:	687b      	ldr	r3, [r7, #4]
10002ea4:	2200      	movs	r2, #0
10002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
10002eaa:	2300      	movs	r3, #0
}
10002eac:	4618      	mov	r0, r3
10002eae:	3714      	adds	r7, #20
10002eb0:	46bd      	mov	sp, r7
10002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
10002eb6:	4770      	bx	lr
10002eb8:	44001000 	.word	0x44001000

10002ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
10002ebc:	b480      	push	{r7}
10002ebe:	b083      	sub	sp, #12
10002ec0:	af00      	add	r7, sp, #0
10002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
10002ec4:	bf00      	nop
10002ec6:	370c      	adds	r7, #12
10002ec8:	46bd      	mov	sp, r7
10002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ece:	4770      	bx	lr

10002ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
10002ed0:	b480      	push	{r7}
10002ed2:	b083      	sub	sp, #12
10002ed4:	af00      	add	r7, sp, #0
10002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
10002ed8:	bf00      	nop
10002eda:	370c      	adds	r7, #12
10002edc:	46bd      	mov	sp, r7
10002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ee2:	4770      	bx	lr

10002ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
10002ee4:	b480      	push	{r7}
10002ee6:	b083      	sub	sp, #12
10002ee8:	af00      	add	r7, sp, #0
10002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
10002eec:	bf00      	nop
10002eee:	370c      	adds	r7, #12
10002ef0:	46bd      	mov	sp, r7
10002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ef6:	4770      	bx	lr

10002ef8 <memset>:
10002ef8:	4402      	add	r2, r0
10002efa:	4603      	mov	r3, r0
10002efc:	4293      	cmp	r3, r2
10002efe:	d100      	bne.n	10002f02 <memset+0xa>
10002f00:	4770      	bx	lr
10002f02:	f803 1b01 	strb.w	r1, [r3], #1
10002f06:	e7f9      	b.n	10002efc <memset+0x4>

10002f08 <__libc_init_array>:
10002f08:	b570      	push	{r4, r5, r6, lr}
10002f0a:	4d0d      	ldr	r5, [pc, #52]	; (10002f40 <__libc_init_array+0x38>)
10002f0c:	4c0d      	ldr	r4, [pc, #52]	; (10002f44 <__libc_init_array+0x3c>)
10002f0e:	1b64      	subs	r4, r4, r5
10002f10:	10a4      	asrs	r4, r4, #2
10002f12:	2600      	movs	r6, #0
10002f14:	42a6      	cmp	r6, r4
10002f16:	d109      	bne.n	10002f2c <__libc_init_array+0x24>
10002f18:	4d0b      	ldr	r5, [pc, #44]	; (10002f48 <__libc_init_array+0x40>)
10002f1a:	4c0c      	ldr	r4, [pc, #48]	; (10002f4c <__libc_init_array+0x44>)
10002f1c:	f000 f818 	bl	10002f50 <_init>
10002f20:	1b64      	subs	r4, r4, r5
10002f22:	10a4      	asrs	r4, r4, #2
10002f24:	2600      	movs	r6, #0
10002f26:	42a6      	cmp	r6, r4
10002f28:	d105      	bne.n	10002f36 <__libc_init_array+0x2e>
10002f2a:	bd70      	pop	{r4, r5, r6, pc}
10002f2c:	f855 3b04 	ldr.w	r3, [r5], #4
10002f30:	4798      	blx	r3
10002f32:	3601      	adds	r6, #1
10002f34:	e7ee      	b.n	10002f14 <__libc_init_array+0xc>
10002f36:	f855 3b04 	ldr.w	r3, [r5], #4
10002f3a:	4798      	blx	r3
10002f3c:	3601      	adds	r6, #1
10002f3e:	e7f2      	b.n	10002f26 <__libc_init_array+0x1e>
10002f40:	10002fb8 	.word	0x10002fb8
10002f44:	10002fb8 	.word	0x10002fb8
10002f48:	10002fb8 	.word	0x10002fb8
10002f4c:	10002fbc 	.word	0x10002fbc

10002f50 <_init>:
10002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002f52:	bf00      	nop
10002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002f56:	bc08      	pop	{r3}
10002f58:	469e      	mov	lr, r3
10002f5a:	4770      	bx	lr

10002f5c <_fini>:
10002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002f5e:	bf00      	nop
10002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002f62:	bc08      	pop	{r3}
10002f64:	469e      	mov	lr, r3
10002f66:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10002f68 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10002f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 10002fa0 <LoopForever+0x2>
  movs  r1, #0
10002f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10002f6e:	e003      	b.n	10002f78 <LoopCopyDataInit>

10002f70 <CopyDataInit>:
  ldr  r3, =_sidata
10002f70:	4b0c      	ldr	r3, [pc, #48]	; (10002fa4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10002f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10002f76:	3104      	adds	r1, #4

10002f78 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10002f78:	480b      	ldr	r0, [pc, #44]	; (10002fa8 <LoopForever+0xa>)
  ldr  r3, =_edata
10002f7a:	4b0c      	ldr	r3, [pc, #48]	; (10002fac <LoopForever+0xe>)
  adds  r2, r0, r1
10002f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10002f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10002f80:	d3f6      	bcc.n	10002f70 <CopyDataInit>
  ldr  r2, =_sbss
10002f82:	4a0b      	ldr	r2, [pc, #44]	; (10002fb0 <LoopForever+0x12>)
  b  LoopFillZerobss
10002f84:	e002      	b.n	10002f8c <LoopFillZerobss>

10002f86 <FillZerobss>:
  movs  r3, #0
10002f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002f88:	f842 3b04 	str.w	r3, [r2], #4

10002f8c <LoopFillZerobss>:
  ldr  r3, = _ebss
10002f8c:	4b09      	ldr	r3, [pc, #36]	; (10002fb4 <LoopForever+0x16>)
  cmp  r2, r3
10002f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10002f90:	d3f9      	bcc.n	10002f86 <FillZerobss>
  bl  SystemInit
10002f92:	f7fd f855 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002f96:	f7ff ffb7 	bl	10002f08 <__libc_init_array>
  bl main
10002f9a:	f7fd f8b5 	bl	10000108 <main>

10002f9e <LoopForever>:
    b LoopForever
10002f9e:	e7fe      	b.n	10002f9e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10002fa0:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002fa4:	10002fc0 	.word	0x10002fc0
  ldr  r0, =_sdata
10002fa8:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002fac:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10002fb0:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10002fb4:	1002006c 	.word	0x1002006c
