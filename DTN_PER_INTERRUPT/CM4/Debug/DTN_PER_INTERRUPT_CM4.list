
DTN_PER_INTERRUPT_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000265c  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000265c  1000265c  0002265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  100026ac  100026ac  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  100026ac  100026ac  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  100026ac  100026ac  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  100026ac  100026ac  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100026ac  100026ac  000226ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  100026b0  100026b0  000226b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  100026b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000020  1002000c  100026c0  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002002c  100026e0  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   000084d1  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001295  00000000  00000000  00038550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000005c0  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000435  00000000  00000000  00039da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00043f10  00000000  00000000  0003a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000985a  00000000  00000000  0007e0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bf414  00000000  00000000  00087947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001534  00000000  00000000  00246d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00248290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	10002644 	.word	0x10002644

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	10002644 	.word	0x10002644

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	b086      	sub	sp, #24
10000090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000092:	1d3b      	adds	r3, r7, #4
10000094:	2200      	movs	r2, #0
10000096:	601a      	str	r2, [r3, #0]
10000098:	605a      	str	r2, [r3, #4]
1000009a:	609a      	str	r2, [r3, #8]
1000009c:	60da      	str	r2, [r3, #12]
1000009e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOZ_CLK_ENABLE();
100000a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000a4:	2201      	movs	r2, #1
100000a6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  __HAL_RCC_GPIOA_CLK_ENABLE();
100000aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000ae:	2201      	movs	r2, #1
100000b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOZ, GPIO_PIN_5, GPIO_PIN_RESET);
100000b4:	2200      	movs	r2, #0
100000b6:	2120      	movs	r1, #32
100000b8:	480f      	ldr	r0, [pc, #60]	; (100000f8 <MX_GPIO_Init+0x6c>)
100000ba:	f000 fc61 	bl	10000980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PZ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
100000be:	2320      	movs	r3, #32
100000c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
100000c2:	2301      	movs	r3, #1
100000c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
100000c6:	2300      	movs	r3, #0
100000c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100000ca:	2300      	movs	r3, #0
100000cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOZ, &GPIO_InitStruct);
100000ce:	1d3b      	adds	r3, r7, #4
100000d0:	4619      	mov	r1, r3
100000d2:	4809      	ldr	r0, [pc, #36]	; (100000f8 <MX_GPIO_Init+0x6c>)
100000d4:	f000 faaa 	bl	1000062c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
100000d8:	2301      	movs	r3, #1
100000da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
100000dc:	4b07      	ldr	r3, [pc, #28]	; (100000fc <MX_GPIO_Init+0x70>)
100000de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
100000e0:	2300      	movs	r3, #0
100000e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100000e4:	1d3b      	adds	r3, r7, #4
100000e6:	4619      	mov	r1, r3
100000e8:	4805      	ldr	r0, [pc, #20]	; (10000100 <MX_GPIO_Init+0x74>)
100000ea:	f000 fa9f 	bl	1000062c <HAL_GPIO_Init>

}
100000ee:	bf00      	nop
100000f0:	3718      	adds	r7, #24
100000f2:	46bd      	mov	sp, r7
100000f4:	bd80      	pop	{r7, pc}
100000f6:	bf00      	nop
100000f8:	54004000 	.word	0x54004000
100000fc:	10110000 	.word	0x10110000
10000100:	50002000 	.word	0x50002000

10000104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000104:	b580      	push	{r7, lr}
10000106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000108:	f000 f90e 	bl	10000328 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
1000010c:	4b06      	ldr	r3, [pc, #24]	; (10000128 <main+0x24>)
1000010e:	681b      	ldr	r3, [r3, #0]
10000110:	f003 0307 	and.w	r3, r3, #7
10000114:	2b04      	cmp	r3, #4
10000116:	d101      	bne.n	1000011c <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000118:	f000 f808 	bl	1000012c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
1000011c:	f7ff ffb6 	bl	1000008c <MX_GPIO_Init>
10000120:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
10000122:	4618      	mov	r0, r3
10000124:	bd80      	pop	{r7, pc}
10000126:	bf00      	nop
10000128:	50020000 	.word	0x50020000

1000012c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
1000012c:	b580      	push	{r7, lr}
1000012e:	b0d2      	sub	sp, #328	; 0x148
10000130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000132:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000136:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000013a:	4618      	mov	r0, r3
1000013c:	f44f 738a 	mov.w	r3, #276	; 0x114
10000140:	461a      	mov	r2, r3
10000142:	2100      	movs	r1, #0
10000144:	f002 fa52 	bl	100025ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000148:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000014c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000150:	4618      	mov	r0, r3
10000152:	2330      	movs	r3, #48	; 0x30
10000154:	461a      	mov	r2, r3
10000156:	2100      	movs	r1, #0
10000158:	f002 fa48 	bl	100025ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
1000015c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000160:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000164:	2202      	movs	r2, #2
10000166:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000168:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000016c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000170:	2201      	movs	r2, #1
10000172:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000174:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000178:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000017c:	2200      	movs	r2, #0
1000017e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000180:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000184:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000188:	2200      	movs	r2, #0
1000018a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
1000018c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000190:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000194:	2200      	movs	r2, #0
10000196:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
10000198:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000019c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001a0:	2200      	movs	r2, #0
100001a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100001a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001ae:	2200      	movs	r2, #0
100001b0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100001b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001b8:	4618      	mov	r0, r3
100001ba:	f000 fbfb 	bl	100009b4 <HAL_RCC_OscConfig>
100001be:	4603      	mov	r3, r0
100001c0:	2b00      	cmp	r3, #0
100001c2:	d001      	beq.n	100001c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
100001c4:	f000 f84a 	bl	1000025c <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100001c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001d0:	22fe      	movs	r2, #254	; 0xfe
100001d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
100001d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001d8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001dc:	2200      	movs	r2, #0
100001de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100001e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001e8:	2200      	movs	r2, #0
100001ea:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
100001ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001f4:	2200      	movs	r2, #0
100001f6:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
100001f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000200:	2200      	movs	r2, #0
10000202:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000204:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000208:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000020c:	2200      	movs	r2, #0
1000020e:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000210:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000214:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000218:	2200      	movs	r2, #0
1000021a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
1000021c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000220:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000224:	2200      	movs	r2, #0
10000226:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
10000228:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000022c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000230:	2200      	movs	r2, #0
10000232:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
10000234:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000238:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000023c:	2200      	movs	r2, #0
1000023e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000240:	1d3b      	adds	r3, r7, #4
10000242:	4618      	mov	r0, r3
10000244:	f001 f954 	bl	100014f0 <HAL_RCC_ClockConfig>
10000248:	4603      	mov	r3, r0
1000024a:	2b00      	cmp	r3, #0
1000024c:	d001      	beq.n	10000252 <SystemClock_Config+0x126>
  {
    Error_Handler();
1000024e:	f000 f805 	bl	1000025c <Error_Handler>
  }
}
10000252:	bf00      	nop
10000254:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000258:	46bd      	mov	sp, r7
1000025a:	bd80      	pop	{r7, pc}

1000025c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000025c:	b480      	push	{r7}
1000025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000260:	b672      	cpsid	i
}
10000262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10000264:	e7fe      	b.n	10000264 <Error_Handler+0x8>

10000266 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000266:	b580      	push	{r7, lr}
10000268:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
1000026a:	2200      	movs	r2, #0
1000026c:	2101      	movs	r1, #1
1000026e:	f06f 000b 	mvn.w	r0, #11
10000272:	f000 f9a4 	bl	100005be <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000276:	2200      	movs	r2, #0
10000278:	2101      	movs	r1, #1
1000027a:	f06f 000a 	mvn.w	r0, #10
1000027e:	f000 f99e 	bl	100005be <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000282:	2200      	movs	r2, #0
10000284:	2101      	movs	r1, #1
10000286:	f06f 0009 	mvn.w	r0, #9
1000028a:	f000 f998 	bl	100005be <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000028e:	2200      	movs	r2, #0
10000290:	2101      	movs	r1, #1
10000292:	f06f 0004 	mvn.w	r0, #4
10000296:	f000 f992 	bl	100005be <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
1000029a:	2200      	movs	r2, #0
1000029c:	2101      	movs	r1, #1
1000029e:	f06f 0003 	mvn.w	r0, #3
100002a2:	f000 f98c 	bl	100005be <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100002a6:	2200      	movs	r2, #0
100002a8:	2101      	movs	r1, #1
100002aa:	f06f 0001 	mvn.w	r0, #1
100002ae:	f000 f986 	bl	100005be <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100002b2:	2200      	movs	r2, #0
100002b4:	2100      	movs	r1, #0
100002b6:	2091      	movs	r0, #145	; 0x91
100002b8:	f000 f981 	bl	100005be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100002bc:	2091      	movs	r0, #145	; 0x91
100002be:	f000 f99a 	bl	100005f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100002c2:	bf00      	nop
100002c4:	bd80      	pop	{r7, pc}

100002c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100002c6:	b480      	push	{r7}
100002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100002ca:	e7fe      	b.n	100002ca <NMI_Handler+0x4>

100002cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100002cc:	b480      	push	{r7}
100002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100002d0:	e7fe      	b.n	100002d0 <HardFault_Handler+0x4>

100002d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100002d2:	b480      	push	{r7}
100002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100002d6:	e7fe      	b.n	100002d6 <MemManage_Handler+0x4>

100002d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100002d8:	b480      	push	{r7}
100002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100002dc:	e7fe      	b.n	100002dc <BusFault_Handler+0x4>

100002de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100002de:	b480      	push	{r7}
100002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100002e2:	e7fe      	b.n	100002e2 <UsageFault_Handler+0x4>

100002e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100002e4:	b480      	push	{r7}
100002e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100002e8:	bf00      	nop
100002ea:	46bd      	mov	sp, r7
100002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
100002f0:	4770      	bx	lr

100002f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100002f2:	b480      	push	{r7}
100002f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100002f6:	bf00      	nop
100002f8:	46bd      	mov	sp, r7
100002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100002fe:	4770      	bx	lr

10000300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000300:	b480      	push	{r7}
10000302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000304:	bf00      	nop
10000306:	46bd      	mov	sp, r7
10000308:	f85d 7b04 	ldr.w	r7, [sp], #4
1000030c:	4770      	bx	lr

1000030e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000030e:	b580      	push	{r7, lr}
10000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000312:	f000 f859 	bl	100003c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000316:	bf00      	nop
10000318:	bd80      	pop	{r7, pc}

1000031a <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000031a:	b580      	push	{r7, lr}
1000031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000031e:	f001 fd05 	bl	10001d2c <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000322:	bf00      	nop
10000324:	bd80      	pop	{r7, pc}

10000326 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000326:	e7fe      	b.n	10000326 <ADC1_IRQHandler>

10000328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000328:	b580      	push	{r7, lr}
1000032a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
1000032c:	2003      	movs	r0, #3
1000032e:	f000 f93b 	bl	100005a8 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000332:	f001 fcba 	bl	10001caa <HAL_RCC_GetSystemCoreClockFreq>
10000336:	4603      	mov	r3, r0
10000338:	4a07      	ldr	r2, [pc, #28]	; (10000358 <HAL_Init+0x30>)
1000033a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1000033c:	200f      	movs	r0, #15
1000033e:	f000 f80d 	bl	1000035c <HAL_InitTick>
10000342:	4603      	mov	r3, r0
10000344:	2b00      	cmp	r3, #0
10000346:	d001      	beq.n	1000034c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000348:	2301      	movs	r3, #1
1000034a:	e002      	b.n	10000352 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
1000034c:	f7ff ff8b 	bl	10000266 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000350:	2300      	movs	r3, #0
}
10000352:	4618      	mov	r0, r3
10000354:	bd80      	pop	{r7, pc}
10000356:	bf00      	nop
10000358:	10020000 	.word	0x10020000

1000035c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1000035c:	b580      	push	{r7, lr}
1000035e:	b082      	sub	sp, #8
10000360:	af00      	add	r7, sp, #0
10000362:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000364:	4b15      	ldr	r3, [pc, #84]	; (100003bc <HAL_InitTick+0x60>)
10000366:	781b      	ldrb	r3, [r3, #0]
10000368:	2b00      	cmp	r3, #0
1000036a:	d101      	bne.n	10000370 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
1000036c:	2301      	movs	r3, #1
1000036e:	e021      	b.n	100003b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000370:	4b13      	ldr	r3, [pc, #76]	; (100003c0 <HAL_InitTick+0x64>)
10000372:	681a      	ldr	r2, [r3, #0]
10000374:	4b11      	ldr	r3, [pc, #68]	; (100003bc <HAL_InitTick+0x60>)
10000376:	781b      	ldrb	r3, [r3, #0]
10000378:	4619      	mov	r1, r3
1000037a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000037e:	fbb3 f3f1 	udiv	r3, r3, r1
10000382:	fbb2 f3f3 	udiv	r3, r2, r3
10000386:	4618      	mov	r0, r3
10000388:	f000 f943 	bl	10000612 <HAL_SYSTICK_Config>
1000038c:	4603      	mov	r3, r0
1000038e:	2b00      	cmp	r3, #0
10000390:	d001      	beq.n	10000396 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000392:	2301      	movs	r3, #1
10000394:	e00e      	b.n	100003b4 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000396:	687b      	ldr	r3, [r7, #4]
10000398:	2b0f      	cmp	r3, #15
1000039a:	d80a      	bhi.n	100003b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
1000039c:	2200      	movs	r2, #0
1000039e:	6879      	ldr	r1, [r7, #4]
100003a0:	f04f 30ff 	mov.w	r0, #4294967295
100003a4:	f000 f90b 	bl	100005be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100003a8:	4a06      	ldr	r2, [pc, #24]	; (100003c4 <HAL_InitTick+0x68>)
100003aa:	687b      	ldr	r3, [r7, #4]
100003ac:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100003ae:	2300      	movs	r3, #0
100003b0:	e000      	b.n	100003b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
100003b2:	2301      	movs	r3, #1
}
100003b4:	4618      	mov	r0, r3
100003b6:	3708      	adds	r7, #8
100003b8:	46bd      	mov	sp, r7
100003ba:	bd80      	pop	{r7, pc}
100003bc:	10020008 	.word	0x10020008
100003c0:	10020000 	.word	0x10020000
100003c4:	10020004 	.word	0x10020004

100003c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100003c8:	b480      	push	{r7}
100003ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100003cc:	4b06      	ldr	r3, [pc, #24]	; (100003e8 <HAL_IncTick+0x20>)
100003ce:	781b      	ldrb	r3, [r3, #0]
100003d0:	461a      	mov	r2, r3
100003d2:	4b06      	ldr	r3, [pc, #24]	; (100003ec <HAL_IncTick+0x24>)
100003d4:	681b      	ldr	r3, [r3, #0]
100003d6:	4413      	add	r3, r2
100003d8:	4a04      	ldr	r2, [pc, #16]	; (100003ec <HAL_IncTick+0x24>)
100003da:	6013      	str	r3, [r2, #0]
}
100003dc:	bf00      	nop
100003de:	46bd      	mov	sp, r7
100003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100003e4:	4770      	bx	lr
100003e6:	bf00      	nop
100003e8:	10020008 	.word	0x10020008
100003ec:	10020028 	.word	0x10020028

100003f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100003f0:	b480      	push	{r7}
100003f2:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100003f4:	4b03      	ldr	r3, [pc, #12]	; (10000404 <HAL_GetTick+0x14>)
100003f6:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100003f8:	4618      	mov	r0, r3
100003fa:	46bd      	mov	sp, r7
100003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000400:	4770      	bx	lr
10000402:	bf00      	nop
10000404:	10020028 	.word	0x10020028

10000408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000408:	b480      	push	{r7}
1000040a:	b085      	sub	sp, #20
1000040c:	af00      	add	r7, sp, #0
1000040e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000410:	687b      	ldr	r3, [r7, #4]
10000412:	f003 0307 	and.w	r3, r3, #7
10000416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000418:	4b0c      	ldr	r3, [pc, #48]	; (1000044c <__NVIC_SetPriorityGrouping+0x44>)
1000041a:	68db      	ldr	r3, [r3, #12]
1000041c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
1000041e:	68ba      	ldr	r2, [r7, #8]
10000420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000424:	4013      	ands	r3, r2
10000426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000428:	68fb      	ldr	r3, [r7, #12]
1000042a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1000042c:	68bb      	ldr	r3, [r7, #8]
1000042e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10000434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10000438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000043a:	4a04      	ldr	r2, [pc, #16]	; (1000044c <__NVIC_SetPriorityGrouping+0x44>)
1000043c:	68bb      	ldr	r3, [r7, #8]
1000043e:	60d3      	str	r3, [r2, #12]
}
10000440:	bf00      	nop
10000442:	3714      	adds	r7, #20
10000444:	46bd      	mov	sp, r7
10000446:	f85d 7b04 	ldr.w	r7, [sp], #4
1000044a:	4770      	bx	lr
1000044c:	e000ed00 	.word	0xe000ed00

10000450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000450:	b480      	push	{r7}
10000452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000454:	4b04      	ldr	r3, [pc, #16]	; (10000468 <__NVIC_GetPriorityGrouping+0x18>)
10000456:	68db      	ldr	r3, [r3, #12]
10000458:	0a1b      	lsrs	r3, r3, #8
1000045a:	f003 0307 	and.w	r3, r3, #7
}
1000045e:	4618      	mov	r0, r3
10000460:	46bd      	mov	sp, r7
10000462:	f85d 7b04 	ldr.w	r7, [sp], #4
10000466:	4770      	bx	lr
10000468:	e000ed00 	.word	0xe000ed00

1000046c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000046c:	b480      	push	{r7}
1000046e:	b083      	sub	sp, #12
10000470:	af00      	add	r7, sp, #0
10000472:	4603      	mov	r3, r0
10000474:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000047a:	2b00      	cmp	r3, #0
1000047c:	db0b      	blt.n	10000496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000047e:	88fb      	ldrh	r3, [r7, #6]
10000480:	f003 021f 	and.w	r2, r3, #31
10000484:	4907      	ldr	r1, [pc, #28]	; (100004a4 <__NVIC_EnableIRQ+0x38>)
10000486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000048a:	095b      	lsrs	r3, r3, #5
1000048c:	2001      	movs	r0, #1
1000048e:	fa00 f202 	lsl.w	r2, r0, r2
10000492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000496:	bf00      	nop
10000498:	370c      	adds	r7, #12
1000049a:	46bd      	mov	sp, r7
1000049c:	f85d 7b04 	ldr.w	r7, [sp], #4
100004a0:	4770      	bx	lr
100004a2:	bf00      	nop
100004a4:	e000e100 	.word	0xe000e100

100004a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100004a8:	b480      	push	{r7}
100004aa:	b083      	sub	sp, #12
100004ac:	af00      	add	r7, sp, #0
100004ae:	4603      	mov	r3, r0
100004b0:	6039      	str	r1, [r7, #0]
100004b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100004b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100004b8:	2b00      	cmp	r3, #0
100004ba:	db0a      	blt.n	100004d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100004bc:	683b      	ldr	r3, [r7, #0]
100004be:	b2da      	uxtb	r2, r3
100004c0:	490c      	ldr	r1, [pc, #48]	; (100004f4 <__NVIC_SetPriority+0x4c>)
100004c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100004c6:	0112      	lsls	r2, r2, #4
100004c8:	b2d2      	uxtb	r2, r2
100004ca:	440b      	add	r3, r1
100004cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100004d0:	e00a      	b.n	100004e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100004d2:	683b      	ldr	r3, [r7, #0]
100004d4:	b2da      	uxtb	r2, r3
100004d6:	4908      	ldr	r1, [pc, #32]	; (100004f8 <__NVIC_SetPriority+0x50>)
100004d8:	88fb      	ldrh	r3, [r7, #6]
100004da:	f003 030f 	and.w	r3, r3, #15
100004de:	3b04      	subs	r3, #4
100004e0:	0112      	lsls	r2, r2, #4
100004e2:	b2d2      	uxtb	r2, r2
100004e4:	440b      	add	r3, r1
100004e6:	761a      	strb	r2, [r3, #24]
}
100004e8:	bf00      	nop
100004ea:	370c      	adds	r7, #12
100004ec:	46bd      	mov	sp, r7
100004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100004f2:	4770      	bx	lr
100004f4:	e000e100 	.word	0xe000e100
100004f8:	e000ed00 	.word	0xe000ed00

100004fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
100004fc:	b480      	push	{r7}
100004fe:	b089      	sub	sp, #36	; 0x24
10000500:	af00      	add	r7, sp, #0
10000502:	60f8      	str	r0, [r7, #12]
10000504:	60b9      	str	r1, [r7, #8]
10000506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000508:	68fb      	ldr	r3, [r7, #12]
1000050a:	f003 0307 	and.w	r3, r3, #7
1000050e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000510:	69fb      	ldr	r3, [r7, #28]
10000512:	f1c3 0307 	rsb	r3, r3, #7
10000516:	2b04      	cmp	r3, #4
10000518:	bf28      	it	cs
1000051a:	2304      	movcs	r3, #4
1000051c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000051e:	69fb      	ldr	r3, [r7, #28]
10000520:	3304      	adds	r3, #4
10000522:	2b06      	cmp	r3, #6
10000524:	d902      	bls.n	1000052c <NVIC_EncodePriority+0x30>
10000526:	69fb      	ldr	r3, [r7, #28]
10000528:	3b03      	subs	r3, #3
1000052a:	e000      	b.n	1000052e <NVIC_EncodePriority+0x32>
1000052c:	2300      	movs	r3, #0
1000052e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000530:	f04f 32ff 	mov.w	r2, #4294967295
10000534:	69bb      	ldr	r3, [r7, #24]
10000536:	fa02 f303 	lsl.w	r3, r2, r3
1000053a:	43da      	mvns	r2, r3
1000053c:	68bb      	ldr	r3, [r7, #8]
1000053e:	401a      	ands	r2, r3
10000540:	697b      	ldr	r3, [r7, #20]
10000542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000544:	f04f 31ff 	mov.w	r1, #4294967295
10000548:	697b      	ldr	r3, [r7, #20]
1000054a:	fa01 f303 	lsl.w	r3, r1, r3
1000054e:	43d9      	mvns	r1, r3
10000550:	687b      	ldr	r3, [r7, #4]
10000552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000554:	4313      	orrs	r3, r2
         );
}
10000556:	4618      	mov	r0, r3
10000558:	3724      	adds	r7, #36	; 0x24
1000055a:	46bd      	mov	sp, r7
1000055c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000560:	4770      	bx	lr
	...

10000564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000564:	b580      	push	{r7, lr}
10000566:	b082      	sub	sp, #8
10000568:	af00      	add	r7, sp, #0
1000056a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1000056c:	687b      	ldr	r3, [r7, #4]
1000056e:	3b01      	subs	r3, #1
10000570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000574:	d301      	bcc.n	1000057a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000576:	2301      	movs	r3, #1
10000578:	e00f      	b.n	1000059a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000057a:	4a0a      	ldr	r2, [pc, #40]	; (100005a4 <SysTick_Config+0x40>)
1000057c:	687b      	ldr	r3, [r7, #4]
1000057e:	3b01      	subs	r3, #1
10000580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000582:	210f      	movs	r1, #15
10000584:	f04f 30ff 	mov.w	r0, #4294967295
10000588:	f7ff ff8e 	bl	100004a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1000058c:	4b05      	ldr	r3, [pc, #20]	; (100005a4 <SysTick_Config+0x40>)
1000058e:	2200      	movs	r2, #0
10000590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000592:	4b04      	ldr	r3, [pc, #16]	; (100005a4 <SysTick_Config+0x40>)
10000594:	2207      	movs	r2, #7
10000596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000598:	2300      	movs	r3, #0
}
1000059a:	4618      	mov	r0, r3
1000059c:	3708      	adds	r7, #8
1000059e:	46bd      	mov	sp, r7
100005a0:	bd80      	pop	{r7, pc}
100005a2:	bf00      	nop
100005a4:	e000e010 	.word	0xe000e010

100005a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100005a8:	b580      	push	{r7, lr}
100005aa:	b082      	sub	sp, #8
100005ac:	af00      	add	r7, sp, #0
100005ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100005b0:	6878      	ldr	r0, [r7, #4]
100005b2:	f7ff ff29 	bl	10000408 <__NVIC_SetPriorityGrouping>
}
100005b6:	bf00      	nop
100005b8:	3708      	adds	r7, #8
100005ba:	46bd      	mov	sp, r7
100005bc:	bd80      	pop	{r7, pc}

100005be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100005be:	b580      	push	{r7, lr}
100005c0:	b086      	sub	sp, #24
100005c2:	af00      	add	r7, sp, #0
100005c4:	4603      	mov	r3, r0
100005c6:	60b9      	str	r1, [r7, #8]
100005c8:	607a      	str	r2, [r7, #4]
100005ca:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100005cc:	2300      	movs	r3, #0
100005ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100005d0:	f7ff ff3e 	bl	10000450 <__NVIC_GetPriorityGrouping>
100005d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100005d6:	687a      	ldr	r2, [r7, #4]
100005d8:	68b9      	ldr	r1, [r7, #8]
100005da:	6978      	ldr	r0, [r7, #20]
100005dc:	f7ff ff8e 	bl	100004fc <NVIC_EncodePriority>
100005e0:	4602      	mov	r2, r0
100005e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
100005e6:	4611      	mov	r1, r2
100005e8:	4618      	mov	r0, r3
100005ea:	f7ff ff5d 	bl	100004a8 <__NVIC_SetPriority>
}
100005ee:	bf00      	nop
100005f0:	3718      	adds	r7, #24
100005f2:	46bd      	mov	sp, r7
100005f4:	bd80      	pop	{r7, pc}

100005f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100005f6:	b580      	push	{r7, lr}
100005f8:	b082      	sub	sp, #8
100005fa:	af00      	add	r7, sp, #0
100005fc:	4603      	mov	r3, r0
100005fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000604:	4618      	mov	r0, r3
10000606:	f7ff ff31 	bl	1000046c <__NVIC_EnableIRQ>
}
1000060a:	bf00      	nop
1000060c:	3708      	adds	r7, #8
1000060e:	46bd      	mov	sp, r7
10000610:	bd80      	pop	{r7, pc}

10000612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000612:	b580      	push	{r7, lr}
10000614:	b082      	sub	sp, #8
10000616:	af00      	add	r7, sp, #0
10000618:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000061a:	6878      	ldr	r0, [r7, #4]
1000061c:	f7ff ffa2 	bl	10000564 <SysTick_Config>
10000620:	4603      	mov	r3, r0
}
10000622:	4618      	mov	r0, r3
10000624:	3708      	adds	r7, #8
10000626:	46bd      	mov	sp, r7
10000628:	bd80      	pop	{r7, pc}
	...

1000062c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
1000062c:	b480      	push	{r7}
1000062e:	b089      	sub	sp, #36	; 0x24
10000630:	af00      	add	r7, sp, #0
10000632:	6078      	str	r0, [r7, #4]
10000634:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10000636:	4b8a      	ldr	r3, [pc, #552]	; (10000860 <HAL_GPIO_Init+0x234>)
10000638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000063a:	2300      	movs	r3, #0
1000063c:	61fb      	str	r3, [r7, #28]
1000063e:	e191      	b.n	10000964 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10000640:	2201      	movs	r2, #1
10000642:	69fb      	ldr	r3, [r7, #28]
10000644:	fa02 f303 	lsl.w	r3, r2, r3
10000648:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000064a:	683b      	ldr	r3, [r7, #0]
1000064c:	681b      	ldr	r3, [r3, #0]
1000064e:	693a      	ldr	r2, [r7, #16]
10000650:	4013      	ands	r3, r2
10000652:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000654:	68fa      	ldr	r2, [r7, #12]
10000656:	693b      	ldr	r3, [r7, #16]
10000658:	429a      	cmp	r2, r3
1000065a:	f040 8180 	bne.w	1000095e <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000065e:	683b      	ldr	r3, [r7, #0]
10000660:	685b      	ldr	r3, [r3, #4]
10000662:	2b02      	cmp	r3, #2
10000664:	d003      	beq.n	1000066e <HAL_GPIO_Init+0x42>
10000666:	683b      	ldr	r3, [r7, #0]
10000668:	685b      	ldr	r3, [r3, #4]
1000066a:	2b12      	cmp	r3, #18
1000066c:	d123      	bne.n	100006b6 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
1000066e:	69fb      	ldr	r3, [r7, #28]
10000670:	08da      	lsrs	r2, r3, #3
10000672:	687b      	ldr	r3, [r7, #4]
10000674:	3208      	adds	r2, #8
10000676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000067a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
1000067c:	69fb      	ldr	r3, [r7, #28]
1000067e:	f003 0307 	and.w	r3, r3, #7
10000682:	009b      	lsls	r3, r3, #2
10000684:	220f      	movs	r2, #15
10000686:	fa02 f303 	lsl.w	r3, r2, r3
1000068a:	43db      	mvns	r3, r3
1000068c:	69ba      	ldr	r2, [r7, #24]
1000068e:	4013      	ands	r3, r2
10000690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10000692:	683b      	ldr	r3, [r7, #0]
10000694:	691a      	ldr	r2, [r3, #16]
10000696:	69fb      	ldr	r3, [r7, #28]
10000698:	f003 0307 	and.w	r3, r3, #7
1000069c:	009b      	lsls	r3, r3, #2
1000069e:	fa02 f303 	lsl.w	r3, r2, r3
100006a2:	69ba      	ldr	r2, [r7, #24]
100006a4:	4313      	orrs	r3, r2
100006a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100006a8:	69fb      	ldr	r3, [r7, #28]
100006aa:	08da      	lsrs	r2, r3, #3
100006ac:	687b      	ldr	r3, [r7, #4]
100006ae:	3208      	adds	r2, #8
100006b0:	69b9      	ldr	r1, [r7, #24]
100006b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100006b6:	687b      	ldr	r3, [r7, #4]
100006b8:	681b      	ldr	r3, [r3, #0]
100006ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100006bc:	69fb      	ldr	r3, [r7, #28]
100006be:	005b      	lsls	r3, r3, #1
100006c0:	2203      	movs	r2, #3
100006c2:	fa02 f303 	lsl.w	r3, r2, r3
100006c6:	43db      	mvns	r3, r3
100006c8:	69ba      	ldr	r2, [r7, #24]
100006ca:	4013      	ands	r3, r2
100006cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100006ce:	683b      	ldr	r3, [r7, #0]
100006d0:	685b      	ldr	r3, [r3, #4]
100006d2:	f003 0203 	and.w	r2, r3, #3
100006d6:	69fb      	ldr	r3, [r7, #28]
100006d8:	005b      	lsls	r3, r3, #1
100006da:	fa02 f303 	lsl.w	r3, r2, r3
100006de:	69ba      	ldr	r2, [r7, #24]
100006e0:	4313      	orrs	r3, r2
100006e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100006e4:	687b      	ldr	r3, [r7, #4]
100006e6:	69ba      	ldr	r2, [r7, #24]
100006e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100006ea:	683b      	ldr	r3, [r7, #0]
100006ec:	685b      	ldr	r3, [r3, #4]
100006ee:	2b01      	cmp	r3, #1
100006f0:	d00b      	beq.n	1000070a <HAL_GPIO_Init+0xde>
100006f2:	683b      	ldr	r3, [r7, #0]
100006f4:	685b      	ldr	r3, [r3, #4]
100006f6:	2b02      	cmp	r3, #2
100006f8:	d007      	beq.n	1000070a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100006fa:	683b      	ldr	r3, [r7, #0]
100006fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100006fe:	2b11      	cmp	r3, #17
10000700:	d003      	beq.n	1000070a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000702:	683b      	ldr	r3, [r7, #0]
10000704:	685b      	ldr	r3, [r3, #4]
10000706:	2b12      	cmp	r3, #18
10000708:	d130      	bne.n	1000076c <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000070a:	687b      	ldr	r3, [r7, #4]
1000070c:	689b      	ldr	r3, [r3, #8]
1000070e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000710:	69fb      	ldr	r3, [r7, #28]
10000712:	005b      	lsls	r3, r3, #1
10000714:	2203      	movs	r2, #3
10000716:	fa02 f303 	lsl.w	r3, r2, r3
1000071a:	43db      	mvns	r3, r3
1000071c:	69ba      	ldr	r2, [r7, #24]
1000071e:	4013      	ands	r3, r2
10000720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000722:	683b      	ldr	r3, [r7, #0]
10000724:	68da      	ldr	r2, [r3, #12]
10000726:	69fb      	ldr	r3, [r7, #28]
10000728:	005b      	lsls	r3, r3, #1
1000072a:	fa02 f303 	lsl.w	r3, r2, r3
1000072e:	69ba      	ldr	r2, [r7, #24]
10000730:	4313      	orrs	r3, r2
10000732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000734:	687b      	ldr	r3, [r7, #4]
10000736:	69ba      	ldr	r2, [r7, #24]
10000738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000073a:	687b      	ldr	r3, [r7, #4]
1000073c:	685b      	ldr	r3, [r3, #4]
1000073e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000740:	2201      	movs	r2, #1
10000742:	69fb      	ldr	r3, [r7, #28]
10000744:	fa02 f303 	lsl.w	r3, r2, r3
10000748:	43db      	mvns	r3, r3
1000074a:	69ba      	ldr	r2, [r7, #24]
1000074c:	4013      	ands	r3, r2
1000074e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000750:	683b      	ldr	r3, [r7, #0]
10000752:	685b      	ldr	r3, [r3, #4]
10000754:	091b      	lsrs	r3, r3, #4
10000756:	f003 0201 	and.w	r2, r3, #1
1000075a:	69fb      	ldr	r3, [r7, #28]
1000075c:	fa02 f303 	lsl.w	r3, r2, r3
10000760:	69ba      	ldr	r2, [r7, #24]
10000762:	4313      	orrs	r3, r2
10000764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10000766:	687b      	ldr	r3, [r7, #4]
10000768:	69ba      	ldr	r2, [r7, #24]
1000076a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
1000076c:	687b      	ldr	r3, [r7, #4]
1000076e:	68db      	ldr	r3, [r3, #12]
10000770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10000772:	69fb      	ldr	r3, [r7, #28]
10000774:	005b      	lsls	r3, r3, #1
10000776:	2203      	movs	r2, #3
10000778:	fa02 f303 	lsl.w	r3, r2, r3
1000077c:	43db      	mvns	r3, r3
1000077e:	69ba      	ldr	r2, [r7, #24]
10000780:	4013      	ands	r3, r2
10000782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000784:	683b      	ldr	r3, [r7, #0]
10000786:	689a      	ldr	r2, [r3, #8]
10000788:	69fb      	ldr	r3, [r7, #28]
1000078a:	005b      	lsls	r3, r3, #1
1000078c:	fa02 f303 	lsl.w	r3, r2, r3
10000790:	69ba      	ldr	r2, [r7, #24]
10000792:	4313      	orrs	r3, r2
10000794:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000796:	687b      	ldr	r3, [r7, #4]
10000798:	69ba      	ldr	r2, [r7, #24]
1000079a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
1000079c:	683b      	ldr	r3, [r7, #0]
1000079e:	685b      	ldr	r3, [r3, #4]
100007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100007a4:	2b00      	cmp	r3, #0
100007a6:	f000 80da 	beq.w	1000095e <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
100007aa:	4a2e      	ldr	r2, [pc, #184]	; (10000864 <HAL_GPIO_Init+0x238>)
100007ac:	69fb      	ldr	r3, [r7, #28]
100007ae:	089b      	lsrs	r3, r3, #2
100007b0:	3318      	adds	r3, #24
100007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100007b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
100007b8:	69fb      	ldr	r3, [r7, #28]
100007ba:	f003 0303 	and.w	r3, r3, #3
100007be:	00db      	lsls	r3, r3, #3
100007c0:	22ff      	movs	r2, #255	; 0xff
100007c2:	fa02 f303 	lsl.w	r3, r2, r3
100007c6:	43db      	mvns	r3, r3
100007c8:	69ba      	ldr	r2, [r7, #24]
100007ca:	4013      	ands	r3, r2
100007cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100007ce:	687b      	ldr	r3, [r7, #4]
100007d0:	4a25      	ldr	r2, [pc, #148]	; (10000868 <HAL_GPIO_Init+0x23c>)
100007d2:	4293      	cmp	r3, r2
100007d4:	d05e      	beq.n	10000894 <HAL_GPIO_Init+0x268>
100007d6:	687b      	ldr	r3, [r7, #4]
100007d8:	4a24      	ldr	r2, [pc, #144]	; (1000086c <HAL_GPIO_Init+0x240>)
100007da:	4293      	cmp	r3, r2
100007dc:	d03d      	beq.n	1000085a <HAL_GPIO_Init+0x22e>
100007de:	687b      	ldr	r3, [r7, #4]
100007e0:	4a23      	ldr	r2, [pc, #140]	; (10000870 <HAL_GPIO_Init+0x244>)
100007e2:	4293      	cmp	r3, r2
100007e4:	d037      	beq.n	10000856 <HAL_GPIO_Init+0x22a>
100007e6:	687b      	ldr	r3, [r7, #4]
100007e8:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
100007ec:	d031      	beq.n	10000852 <HAL_GPIO_Init+0x226>
100007ee:	687b      	ldr	r3, [r7, #4]
100007f0:	4a20      	ldr	r2, [pc, #128]	; (10000874 <HAL_GPIO_Init+0x248>)
100007f2:	4293      	cmp	r3, r2
100007f4:	d02b      	beq.n	1000084e <HAL_GPIO_Init+0x222>
100007f6:	687b      	ldr	r3, [r7, #4]
100007f8:	4a1f      	ldr	r2, [pc, #124]	; (10000878 <HAL_GPIO_Init+0x24c>)
100007fa:	4293      	cmp	r3, r2
100007fc:	d025      	beq.n	1000084a <HAL_GPIO_Init+0x21e>
100007fe:	687b      	ldr	r3, [r7, #4]
10000800:	4a1e      	ldr	r2, [pc, #120]	; (1000087c <HAL_GPIO_Init+0x250>)
10000802:	4293      	cmp	r3, r2
10000804:	d01f      	beq.n	10000846 <HAL_GPIO_Init+0x21a>
10000806:	687b      	ldr	r3, [r7, #4]
10000808:	4a1d      	ldr	r2, [pc, #116]	; (10000880 <HAL_GPIO_Init+0x254>)
1000080a:	4293      	cmp	r3, r2
1000080c:	d019      	beq.n	10000842 <HAL_GPIO_Init+0x216>
1000080e:	687b      	ldr	r3, [r7, #4]
10000810:	4a1c      	ldr	r2, [pc, #112]	; (10000884 <HAL_GPIO_Init+0x258>)
10000812:	4293      	cmp	r3, r2
10000814:	d013      	beq.n	1000083e <HAL_GPIO_Init+0x212>
10000816:	687b      	ldr	r3, [r7, #4]
10000818:	4a1b      	ldr	r2, [pc, #108]	; (10000888 <HAL_GPIO_Init+0x25c>)
1000081a:	4293      	cmp	r3, r2
1000081c:	d00d      	beq.n	1000083a <HAL_GPIO_Init+0x20e>
1000081e:	687b      	ldr	r3, [r7, #4]
10000820:	4a1a      	ldr	r2, [pc, #104]	; (1000088c <HAL_GPIO_Init+0x260>)
10000822:	4293      	cmp	r3, r2
10000824:	d007      	beq.n	10000836 <HAL_GPIO_Init+0x20a>
10000826:	687b      	ldr	r3, [r7, #4]
10000828:	4a19      	ldr	r2, [pc, #100]	; (10000890 <HAL_GPIO_Init+0x264>)
1000082a:	4293      	cmp	r3, r2
1000082c:	d101      	bne.n	10000832 <HAL_GPIO_Init+0x206>
1000082e:	230b      	movs	r3, #11
10000830:	e031      	b.n	10000896 <HAL_GPIO_Init+0x26a>
10000832:	2319      	movs	r3, #25
10000834:	e02f      	b.n	10000896 <HAL_GPIO_Init+0x26a>
10000836:	230a      	movs	r3, #10
10000838:	e02d      	b.n	10000896 <HAL_GPIO_Init+0x26a>
1000083a:	2309      	movs	r3, #9
1000083c:	e02b      	b.n	10000896 <HAL_GPIO_Init+0x26a>
1000083e:	2308      	movs	r3, #8
10000840:	e029      	b.n	10000896 <HAL_GPIO_Init+0x26a>
10000842:	2307      	movs	r3, #7
10000844:	e027      	b.n	10000896 <HAL_GPIO_Init+0x26a>
10000846:	2306      	movs	r3, #6
10000848:	e025      	b.n	10000896 <HAL_GPIO_Init+0x26a>
1000084a:	2305      	movs	r3, #5
1000084c:	e023      	b.n	10000896 <HAL_GPIO_Init+0x26a>
1000084e:	2304      	movs	r3, #4
10000850:	e021      	b.n	10000896 <HAL_GPIO_Init+0x26a>
10000852:	2303      	movs	r3, #3
10000854:	e01f      	b.n	10000896 <HAL_GPIO_Init+0x26a>
10000856:	2302      	movs	r3, #2
10000858:	e01d      	b.n	10000896 <HAL_GPIO_Init+0x26a>
1000085a:	2301      	movs	r3, #1
1000085c:	e01b      	b.n	10000896 <HAL_GPIO_Init+0x26a>
1000085e:	bf00      	nop
10000860:	5000d0c0 	.word	0x5000d0c0
10000864:	5000d000 	.word	0x5000d000
10000868:	50002000 	.word	0x50002000
1000086c:	50003000 	.word	0x50003000
10000870:	50004000 	.word	0x50004000
10000874:	50006000 	.word	0x50006000
10000878:	50007000 	.word	0x50007000
1000087c:	50008000 	.word	0x50008000
10000880:	50009000 	.word	0x50009000
10000884:	5000a000 	.word	0x5000a000
10000888:	5000b000 	.word	0x5000b000
1000088c:	5000c000 	.word	0x5000c000
10000890:	54004000 	.word	0x54004000
10000894:	2300      	movs	r3, #0
10000896:	69fa      	ldr	r2, [r7, #28]
10000898:	f002 0203 	and.w	r2, r2, #3
1000089c:	00d2      	lsls	r2, r2, #3
1000089e:	4093      	lsls	r3, r2
100008a0:	461a      	mov	r2, r3
100008a2:	69bb      	ldr	r3, [r7, #24]
100008a4:	4313      	orrs	r3, r2
100008a6:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
100008a8:	4934      	ldr	r1, [pc, #208]	; (1000097c <HAL_GPIO_Init+0x350>)
100008aa:	69fb      	ldr	r3, [r7, #28]
100008ac:	089b      	lsrs	r3, r3, #2
100008ae:	3318      	adds	r3, #24
100008b0:	69ba      	ldr	r2, [r7, #24]
100008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
100008b6:	697b      	ldr	r3, [r7, #20]
100008b8:	681b      	ldr	r3, [r3, #0]
100008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100008bc:	68fb      	ldr	r3, [r7, #12]
100008be:	43db      	mvns	r3, r3
100008c0:	69ba      	ldr	r2, [r7, #24]
100008c2:	4013      	ands	r3, r2
100008c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100008c6:	683b      	ldr	r3, [r7, #0]
100008c8:	685b      	ldr	r3, [r3, #4]
100008ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
100008ce:	2b00      	cmp	r3, #0
100008d0:	d003      	beq.n	100008da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100008d2:	69ba      	ldr	r2, [r7, #24]
100008d4:	68fb      	ldr	r3, [r7, #12]
100008d6:	4313      	orrs	r3, r2
100008d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
100008da:	697b      	ldr	r3, [r7, #20]
100008dc:	69ba      	ldr	r2, [r7, #24]
100008de:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
100008e0:	697b      	ldr	r3, [r7, #20]
100008e2:	685b      	ldr	r3, [r3, #4]
100008e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100008e6:	68fb      	ldr	r3, [r7, #12]
100008e8:	43db      	mvns	r3, r3
100008ea:	69ba      	ldr	r2, [r7, #24]
100008ec:	4013      	ands	r3, r2
100008ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
100008f0:	683b      	ldr	r3, [r7, #0]
100008f2:	685b      	ldr	r3, [r3, #4]
100008f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
100008f8:	2b00      	cmp	r3, #0
100008fa:	d003      	beq.n	10000904 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
100008fc:	69ba      	ldr	r2, [r7, #24]
100008fe:	68fb      	ldr	r3, [r7, #12]
10000900:	4313      	orrs	r3, r2
10000902:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000904:	697b      	ldr	r3, [r7, #20]
10000906:	69ba      	ldr	r2, [r7, #24]
10000908:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
1000090a:	4b1c      	ldr	r3, [pc, #112]	; (1000097c <HAL_GPIO_Init+0x350>)
1000090c:	681b      	ldr	r3, [r3, #0]
1000090e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000910:	68fb      	ldr	r3, [r7, #12]
10000912:	43db      	mvns	r3, r3
10000914:	69ba      	ldr	r2, [r7, #24]
10000916:	4013      	ands	r3, r2
10000918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
1000091a:	683b      	ldr	r3, [r7, #0]
1000091c:	685b      	ldr	r3, [r3, #4]
1000091e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000922:	2b00      	cmp	r3, #0
10000924:	d003      	beq.n	1000092e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000926:	69ba      	ldr	r2, [r7, #24]
10000928:	68fb      	ldr	r3, [r7, #12]
1000092a:	4313      	orrs	r3, r2
1000092c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
1000092e:	4a13      	ldr	r2, [pc, #76]	; (1000097c <HAL_GPIO_Init+0x350>)
10000930:	69bb      	ldr	r3, [r7, #24]
10000932:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000934:	4b11      	ldr	r3, [pc, #68]	; (1000097c <HAL_GPIO_Init+0x350>)
10000936:	685b      	ldr	r3, [r3, #4]
10000938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000093a:	68fb      	ldr	r3, [r7, #12]
1000093c:	43db      	mvns	r3, r3
1000093e:	69ba      	ldr	r2, [r7, #24]
10000940:	4013      	ands	r3, r2
10000942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000944:	683b      	ldr	r3, [r7, #0]
10000946:	685b      	ldr	r3, [r3, #4]
10000948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
1000094c:	2b00      	cmp	r3, #0
1000094e:	d003      	beq.n	10000958 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000950:	69ba      	ldr	r2, [r7, #24]
10000952:	68fb      	ldr	r3, [r7, #12]
10000954:	4313      	orrs	r3, r2
10000956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000958:	4a08      	ldr	r2, [pc, #32]	; (1000097c <HAL_GPIO_Init+0x350>)
1000095a:	69bb      	ldr	r3, [r7, #24]
1000095c:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
1000095e:	69fb      	ldr	r3, [r7, #28]
10000960:	3301      	adds	r3, #1
10000962:	61fb      	str	r3, [r7, #28]
10000964:	69fb      	ldr	r3, [r7, #28]
10000966:	2b0f      	cmp	r3, #15
10000968:	f67f ae6a 	bls.w	10000640 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
1000096c:	bf00      	nop
1000096e:	bf00      	nop
10000970:	3724      	adds	r7, #36	; 0x24
10000972:	46bd      	mov	sp, r7
10000974:	f85d 7b04 	ldr.w	r7, [sp], #4
10000978:	4770      	bx	lr
1000097a:	bf00      	nop
1000097c:	5000d000 	.word	0x5000d000

10000980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10000980:	b480      	push	{r7}
10000982:	b083      	sub	sp, #12
10000984:	af00      	add	r7, sp, #0
10000986:	6078      	str	r0, [r7, #4]
10000988:	460b      	mov	r3, r1
1000098a:	807b      	strh	r3, [r7, #2]
1000098c:	4613      	mov	r3, r2
1000098e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10000990:	787b      	ldrb	r3, [r7, #1]
10000992:	2b00      	cmp	r3, #0
10000994:	d003      	beq.n	1000099e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10000996:	887a      	ldrh	r2, [r7, #2]
10000998:	687b      	ldr	r3, [r7, #4]
1000099a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
1000099c:	e003      	b.n	100009a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
1000099e:	887b      	ldrh	r3, [r7, #2]
100009a0:	041a      	lsls	r2, r3, #16
100009a2:	687b      	ldr	r3, [r7, #4]
100009a4:	619a      	str	r2, [r3, #24]
}
100009a6:	bf00      	nop
100009a8:	370c      	adds	r7, #12
100009aa:	46bd      	mov	sp, r7
100009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100009b0:	4770      	bx	lr
	...

100009b4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100009b4:	b580      	push	{r7, lr}
100009b6:	b084      	sub	sp, #16
100009b8:	af00      	add	r7, sp, #0
100009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100009bc:	2300      	movs	r3, #0
100009be:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	2b00      	cmp	r3, #0
100009c4:	d101      	bne.n	100009ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100009c6:	2301      	movs	r3, #1
100009c8:	e320      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100009ca:	687b      	ldr	r3, [r7, #4]
100009cc:	681b      	ldr	r3, [r3, #0]
100009ce:	f003 0301 	and.w	r3, r3, #1
100009d2:	2b00      	cmp	r3, #0
100009d4:	f000 8081 	beq.w	10000ada <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100009d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009dc:	6a1b      	ldr	r3, [r3, #32]
100009de:	f003 0303 	and.w	r3, r3, #3
100009e2:	2b01      	cmp	r3, #1
100009e4:	d107      	bne.n	100009f6 <HAL_RCC_OscConfig+0x42>
100009e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009ea:	6a1b      	ldr	r3, [r3, #32]
100009ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100009f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100009f4:	d054      	beq.n	10000aa0 <HAL_RCC_OscConfig+0xec>
100009f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100009fc:	f003 0307 	and.w	r3, r3, #7
10000a00:	2b01      	cmp	r3, #1
10000a02:	d107      	bne.n	10000a14 <HAL_RCC_OscConfig+0x60>
10000a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000a12:	d045      	beq.n	10000aa0 <HAL_RCC_OscConfig+0xec>
10000a14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000a1a:	f003 0303 	and.w	r3, r3, #3
10000a1e:	2b01      	cmp	r3, #1
10000a20:	d107      	bne.n	10000a32 <HAL_RCC_OscConfig+0x7e>
10000a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000a30:	d036      	beq.n	10000aa0 <HAL_RCC_OscConfig+0xec>
10000a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000a38:	f003 0303 	and.w	r3, r3, #3
10000a3c:	2b01      	cmp	r3, #1
10000a3e:	d10f      	bne.n	10000a60 <HAL_RCC_OscConfig+0xac>
10000a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000a48:	f003 0302 	and.w	r3, r3, #2
10000a4c:	2b02      	cmp	r3, #2
10000a4e:	d027      	beq.n	10000aa0 <HAL_RCC_OscConfig+0xec>
10000a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000a58:	f003 0302 	and.w	r3, r3, #2
10000a5c:	2b02      	cmp	r3, #2
10000a5e:	d01f      	beq.n	10000aa0 <HAL_RCC_OscConfig+0xec>
10000a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a64:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000a68:	f003 0303 	and.w	r3, r3, #3
10000a6c:	2b01      	cmp	r3, #1
10000a6e:	d107      	bne.n	10000a80 <HAL_RCC_OscConfig+0xcc>
10000a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a74:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000a78:	f003 0302 	and.w	r3, r3, #2
10000a7c:	2b02      	cmp	r3, #2
10000a7e:	d00f      	beq.n	10000aa0 <HAL_RCC_OscConfig+0xec>
10000a80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a84:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000a88:	f003 0303 	and.w	r3, r3, #3
10000a8c:	2b01      	cmp	r3, #1
10000a8e:	d117      	bne.n	10000ac0 <HAL_RCC_OscConfig+0x10c>
10000a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a94:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000a98:	f003 0302 	and.w	r3, r3, #2
10000a9c:	2b02      	cmp	r3, #2
10000a9e:	d10f      	bne.n	10000ac0 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000aa4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000ab0:	d112      	bne.n	10000ad8 <HAL_RCC_OscConfig+0x124>
10000ab2:	687b      	ldr	r3, [r7, #4]
10000ab4:	685b      	ldr	r3, [r3, #4]
10000ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000aba:	d00d      	beq.n	10000ad8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000abc:	2301      	movs	r3, #1
10000abe:	e2a5      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000ac0:	687b      	ldr	r3, [r7, #4]
10000ac2:	685b      	ldr	r3, [r3, #4]
10000ac4:	4618      	mov	r0, r3
10000ac6:	f000 faa7 	bl	10001018 <HAL_RCC_HSEConfig>
10000aca:	4603      	mov	r3, r0
10000acc:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000ace:	7bfb      	ldrb	r3, [r7, #15]
10000ad0:	2b00      	cmp	r3, #0
10000ad2:	d002      	beq.n	10000ada <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000ad4:	7bfb      	ldrb	r3, [r7, #15]
10000ad6:	e299      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000ad8:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000ada:	687b      	ldr	r3, [r7, #4]
10000adc:	681b      	ldr	r3, [r3, #0]
10000ade:	f003 0302 	and.w	r3, r3, #2
10000ae2:	2b00      	cmp	r3, #0
10000ae4:	f000 814e 	beq.w	10000d84 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000aec:	6a1b      	ldr	r3, [r3, #32]
10000aee:	f003 0303 	and.w	r3, r3, #3
10000af2:	2b00      	cmp	r3, #0
10000af4:	d107      	bne.n	10000b06 <HAL_RCC_OscConfig+0x152>
10000af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000afa:	6a1b      	ldr	r3, [r3, #32]
10000afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b04:	d055      	beq.n	10000bb2 <HAL_RCC_OscConfig+0x1fe>
10000b06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b0c:	f003 0307 	and.w	r3, r3, #7
10000b10:	2b00      	cmp	r3, #0
10000b12:	d107      	bne.n	10000b24 <HAL_RCC_OscConfig+0x170>
10000b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b22:	d046      	beq.n	10000bb2 <HAL_RCC_OscConfig+0x1fe>
10000b24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000b2a:	f003 0303 	and.w	r3, r3, #3
10000b2e:	2b00      	cmp	r3, #0
10000b30:	d107      	bne.n	10000b42 <HAL_RCC_OscConfig+0x18e>
10000b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b40:	d037      	beq.n	10000bb2 <HAL_RCC_OscConfig+0x1fe>
10000b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000b48:	f003 0303 	and.w	r3, r3, #3
10000b4c:	2b00      	cmp	r3, #0
10000b4e:	d10f      	bne.n	10000b70 <HAL_RCC_OscConfig+0x1bc>
10000b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000b58:	f003 0302 	and.w	r3, r3, #2
10000b5c:	2b02      	cmp	r3, #2
10000b5e:	d028      	beq.n	10000bb2 <HAL_RCC_OscConfig+0x1fe>
10000b60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000b68:	f003 0302 	and.w	r3, r3, #2
10000b6c:	2b02      	cmp	r3, #2
10000b6e:	d020      	beq.n	10000bb2 <HAL_RCC_OscConfig+0x1fe>
10000b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b74:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000b78:	f003 0303 	and.w	r3, r3, #3
10000b7c:	2b00      	cmp	r3, #0
10000b7e:	d107      	bne.n	10000b90 <HAL_RCC_OscConfig+0x1dc>
10000b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b84:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000b88:	f003 0302 	and.w	r3, r3, #2
10000b8c:	2b02      	cmp	r3, #2
10000b8e:	d010      	beq.n	10000bb2 <HAL_RCC_OscConfig+0x1fe>
10000b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b94:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000b98:	f003 0303 	and.w	r3, r3, #3
10000b9c:	2b00      	cmp	r3, #0
10000b9e:	f040 8088 	bne.w	10000cb2 <HAL_RCC_OscConfig+0x2fe>
10000ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ba6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000baa:	f003 0302 	and.w	r3, r3, #2
10000bae:	2b02      	cmp	r3, #2
10000bb0:	d17f      	bne.n	10000cb2 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bb6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000bba:	f003 0301 	and.w	r3, r3, #1
10000bbe:	2b01      	cmp	r3, #1
10000bc0:	d105      	bne.n	10000bce <HAL_RCC_OscConfig+0x21a>
10000bc2:	687b      	ldr	r3, [r7, #4]
10000bc4:	68db      	ldr	r3, [r3, #12]
10000bc6:	2b01      	cmp	r3, #1
10000bc8:	d001      	beq.n	10000bce <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000bca:	2301      	movs	r3, #1
10000bcc:	e21e      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bd2:	699b      	ldr	r3, [r3, #24]
10000bd4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000bd8:	687b      	ldr	r3, [r7, #4]
10000bda:	691b      	ldr	r3, [r3, #16]
10000bdc:	021b      	lsls	r3, r3, #8
10000bde:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000be2:	4313      	orrs	r3, r2
10000be4:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000bec:	f003 0303 	and.w	r3, r3, #3
10000bf0:	2b00      	cmp	r3, #0
10000bf2:	d10f      	bne.n	10000c14 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000bfc:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000c00:	2b02      	cmp	r3, #2
10000c02:	d047      	beq.n	10000c94 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000c04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000c0c:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000c10:	2b02      	cmp	r3, #2
10000c12:	d03f      	beq.n	10000c94 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c18:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000c1c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000c20:	2b00      	cmp	r3, #0
10000c22:	d107      	bne.n	10000c34 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000c2c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000c30:	2b02      	cmp	r3, #2
10000c32:	d02f      	beq.n	10000c94 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000c34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c38:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000c3c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000c40:	2b00      	cmp	r3, #0
10000c42:	d107      	bne.n	10000c54 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000c4c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000c50:	2b02      	cmp	r3, #2
10000c52:	d01f      	beq.n	10000c94 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000c54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c58:	699b      	ldr	r3, [r3, #24]
10000c5a:	f023 0203 	bic.w	r2, r3, #3
10000c5e:	687b      	ldr	r3, [r7, #4]
10000c60:	695b      	ldr	r3, [r3, #20]
10000c62:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000c66:	4313      	orrs	r3, r2
10000c68:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000c6a:	f7ff fbc1 	bl	100003f0 <HAL_GetTick>
10000c6e:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000c70:	e008      	b.n	10000c84 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000c72:	f7ff fbbd 	bl	100003f0 <HAL_GetTick>
10000c76:	4602      	mov	r2, r0
10000c78:	68bb      	ldr	r3, [r7, #8]
10000c7a:	1ad3      	subs	r3, r2, r3
10000c7c:	2b64      	cmp	r3, #100	; 0x64
10000c7e:	d901      	bls.n	10000c84 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000c80:	2303      	movs	r3, #3
10000c82:	e1c3      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000c84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c88:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000c8c:	f003 0304 	and.w	r3, r3, #4
10000c90:	2b04      	cmp	r3, #4
10000c92:	d1ee      	bne.n	10000c72 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000c94:	f001 f809 	bl	10001caa <HAL_RCC_GetSystemCoreClockFreq>
10000c98:	4603      	mov	r3, r0
10000c9a:	4ab3      	ldr	r2, [pc, #716]	; (10000f68 <HAL_RCC_OscConfig+0x5b4>)
10000c9c:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000c9e:	4bb3      	ldr	r3, [pc, #716]	; (10000f6c <HAL_RCC_OscConfig+0x5b8>)
10000ca0:	681b      	ldr	r3, [r3, #0]
10000ca2:	4618      	mov	r0, r3
10000ca4:	f7ff fb5a 	bl	1000035c <HAL_InitTick>
10000ca8:	4603      	mov	r3, r0
10000caa:	2b00      	cmp	r3, #0
10000cac:	d069      	beq.n	10000d82 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000cae:	2301      	movs	r3, #1
10000cb0:	e1ac      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000cb2:	687b      	ldr	r3, [r7, #4]
10000cb4:	68db      	ldr	r3, [r3, #12]
10000cb6:	2b00      	cmp	r3, #0
10000cb8:	d049      	beq.n	10000d4e <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000cba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cbe:	68db      	ldr	r3, [r3, #12]
10000cc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000cc4:	f043 0301 	orr.w	r3, r3, #1
10000cc8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000cca:	f7ff fb91 	bl	100003f0 <HAL_GetTick>
10000cce:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000cd0:	e008      	b.n	10000ce4 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000cd2:	f7ff fb8d 	bl	100003f0 <HAL_GetTick>
10000cd6:	4602      	mov	r2, r0
10000cd8:	68bb      	ldr	r3, [r7, #8]
10000cda:	1ad3      	subs	r3, r2, r3
10000cdc:	2b64      	cmp	r3, #100	; 0x64
10000cde:	d901      	bls.n	10000ce4 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000ce0:	2303      	movs	r3, #3
10000ce2:	e193      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ce8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000cec:	f003 0301 	and.w	r3, r3, #1
10000cf0:	2b01      	cmp	r3, #1
10000cf2:	d1ee      	bne.n	10000cd2 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000cf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cf8:	699b      	ldr	r3, [r3, #24]
10000cfa:	f023 0203 	bic.w	r2, r3, #3
10000cfe:	687b      	ldr	r3, [r7, #4]
10000d00:	695b      	ldr	r3, [r3, #20]
10000d02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000d06:	4313      	orrs	r3, r2
10000d08:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000d0a:	f7ff fb71 	bl	100003f0 <HAL_GetTick>
10000d0e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d10:	e008      	b.n	10000d24 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d12:	f7ff fb6d 	bl	100003f0 <HAL_GetTick>
10000d16:	4602      	mov	r2, r0
10000d18:	68bb      	ldr	r3, [r7, #8]
10000d1a:	1ad3      	subs	r3, r2, r3
10000d1c:	2b64      	cmp	r3, #100	; 0x64
10000d1e:	d901      	bls.n	10000d24 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000d20:	2303      	movs	r3, #3
10000d22:	e173      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d28:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d2c:	f003 0304 	and.w	r3, r3, #4
10000d30:	2b04      	cmp	r3, #4
10000d32:	d1ee      	bne.n	10000d12 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000d34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d38:	699b      	ldr	r3, [r3, #24]
10000d3a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000d3e:	687b      	ldr	r3, [r7, #4]
10000d40:	691b      	ldr	r3, [r3, #16]
10000d42:	021b      	lsls	r3, r3, #8
10000d44:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000d48:	4313      	orrs	r3, r2
10000d4a:	618b      	str	r3, [r1, #24]
10000d4c:	e01a      	b.n	10000d84 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d52:	2201      	movs	r2, #1
10000d54:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000d56:	f7ff fb4b 	bl	100003f0 <HAL_GetTick>
10000d5a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000d5c:	e008      	b.n	10000d70 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d5e:	f7ff fb47 	bl	100003f0 <HAL_GetTick>
10000d62:	4602      	mov	r2, r0
10000d64:	68bb      	ldr	r3, [r7, #8]
10000d66:	1ad3      	subs	r3, r2, r3
10000d68:	2b64      	cmp	r3, #100	; 0x64
10000d6a:	d901      	bls.n	10000d70 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000d6c:	2303      	movs	r3, #3
10000d6e:	e14d      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d78:	f003 0301 	and.w	r3, r3, #1
10000d7c:	2b01      	cmp	r3, #1
10000d7e:	d0ee      	beq.n	10000d5e <HAL_RCC_OscConfig+0x3aa>
10000d80:	e000      	b.n	10000d84 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000d82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000d84:	687b      	ldr	r3, [r7, #4]
10000d86:	681b      	ldr	r3, [r3, #0]
10000d88:	f003 0310 	and.w	r3, r3, #16
10000d8c:	2b00      	cmp	r3, #0
10000d8e:	f000 8091 	beq.w	10000eb4 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d96:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000d9a:	f003 0303 	and.w	r3, r3, #3
10000d9e:	2b02      	cmp	r3, #2
10000da0:	d107      	bne.n	10000db2 <HAL_RCC_OscConfig+0x3fe>
10000da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000da6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000daa:	f003 0302 	and.w	r3, r3, #2
10000dae:	2b02      	cmp	r3, #2
10000db0:	d01e      	beq.n	10000df0 <HAL_RCC_OscConfig+0x43c>
10000db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000db8:	f003 0303 	and.w	r3, r3, #3
10000dbc:	2b02      	cmp	r3, #2
10000dbe:	d107      	bne.n	10000dd0 <HAL_RCC_OscConfig+0x41c>
10000dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000dce:	d00f      	beq.n	10000df0 <HAL_RCC_OscConfig+0x43c>
10000dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dd4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000dd8:	f003 0303 	and.w	r3, r3, #3
10000ddc:	2b02      	cmp	r3, #2
10000dde:	d122      	bne.n	10000e26 <HAL_RCC_OscConfig+0x472>
10000de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000de4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000de8:	f003 0302 	and.w	r3, r3, #2
10000dec:	2b02      	cmp	r3, #2
10000dee:	d11a      	bne.n	10000e26 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000df0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000df4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000df8:	f003 0310 	and.w	r3, r3, #16
10000dfc:	2b10      	cmp	r3, #16
10000dfe:	d105      	bne.n	10000e0c <HAL_RCC_OscConfig+0x458>
10000e00:	687b      	ldr	r3, [r7, #4]
10000e02:	69db      	ldr	r3, [r3, #28]
10000e04:	2b10      	cmp	r3, #16
10000e06:	d001      	beq.n	10000e0c <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000e08:	2301      	movs	r3, #1
10000e0a:	e0ff      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000e0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e10:	69db      	ldr	r3, [r3, #28]
10000e12:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000e16:	687b      	ldr	r3, [r7, #4]
10000e18:	6a1b      	ldr	r3, [r3, #32]
10000e1a:	021b      	lsls	r3, r3, #8
10000e1c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e20:	4313      	orrs	r3, r2
10000e22:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000e24:	e046      	b.n	10000eb4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000e26:	687b      	ldr	r3, [r7, #4]
10000e28:	69db      	ldr	r3, [r3, #28]
10000e2a:	2b00      	cmp	r3, #0
10000e2c:	d029      	beq.n	10000e82 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e32:	68db      	ldr	r3, [r3, #12]
10000e34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e38:	f043 0310 	orr.w	r3, r3, #16
10000e3c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e3e:	f7ff fad7 	bl	100003f0 <HAL_GetTick>
10000e42:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000e44:	e008      	b.n	10000e58 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000e46:	f7ff fad3 	bl	100003f0 <HAL_GetTick>
10000e4a:	4602      	mov	r2, r0
10000e4c:	68bb      	ldr	r3, [r7, #8]
10000e4e:	1ad3      	subs	r3, r2, r3
10000e50:	2b64      	cmp	r3, #100	; 0x64
10000e52:	d901      	bls.n	10000e58 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000e54:	2303      	movs	r3, #3
10000e56:	e0d9      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000e58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e5c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e60:	f003 0310 	and.w	r3, r3, #16
10000e64:	2b10      	cmp	r3, #16
10000e66:	d1ee      	bne.n	10000e46 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e6c:	69db      	ldr	r3, [r3, #28]
10000e6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000e72:	687b      	ldr	r3, [r7, #4]
10000e74:	6a1b      	ldr	r3, [r3, #32]
10000e76:	021b      	lsls	r3, r3, #8
10000e78:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e7c:	4313      	orrs	r3, r2
10000e7e:	61cb      	str	r3, [r1, #28]
10000e80:	e018      	b.n	10000eb4 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000e82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e86:	2210      	movs	r2, #16
10000e88:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e8a:	f7ff fab1 	bl	100003f0 <HAL_GetTick>
10000e8e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000e90:	e008      	b.n	10000ea4 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000e92:	f7ff faad 	bl	100003f0 <HAL_GetTick>
10000e96:	4602      	mov	r2, r0
10000e98:	68bb      	ldr	r3, [r7, #8]
10000e9a:	1ad3      	subs	r3, r2, r3
10000e9c:	2b64      	cmp	r3, #100	; 0x64
10000e9e:	d901      	bls.n	10000ea4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000ea0:	2303      	movs	r3, #3
10000ea2:	e0b3      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ea8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000eac:	f003 0310 	and.w	r3, r3, #16
10000eb0:	2b10      	cmp	r3, #16
10000eb2:	d0ee      	beq.n	10000e92 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000eb4:	687b      	ldr	r3, [r7, #4]
10000eb6:	681b      	ldr	r3, [r3, #0]
10000eb8:	f003 0308 	and.w	r3, r3, #8
10000ebc:	2b00      	cmp	r3, #0
10000ebe:	d042      	beq.n	10000f46 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000ec0:	687b      	ldr	r3, [r7, #4]
10000ec2:	699b      	ldr	r3, [r3, #24]
10000ec4:	2b00      	cmp	r3, #0
10000ec6:	d01f      	beq.n	10000f08 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10000ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ecc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000ed4:	f043 0301 	orr.w	r3, r3, #1
10000ed8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000edc:	f7ff fa88 	bl	100003f0 <HAL_GetTick>
10000ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000ee2:	e008      	b.n	10000ef6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000ee4:	f7ff fa84 	bl	100003f0 <HAL_GetTick>
10000ee8:	4602      	mov	r2, r0
10000eea:	68bb      	ldr	r3, [r7, #8]
10000eec:	1ad3      	subs	r3, r2, r3
10000eee:	2b64      	cmp	r3, #100	; 0x64
10000ef0:	d901      	bls.n	10000ef6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10000ef2:	2303      	movs	r3, #3
10000ef4:	e08a      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000efa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000efe:	f003 0302 	and.w	r3, r3, #2
10000f02:	2b02      	cmp	r3, #2
10000f04:	d1ee      	bne.n	10000ee4 <HAL_RCC_OscConfig+0x530>
10000f06:	e01e      	b.n	10000f46 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10000f08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f0c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f14:	f023 0301 	bic.w	r3, r3, #1
10000f18:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000f1c:	f7ff fa68 	bl	100003f0 <HAL_GetTick>
10000f20:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000f22:	e008      	b.n	10000f36 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000f24:	f7ff fa64 	bl	100003f0 <HAL_GetTick>
10000f28:	4602      	mov	r2, r0
10000f2a:	68bb      	ldr	r3, [r7, #8]
10000f2c:	1ad3      	subs	r3, r2, r3
10000f2e:	2b64      	cmp	r3, #100	; 0x64
10000f30:	d901      	bls.n	10000f36 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10000f32:	2303      	movs	r3, #3
10000f34:	e06a      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f3a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000f3e:	f003 0302 	and.w	r3, r3, #2
10000f42:	2b02      	cmp	r3, #2
10000f44:	d0ee      	beq.n	10000f24 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10000f46:	687b      	ldr	r3, [r7, #4]
10000f48:	681b      	ldr	r3, [r3, #0]
10000f4a:	f003 0304 	and.w	r3, r3, #4
10000f4e:	2b00      	cmp	r3, #0
10000f50:	d02b      	beq.n	10000faa <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000f52:	4b07      	ldr	r3, [pc, #28]	; (10000f70 <HAL_RCC_OscConfig+0x5bc>)
10000f54:	681b      	ldr	r3, [r3, #0]
10000f56:	4a06      	ldr	r2, [pc, #24]	; (10000f70 <HAL_RCC_OscConfig+0x5bc>)
10000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10000f5e:	f7ff fa47 	bl	100003f0 <HAL_GetTick>
10000f62:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000f64:	e00f      	b.n	10000f86 <HAL_RCC_OscConfig+0x5d2>
10000f66:	bf00      	nop
10000f68:	10020000 	.word	0x10020000
10000f6c:	10020004 	.word	0x10020004
10000f70:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10000f74:	f7ff fa3c 	bl	100003f0 <HAL_GetTick>
10000f78:	4602      	mov	r2, r0
10000f7a:	68bb      	ldr	r3, [r7, #8]
10000f7c:	1ad3      	subs	r3, r2, r3
10000f7e:	2b64      	cmp	r3, #100	; 0x64
10000f80:	d901      	bls.n	10000f86 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10000f82:	2303      	movs	r3, #3
10000f84:	e042      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000f86:	4b23      	ldr	r3, [pc, #140]	; (10001014 <HAL_RCC_OscConfig+0x660>)
10000f88:	681b      	ldr	r3, [r3, #0]
10000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000f8e:	2b00      	cmp	r3, #0
10000f90:	d0f0      	beq.n	10000f74 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10000f92:	687b      	ldr	r3, [r7, #4]
10000f94:	689b      	ldr	r3, [r3, #8]
10000f96:	4618      	mov	r0, r3
10000f98:	f000 f8a9 	bl	100010ee <HAL_RCC_LSEConfig>
10000f9c:	4603      	mov	r3, r0
10000f9e:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10000fa0:	7bfb      	ldrb	r3, [r7, #15]
10000fa2:	2b00      	cmp	r3, #0
10000fa4:	d001      	beq.n	10000faa <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10000fa6:	7bfb      	ldrb	r3, [r7, #15]
10000fa8:	e030      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10000faa:	687b      	ldr	r3, [r7, #4]
10000fac:	3324      	adds	r3, #36	; 0x24
10000fae:	4618      	mov	r0, r3
10000fb0:	f000 f91a 	bl	100011e8 <RCC_PLL1_Config>
10000fb4:	4603      	mov	r3, r0
10000fb6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000fb8:	7bfb      	ldrb	r3, [r7, #15]
10000fba:	2b00      	cmp	r3, #0
10000fbc:	d001      	beq.n	10000fc2 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10000fbe:	7bfb      	ldrb	r3, [r7, #15]
10000fc0:	e024      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10000fc2:	687b      	ldr	r3, [r7, #4]
10000fc4:	3360      	adds	r3, #96	; 0x60
10000fc6:	4618      	mov	r0, r3
10000fc8:	f000 fecc 	bl	10001d64 <RCCEx_PLL2_Config>
10000fcc:	4603      	mov	r3, r0
10000fce:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000fd0:	7bfb      	ldrb	r3, [r7, #15]
10000fd2:	2b00      	cmp	r3, #0
10000fd4:	d001      	beq.n	10000fda <HAL_RCC_OscConfig+0x626>
  {
    return result;
10000fd6:	7bfb      	ldrb	r3, [r7, #15]
10000fd8:	e018      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10000fda:	687b      	ldr	r3, [r7, #4]
10000fdc:	339c      	adds	r3, #156	; 0x9c
10000fde:	4618      	mov	r0, r3
10000fe0:	f001 f842 	bl	10002068 <RCCEx_PLL3_Config>
10000fe4:	4603      	mov	r3, r0
10000fe6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000fe8:	7bfb      	ldrb	r3, [r7, #15]
10000fea:	2b00      	cmp	r3, #0
10000fec:	d001      	beq.n	10000ff2 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10000fee:	7bfb      	ldrb	r3, [r7, #15]
10000ff0:	e00c      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10000ff2:	687b      	ldr	r3, [r7, #4]
10000ff4:	33d8      	adds	r3, #216	; 0xd8
10000ff6:	4618      	mov	r0, r3
10000ff8:	f001 f9a0 	bl	1000233c <RCCEx_PLL4_Config>
10000ffc:	4603      	mov	r3, r0
10000ffe:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001000:	7bfb      	ldrb	r3, [r7, #15]
10001002:	2b00      	cmp	r3, #0
10001004:	d001      	beq.n	1000100a <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001006:	7bfb      	ldrb	r3, [r7, #15]
10001008:	e000      	b.n	1000100c <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
1000100a:	2300      	movs	r3, #0
}
1000100c:	4618      	mov	r0, r3
1000100e:	3710      	adds	r7, #16
10001010:	46bd      	mov	sp, r7
10001012:	bd80      	pop	{r7, pc}
10001014:	50001000 	.word	0x50001000

10001018 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001018:	b580      	push	{r7, lr}
1000101a:	b084      	sub	sp, #16
1000101c:	af00      	add	r7, sp, #0
1000101e:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10001020:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001024:	f44f 7280 	mov.w	r2, #256	; 0x100
10001028:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000102a:	f7ff f9e1 	bl	100003f0 <HAL_GetTick>
1000102e:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001030:	e008      	b.n	10001044 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001032:	f7ff f9dd 	bl	100003f0 <HAL_GetTick>
10001036:	4602      	mov	r2, r0
10001038:	68fb      	ldr	r3, [r7, #12]
1000103a:	1ad3      	subs	r3, r2, r3
1000103c:	2b64      	cmp	r3, #100	; 0x64
1000103e:	d901      	bls.n	10001044 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10001040:	2303      	movs	r3, #3
10001042:	e050      	b.n	100010e6 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001048:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001054:	d0ed      	beq.n	10001032 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10001056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000105a:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000105e:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10001060:	687b      	ldr	r3, [r7, #4]
10001062:	2b00      	cmp	r3, #0
10001064:	d03e      	beq.n	100010e4 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10001066:	687b      	ldr	r3, [r7, #4]
10001068:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
1000106c:	d108      	bne.n	10001080 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000106e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001072:	68db      	ldr	r3, [r3, #12]
10001074:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1000107c:	60d3      	str	r3, [r2, #12]
1000107e:	e013      	b.n	100010a8 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10001080:	687b      	ldr	r3, [r7, #4]
10001082:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10001086:	d10f      	bne.n	100010a8 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001088:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000108c:	68db      	ldr	r3, [r3, #12]
1000108e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10001096:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000109c:	68db      	ldr	r3, [r3, #12]
1000109e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100010a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100010a6:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100010a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010ac:	68db      	ldr	r3, [r3, #12]
100010ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100010b6:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100010b8:	f7ff f99a 	bl	100003f0 <HAL_GetTick>
100010bc:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100010be:	e008      	b.n	100010d2 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100010c0:	f7ff f996 	bl	100003f0 <HAL_GetTick>
100010c4:	4602      	mov	r2, r0
100010c6:	68fb      	ldr	r3, [r7, #12]
100010c8:	1ad3      	subs	r3, r2, r3
100010ca:	2b64      	cmp	r3, #100	; 0x64
100010cc:	d901      	bls.n	100010d2 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100010ce:	2303      	movs	r3, #3
100010d0:	e009      	b.n	100010e6 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100010d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010d6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
100010de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100010e2:	d1ed      	bne.n	100010c0 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
100010e4:	2300      	movs	r3, #0
}
100010e6:	4618      	mov	r0, r3
100010e8:	3710      	adds	r7, #16
100010ea:	46bd      	mov	sp, r7
100010ec:	bd80      	pop	{r7, pc}

100010ee <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
100010ee:	b580      	push	{r7, lr}
100010f0:	b084      	sub	sp, #16
100010f2:	af00      	add	r7, sp, #0
100010f4:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100010f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100010fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001102:	f023 0301 	bic.w	r3, r3, #1
10001106:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000110a:	f7ff f971 	bl	100003f0 <HAL_GetTick>
1000110e:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001110:	e00a      	b.n	10001128 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001112:	f7ff f96d 	bl	100003f0 <HAL_GetTick>
10001116:	4602      	mov	r2, r0
10001118:	68fb      	ldr	r3, [r7, #12]
1000111a:	1ad3      	subs	r3, r2, r3
1000111c:	f241 3288 	movw	r2, #5000	; 0x1388
10001120:	4293      	cmp	r3, r2
10001122:	d901      	bls.n	10001128 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001124:	2303      	movs	r3, #3
10001126:	e05b      	b.n	100011e0 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000112c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001130:	f003 0304 	and.w	r3, r3, #4
10001134:	2b04      	cmp	r3, #4
10001136:	d0ec      	beq.n	10001112 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001138:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000113c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001140:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001144:	f023 030a 	bic.w	r3, r3, #10
10001148:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
1000114c:	687b      	ldr	r3, [r7, #4]
1000114e:	2b00      	cmp	r3, #0
10001150:	d045      	beq.n	100011de <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10001152:	687b      	ldr	r3, [r7, #4]
10001154:	2b03      	cmp	r3, #3
10001156:	d10a      	bne.n	1000116e <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000115c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001164:	f043 0302 	orr.w	r3, r3, #2
10001168:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
1000116c:	e016      	b.n	1000119c <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000116e:	687b      	ldr	r3, [r7, #4]
10001170:	2b0b      	cmp	r3, #11
10001172:	d113      	bne.n	1000119c <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10001174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001178:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000117c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001180:	f043 0308 	orr.w	r3, r3, #8
10001184:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001188:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000118c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001190:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001194:	f043 0302 	orr.w	r3, r3, #2
10001198:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000119c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100011a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011a8:	f043 0301 	orr.w	r3, r3, #1
100011ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100011b0:	f7ff f91e 	bl	100003f0 <HAL_GetTick>
100011b4:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100011b6:	e00a      	b.n	100011ce <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100011b8:	f7ff f91a 	bl	100003f0 <HAL_GetTick>
100011bc:	4602      	mov	r2, r0
100011be:	68fb      	ldr	r3, [r7, #12]
100011c0:	1ad3      	subs	r3, r2, r3
100011c2:	f241 3288 	movw	r2, #5000	; 0x1388
100011c6:	4293      	cmp	r3, r2
100011c8:	d901      	bls.n	100011ce <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100011ca:	2303      	movs	r3, #3
100011cc:	e008      	b.n	100011e0 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100011ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100011d6:	f003 0304 	and.w	r3, r3, #4
100011da:	2b04      	cmp	r3, #4
100011dc:	d1ec      	bne.n	100011b8 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100011de:	2300      	movs	r3, #0
}
100011e0:	4618      	mov	r0, r3
100011e2:	3710      	adds	r7, #16
100011e4:	46bd      	mov	sp, r7
100011e6:	bd80      	pop	{r7, pc}

100011e8 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
100011e8:	b580      	push	{r7, lr}
100011ea:	b084      	sub	sp, #16
100011ec:	af00      	add	r7, sp, #0
100011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
100011f0:	687b      	ldr	r3, [r7, #4]
100011f2:	681b      	ldr	r3, [r3, #0]
100011f4:	2b00      	cmp	r3, #0
100011f6:	f000 8174 	beq.w	100014e2 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100011fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011fe:	6a1b      	ldr	r3, [r3, #32]
10001200:	f003 0303 	and.w	r3, r3, #3
10001204:	2b02      	cmp	r3, #2
10001206:	d108      	bne.n	1000121a <RCC_PLL1_Config+0x32>
10001208:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000120c:	6a1b      	ldr	r3, [r3, #32]
1000120e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001216:	f000 8162 	beq.w	100014de <RCC_PLL1_Config+0x2f6>
1000121a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000121e:	6a1b      	ldr	r3, [r3, #32]
10001220:	f003 0303 	and.w	r3, r3, #3
10001224:	2b03      	cmp	r3, #3
10001226:	d108      	bne.n	1000123a <RCC_PLL1_Config+0x52>
10001228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000122c:	6a1b      	ldr	r3, [r3, #32]
1000122e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001236:	f000 8152 	beq.w	100014de <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
1000123a:	687b      	ldr	r3, [r7, #4]
1000123c:	681b      	ldr	r3, [r3, #0]
1000123e:	2b02      	cmp	r3, #2
10001240:	f040 8123 	bne.w	1000148a <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000124c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000125c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001260:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001264:	f023 0301 	bic.w	r3, r3, #1
10001268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000126c:	f7ff f8c0 	bl	100003f0 <HAL_GetTick>
10001270:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001272:	e008      	b.n	10001286 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001274:	f7ff f8bc 	bl	100003f0 <HAL_GetTick>
10001278:	4602      	mov	r2, r0
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	1ad3      	subs	r3, r2, r3
1000127e:	2b64      	cmp	r3, #100	; 0x64
10001280:	d901      	bls.n	10001286 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001282:	2303      	movs	r3, #3
10001284:	e12e      	b.n	100014e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000128a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000128e:	f003 0302 	and.w	r3, r3, #2
10001292:	2b02      	cmp	r3, #2
10001294:	d0ee      	beq.n	10001274 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10001296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000129c:	f003 0307 	and.w	r3, r3, #7
100012a0:	2b02      	cmp	r3, #2
100012a2:	d112      	bne.n	100012ca <RCC_PLL1_Config+0xe2>
100012a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100012aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100012b2:	d10a      	bne.n	100012ca <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100012b4:	687b      	ldr	r3, [r7, #4]
100012b6:	685a      	ldr	r2, [r3, #4]
100012b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100012be:	f003 0303 	and.w	r3, r3, #3
100012c2:	429a      	cmp	r2, r3
100012c4:	d00c      	beq.n	100012e0 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100012c6:	2301      	movs	r3, #1
100012c8:	e10c      	b.n	100014e4 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100012ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100012d0:	f023 0203 	bic.w	r2, r3, #3
100012d4:	687b      	ldr	r3, [r7, #4]
100012d6:	685b      	ldr	r3, [r3, #4]
100012d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100012dc:	4313      	orrs	r3, r2
100012de:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100012e0:	e008      	b.n	100012f4 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100012e2:	f7ff f885 	bl	100003f0 <HAL_GetTick>
100012e6:	4602      	mov	r2, r0
100012e8:	68fb      	ldr	r3, [r7, #12]
100012ea:	1ad3      	subs	r3, r2, r3
100012ec:	2b64      	cmp	r3, #100	; 0x64
100012ee:	d901      	bls.n	100012f4 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
100012f0:	2303      	movs	r3, #3
100012f2:	e0f7      	b.n	100014e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100012f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100012fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001302:	d1ee      	bne.n	100012e2 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001308:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
1000130c:	4b77      	ldr	r3, [pc, #476]	; (100014ec <RCC_PLL1_Config+0x304>)
1000130e:	4013      	ands	r3, r2
10001310:	687a      	ldr	r2, [r7, #4]
10001312:	68d2      	ldr	r2, [r2, #12]
10001314:	1e51      	subs	r1, r2, #1
10001316:	687a      	ldr	r2, [r7, #4]
10001318:	6892      	ldr	r2, [r2, #8]
1000131a:	3a01      	subs	r2, #1
1000131c:	0412      	lsls	r2, r2, #16
1000131e:	430a      	orrs	r2, r1
10001320:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001324:	4313      	orrs	r3, r2
10001326:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
1000132a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10001332:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001336:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000133a:	687a      	ldr	r2, [r7, #4]
1000133c:	6912      	ldr	r2, [r2, #16]
1000133e:	1e51      	subs	r1, r2, #1
10001340:	687a      	ldr	r2, [r7, #4]
10001342:	6952      	ldr	r2, [r2, #20]
10001344:	3a01      	subs	r2, #1
10001346:	0212      	lsls	r2, r2, #8
10001348:	4311      	orrs	r1, r2
1000134a:	687a      	ldr	r2, [r7, #4]
1000134c:	6992      	ldr	r2, [r2, #24]
1000134e:	3a01      	subs	r2, #1
10001350:	0412      	lsls	r2, r2, #16
10001352:	430a      	orrs	r2, r1
10001354:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001358:	4313      	orrs	r3, r2
1000135a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000135e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000136e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10001372:	687b      	ldr	r3, [r7, #4]
10001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001376:	2b02      	cmp	r3, #2
10001378:	d003      	beq.n	10001382 <RCC_PLL1_Config+0x19a>
1000137a:	687b      	ldr	r3, [r7, #4]
1000137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000137e:	2b00      	cmp	r3, #0
10001380:	d10c      	bne.n	1000139c <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10001382:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000138a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000138e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001392:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001396:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1000139a:	e00f      	b.n	100013bc <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
1000139c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100013a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100013a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100013ac:	687a      	ldr	r2, [r7, #4]
100013ae:	6a12      	ldr	r2, [r2, #32]
100013b0:	00d2      	lsls	r2, r2, #3
100013b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100013b6:	4313      	orrs	r3, r2
100013b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100013bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100013c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100013cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100013d0:	687b      	ldr	r3, [r7, #4]
100013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100013d4:	2b02      	cmp	r3, #2
100013d6:	d124      	bne.n	10001422 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100013d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100013e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100013e4:	687b      	ldr	r3, [r7, #4]
100013e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100013e8:	687b      	ldr	r3, [r7, #4]
100013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100013ec:	4319      	orrs	r1, r3
100013ee:	687b      	ldr	r3, [r7, #4]
100013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100013f2:	4319      	orrs	r1, r3
100013f4:	687b      	ldr	r3, [r7, #4]
100013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100013f8:	4319      	orrs	r1, r3
100013fa:	687b      	ldr	r3, [r7, #4]
100013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100013fe:	041b      	lsls	r3, r3, #16
10001400:	430b      	orrs	r3, r1
10001402:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001406:	4313      	orrs	r3, r2
10001408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
1000140c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001418:	f043 0304 	orr.w	r3, r3, #4
1000141c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10001420:	e009      	b.n	10001436 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10001422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000142a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000142e:	f023 0304 	bic.w	r3, r3, #4
10001432:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10001436:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000143a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000143e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001442:	f043 0301 	orr.w	r3, r3, #1
10001446:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000144a:	f7fe ffd1 	bl	100003f0 <HAL_GetTick>
1000144e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001450:	e008      	b.n	10001464 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001452:	f7fe ffcd 	bl	100003f0 <HAL_GetTick>
10001456:	4602      	mov	r2, r0
10001458:	68fb      	ldr	r3, [r7, #12]
1000145a:	1ad3      	subs	r3, r2, r3
1000145c:	2b64      	cmp	r3, #100	; 0x64
1000145e:	d901      	bls.n	10001464 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10001460:	2303      	movs	r3, #3
10001462:	e03f      	b.n	100014e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001464:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000146c:	f003 0302 	and.w	r3, r3, #2
10001470:	2b02      	cmp	r3, #2
10001472:	d1ee      	bne.n	10001452 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000147c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001480:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001488:	e02b      	b.n	100014e2 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000148a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000148e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001492:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000149a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000149e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014aa:	f023 0301 	bic.w	r3, r3, #1
100014ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100014b2:	f7fe ff9d 	bl	100003f0 <HAL_GetTick>
100014b6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100014b8:	e008      	b.n	100014cc <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100014ba:	f7fe ff99 	bl	100003f0 <HAL_GetTick>
100014be:	4602      	mov	r2, r0
100014c0:	68fb      	ldr	r3, [r7, #12]
100014c2:	1ad3      	subs	r3, r2, r3
100014c4:	2b64      	cmp	r3, #100	; 0x64
100014c6:	d901      	bls.n	100014cc <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100014c8:	2303      	movs	r3, #3
100014ca:	e00b      	b.n	100014e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100014cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014d4:	f003 0302 	and.w	r3, r3, #2
100014d8:	2b02      	cmp	r3, #2
100014da:	d0ee      	beq.n	100014ba <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100014dc:	e001      	b.n	100014e2 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100014de:	2301      	movs	r3, #1
100014e0:	e000      	b.n	100014e4 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100014e2:	2300      	movs	r3, #0

}
100014e4:	4618      	mov	r0, r3
100014e6:	3710      	adds	r7, #16
100014e8:	46bd      	mov	sp, r7
100014ea:	bd80      	pop	{r7, pc}
100014ec:	ffc0fe00 	.word	0xffc0fe00

100014f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100014f0:	b580      	push	{r7, lr}
100014f2:	b084      	sub	sp, #16
100014f4:	af00      	add	r7, sp, #0
100014f6:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100014f8:	2300      	movs	r3, #0
100014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100014fc:	687b      	ldr	r3, [r7, #4]
100014fe:	2b00      	cmp	r3, #0
10001500:	d101      	bne.n	10001506 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10001502:	2301      	movs	r3, #1
10001504:	e102      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001506:	687b      	ldr	r3, [r7, #4]
10001508:	681b      	ldr	r3, [r3, #0]
1000150a:	f003 0301 	and.w	r3, r3, #1
1000150e:	2b00      	cmp	r3, #0
10001510:	d00b      	beq.n	1000152a <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10001512:	687b      	ldr	r3, [r7, #4]
10001514:	3304      	adds	r3, #4
10001516:	4618      	mov	r0, r3
10001518:	f000 f8fc 	bl	10001714 <RCC_MPUConfig>
1000151c:	4603      	mov	r3, r0
1000151e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001520:	7bfb      	ldrb	r3, [r7, #15]
10001522:	2b00      	cmp	r3, #0
10001524:	d001      	beq.n	1000152a <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001526:	7bfb      	ldrb	r3, [r7, #15]
10001528:	e0f0      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000152a:	687b      	ldr	r3, [r7, #4]
1000152c:	681b      	ldr	r3, [r3, #0]
1000152e:	f003 0302 	and.w	r3, r3, #2
10001532:	2b00      	cmp	r3, #0
10001534:	d00b      	beq.n	1000154e <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001536:	687b      	ldr	r3, [r7, #4]
10001538:	330c      	adds	r3, #12
1000153a:	4618      	mov	r0, r3
1000153c:	f000 f960 	bl	10001800 <RCC_AXISSConfig>
10001540:	4603      	mov	r3, r0
10001542:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001544:	7bfb      	ldrb	r3, [r7, #15]
10001546:	2b00      	cmp	r3, #0
10001548:	d001      	beq.n	1000154e <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
1000154a:	7bfb      	ldrb	r3, [r7, #15]
1000154c:	e0de      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000154e:	687b      	ldr	r3, [r7, #4]
10001550:	681b      	ldr	r3, [r3, #0]
10001552:	f003 0304 	and.w	r3, r3, #4
10001556:	2b00      	cmp	r3, #0
10001558:	d00b      	beq.n	10001572 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
1000155a:	687b      	ldr	r3, [r7, #4]
1000155c:	3314      	adds	r3, #20
1000155e:	4618      	mov	r0, r3
10001560:	f000 f9e6 	bl	10001930 <RCC_MCUConfig>
10001564:	4603      	mov	r3, r0
10001566:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001568:	7bfb      	ldrb	r3, [r7, #15]
1000156a:	2b00      	cmp	r3, #0
1000156c:	d001      	beq.n	10001572 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000156e:	7bfb      	ldrb	r3, [r7, #15]
10001570:	e0cc      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10001572:	687b      	ldr	r3, [r7, #4]
10001574:	681b      	ldr	r3, [r3, #0]
10001576:	f003 0308 	and.w	r3, r3, #8
1000157a:	2b00      	cmp	r3, #0
1000157c:	d020      	beq.n	100015c0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000157e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001584:	f023 0207 	bic.w	r2, r3, #7
10001588:	687b      	ldr	r3, [r7, #4]
1000158a:	69db      	ldr	r3, [r3, #28]
1000158c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001590:	4313      	orrs	r3, r2
10001592:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001594:	f7fe ff2c 	bl	100003f0 <HAL_GetTick>
10001598:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000159a:	e009      	b.n	100015b0 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000159c:	f7fe ff28 	bl	100003f0 <HAL_GetTick>
100015a0:	4602      	mov	r2, r0
100015a2:	68bb      	ldr	r3, [r7, #8]
100015a4:	1ad3      	subs	r3, r2, r3
100015a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100015aa:	d901      	bls.n	100015b0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100015ac:	2303      	movs	r3, #3
100015ae:	e0ad      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100015b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100015b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100015be:	d1ed      	bne.n	1000159c <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100015c0:	687b      	ldr	r3, [r7, #4]
100015c2:	681b      	ldr	r3, [r3, #0]
100015c4:	f003 0310 	and.w	r3, r3, #16
100015c8:	2b00      	cmp	r3, #0
100015ca:	d020      	beq.n	1000160e <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100015cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100015d2:	f023 0207 	bic.w	r2, r3, #7
100015d6:	687b      	ldr	r3, [r7, #4]
100015d8:	6a1b      	ldr	r3, [r3, #32]
100015da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100015de:	4313      	orrs	r3, r2
100015e0:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100015e2:	f7fe ff05 	bl	100003f0 <HAL_GetTick>
100015e6:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100015e8:	e009      	b.n	100015fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100015ea:	f7fe ff01 	bl	100003f0 <HAL_GetTick>
100015ee:	4602      	mov	r2, r0
100015f0:	68bb      	ldr	r3, [r7, #8]
100015f2:	1ad3      	subs	r3, r2, r3
100015f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100015f8:	d901      	bls.n	100015fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100015fa:	2303      	movs	r3, #3
100015fc:	e086      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100015fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000160c:	d1ed      	bne.n	100015ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000160e:	687b      	ldr	r3, [r7, #4]
10001610:	681b      	ldr	r3, [r3, #0]
10001612:	f003 0320 	and.w	r3, r3, #32
10001616:	2b00      	cmp	r3, #0
10001618:	d023      	beq.n	10001662 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000161a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000161e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001622:	f023 0207 	bic.w	r2, r3, #7
10001626:	687b      	ldr	r3, [r7, #4]
10001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000162a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000162e:	4313      	orrs	r3, r2
10001630:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001634:	f7fe fedc 	bl	100003f0 <HAL_GetTick>
10001638:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000163a:	e009      	b.n	10001650 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000163c:	f7fe fed8 	bl	100003f0 <HAL_GetTick>
10001640:	4602      	mov	r2, r0
10001642:	68bb      	ldr	r3, [r7, #8]
10001644:	1ad3      	subs	r3, r2, r3
10001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000164a:	d901      	bls.n	10001650 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
1000164c:	2303      	movs	r3, #3
1000164e:	e05d      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001650:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001654:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000165c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001660:	d1ec      	bne.n	1000163c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10001662:	687b      	ldr	r3, [r7, #4]
10001664:	681b      	ldr	r3, [r3, #0]
10001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000166a:	2b00      	cmp	r3, #0
1000166c:	d023      	beq.n	100016b6 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000166e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001672:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001676:	f023 0207 	bic.w	r2, r3, #7
1000167a:	687b      	ldr	r3, [r7, #4]
1000167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000167e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001682:	4313      	orrs	r3, r2
10001684:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001688:	f7fe feb2 	bl	100003f0 <HAL_GetTick>
1000168c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000168e:	e009      	b.n	100016a4 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001690:	f7fe feae 	bl	100003f0 <HAL_GetTick>
10001694:	4602      	mov	r2, r0
10001696:	68bb      	ldr	r3, [r7, #8]
10001698:	1ad3      	subs	r3, r2, r3
1000169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000169e:	d901      	bls.n	100016a4 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100016a0:	2303      	movs	r3, #3
100016a2:	e033      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100016a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016a8:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100016ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100016b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100016b4:	d1ec      	bne.n	10001690 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
100016be:	2b00      	cmp	r3, #0
100016c0:	d023      	beq.n	1000170a <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100016c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016c6:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100016ca:	f023 0207 	bic.w	r2, r3, #7
100016ce:	687b      	ldr	r3, [r7, #4]
100016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100016d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100016d6:	4313      	orrs	r3, r2
100016d8:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100016dc:	f7fe fe88 	bl	100003f0 <HAL_GetTick>
100016e0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100016e2:	e009      	b.n	100016f8 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016e4:	f7fe fe84 	bl	100003f0 <HAL_GetTick>
100016e8:	4602      	mov	r2, r0
100016ea:	68bb      	ldr	r3, [r7, #8]
100016ec:	1ad3      	subs	r3, r2, r3
100016ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100016f2:	d901      	bls.n	100016f8 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100016f4:	2303      	movs	r3, #3
100016f6:	e009      	b.n	1000170c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100016f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016fc:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001708:	d1ec      	bne.n	100016e4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
1000170a:	2300      	movs	r3, #0
}
1000170c:	4618      	mov	r0, r3
1000170e:	3710      	adds	r7, #16
10001710:	46bd      	mov	sp, r7
10001712:	bd80      	pop	{r7, pc}

10001714 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001714:	b580      	push	{r7, lr}
10001716:	b084      	sub	sp, #16
10001718:	af00      	add	r7, sp, #0
1000171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
1000171c:	687b      	ldr	r3, [r7, #4]
1000171e:	681b      	ldr	r3, [r3, #0]
10001720:	2b03      	cmp	r3, #3
10001722:	d840      	bhi.n	100017a6 <RCC_MPUConfig+0x92>
10001724:	a201      	add	r2, pc, #4	; (adr r2, 1000172c <RCC_MPUConfig+0x18>)
10001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000172a:	bf00      	nop
1000172c:	1000173d 	.word	0x1000173d
10001730:	10001751 	.word	0x10001751
10001734:	10001767 	.word	0x10001767
10001738:	1000177b 	.word	0x1000177b
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000173c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001740:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001744:	f003 0301 	and.w	r3, r3, #1
10001748:	2b01      	cmp	r3, #1
1000174a:	d02e      	beq.n	100017aa <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
1000174c:	2301      	movs	r3, #1
1000174e:	e053      	b.n	100017f8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001754:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000175c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001760:	d025      	beq.n	100017ae <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001762:	2301      	movs	r3, #1
10001764:	e048      	b.n	100017f8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000176a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000176e:	f003 0302 	and.w	r3, r3, #2
10001772:	2b02      	cmp	r3, #2
10001774:	d01d      	beq.n	100017b2 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001776:	2301      	movs	r3, #1
10001778:	e03e      	b.n	100017f8 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000177a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000177e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001782:	f003 0302 	and.w	r3, r3, #2
10001786:	2b02      	cmp	r3, #2
10001788:	d001      	beq.n	1000178e <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
1000178a:	2301      	movs	r3, #1
1000178c:	e034      	b.n	100017f8 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000178e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001794:	f023 0207 	bic.w	r2, r3, #7
10001798:	687b      	ldr	r3, [r7, #4]
1000179a:	685b      	ldr	r3, [r3, #4]
1000179c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017a0:	4313      	orrs	r3, r2
100017a2:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100017a4:	e006      	b.n	100017b4 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100017a6:	2301      	movs	r3, #1
100017a8:	e026      	b.n	100017f8 <RCC_MPUConfig+0xe4>
      break;
100017aa:	bf00      	nop
100017ac:	e002      	b.n	100017b4 <RCC_MPUConfig+0xa0>
      break;
100017ae:	bf00      	nop
100017b0:	e000      	b.n	100017b4 <RCC_MPUConfig+0xa0>
      break;
100017b2:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100017b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017b8:	6a1b      	ldr	r3, [r3, #32]
100017ba:	f023 0203 	bic.w	r2, r3, #3
100017be:	687b      	ldr	r3, [r7, #4]
100017c0:	681b      	ldr	r3, [r3, #0]
100017c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017c6:	4313      	orrs	r3, r2
100017c8:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100017ca:	f7fe fe11 	bl	100003f0 <HAL_GetTick>
100017ce:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100017d0:	e009      	b.n	100017e6 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100017d2:	f7fe fe0d 	bl	100003f0 <HAL_GetTick>
100017d6:	4602      	mov	r2, r0
100017d8:	68fb      	ldr	r3, [r7, #12]
100017da:	1ad3      	subs	r3, r2, r3
100017dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100017e0:	d901      	bls.n	100017e6 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100017e2:	2303      	movs	r3, #3
100017e4:	e008      	b.n	100017f8 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100017e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ea:	6a1b      	ldr	r3, [r3, #32]
100017ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100017f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100017f4:	d1ed      	bne.n	100017d2 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100017f6:	2300      	movs	r3, #0
}
100017f8:	4618      	mov	r0, r3
100017fa:	3710      	adds	r7, #16
100017fc:	46bd      	mov	sp, r7
100017fe:	bd80      	pop	{r7, pc}

10001800 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001800:	b580      	push	{r7, lr}
10001802:	b084      	sub	sp, #16
10001804:	af00      	add	r7, sp, #0
10001806:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001808:	687b      	ldr	r3, [r7, #4]
1000180a:	681b      	ldr	r3, [r3, #0]
1000180c:	2b02      	cmp	r3, #2
1000180e:	d01b      	beq.n	10001848 <RCC_AXISSConfig+0x48>
10001810:	2b02      	cmp	r3, #2
10001812:	d823      	bhi.n	1000185c <RCC_AXISSConfig+0x5c>
10001814:	2b00      	cmp	r3, #0
10001816:	d002      	beq.n	1000181e <RCC_AXISSConfig+0x1e>
10001818:	2b01      	cmp	r3, #1
1000181a:	d00a      	beq.n	10001832 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
1000181c:	e01e      	b.n	1000185c <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000181e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001822:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001826:	f003 0301 	and.w	r3, r3, #1
1000182a:	2b01      	cmp	r3, #1
1000182c:	d018      	beq.n	10001860 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000182e:	2301      	movs	r3, #1
10001830:	e079      	b.n	10001926 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001836:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000183e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001842:	d00f      	beq.n	10001864 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001844:	2301      	movs	r3, #1
10001846:	e06e      	b.n	10001926 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001848:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001850:	f003 0302 	and.w	r3, r3, #2
10001854:	2b02      	cmp	r3, #2
10001856:	d007      	beq.n	10001868 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001858:	2301      	movs	r3, #1
1000185a:	e064      	b.n	10001926 <RCC_AXISSConfig+0x126>
      break;
1000185c:	bf00      	nop
1000185e:	e004      	b.n	1000186a <RCC_AXISSConfig+0x6a>
      break;
10001860:	bf00      	nop
10001862:	e002      	b.n	1000186a <RCC_AXISSConfig+0x6a>
      break;
10001864:	bf00      	nop
10001866:	e000      	b.n	1000186a <RCC_AXISSConfig+0x6a>
      break;
10001868:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
1000186a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001870:	f023 0207 	bic.w	r2, r3, #7
10001874:	687b      	ldr	r3, [r7, #4]
10001876:	681b      	ldr	r3, [r3, #0]
10001878:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000187c:	4313      	orrs	r3, r2
1000187e:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001880:	687b      	ldr	r3, [r7, #4]
10001882:	681b      	ldr	r3, [r3, #0]
10001884:	2b03      	cmp	r3, #3
10001886:	d016      	beq.n	100018b6 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001888:	f7fe fdb2 	bl	100003f0 <HAL_GetTick>
1000188c:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000188e:	e009      	b.n	100018a4 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001890:	f7fe fdae 	bl	100003f0 <HAL_GetTick>
10001894:	4602      	mov	r2, r0
10001896:	68fb      	ldr	r3, [r7, #12]
10001898:	1ad3      	subs	r3, r2, r3
1000189a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000189e:	d901      	bls.n	100018a4 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100018a0:	2303      	movs	r3, #3
100018a2:	e040      	b.n	10001926 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100018a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100018aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100018ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100018b2:	d1ed      	bne.n	10001890 <RCC_AXISSConfig+0x90>
100018b4:	e015      	b.n	100018e2 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100018b6:	f7fe fd9b 	bl	100003f0 <HAL_GetTick>
100018ba:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100018bc:	e009      	b.n	100018d2 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018be:	f7fe fd97 	bl	100003f0 <HAL_GetTick>
100018c2:	4602      	mov	r2, r0
100018c4:	68fb      	ldr	r3, [r7, #12]
100018c6:	1ad3      	subs	r3, r2, r3
100018c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100018cc:	d901      	bls.n	100018d2 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100018ce:	2303      	movs	r3, #3
100018d0:	e029      	b.n	10001926 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100018d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100018d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100018dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100018e0:	d0ed      	beq.n	100018be <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100018e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100018e8:	f023 0207 	bic.w	r2, r3, #7
100018ec:	687b      	ldr	r3, [r7, #4]
100018ee:	685b      	ldr	r3, [r3, #4]
100018f0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100018f4:	4313      	orrs	r3, r2
100018f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100018f8:	f7fe fd7a 	bl	100003f0 <HAL_GetTick>
100018fc:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100018fe:	e009      	b.n	10001914 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001900:	f7fe fd76 	bl	100003f0 <HAL_GetTick>
10001904:	4602      	mov	r2, r0
10001906:	68fb      	ldr	r3, [r7, #12]
10001908:	1ad3      	subs	r3, r2, r3
1000190a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000190e:	d901      	bls.n	10001914 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001910:	2303      	movs	r3, #3
10001912:	e008      	b.n	10001926 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000191a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000191e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001922:	d1ed      	bne.n	10001900 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001924:	2300      	movs	r3, #0
}
10001926:	4618      	mov	r0, r3
10001928:	3710      	adds	r7, #16
1000192a:	46bd      	mov	sp, r7
1000192c:	bd80      	pop	{r7, pc}
	...

10001930 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001930:	b580      	push	{r7, lr}
10001932:	b084      	sub	sp, #16
10001934:	af00      	add	r7, sp, #0
10001936:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001938:	687b      	ldr	r3, [r7, #4]
1000193a:	681b      	ldr	r3, [r3, #0]
1000193c:	2b03      	cmp	r3, #3
1000193e:	d834      	bhi.n	100019aa <RCC_MCUConfig+0x7a>
10001940:	a201      	add	r2, pc, #4	; (adr r2, 10001948 <RCC_MCUConfig+0x18>)
10001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001946:	bf00      	nop
10001948:	10001959 	.word	0x10001959
1000194c:	1000196d 	.word	0x1000196d
10001950:	10001983 	.word	0x10001983
10001954:	10001997 	.word	0x10001997
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001958:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000195c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001960:	f003 0301 	and.w	r3, r3, #1
10001964:	2b01      	cmp	r3, #1
10001966:	d022      	beq.n	100019ae <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001968:	2301      	movs	r3, #1
1000196a:	e081      	b.n	10001a70 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000196c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001970:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000197c:	d019      	beq.n	100019b2 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
1000197e:	2301      	movs	r3, #1
10001980:	e076      	b.n	10001a70 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001982:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001986:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000198a:	f003 0310 	and.w	r3, r3, #16
1000198e:	2b10      	cmp	r3, #16
10001990:	d011      	beq.n	100019b6 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001992:	2301      	movs	r3, #1
10001994:	e06c      	b.n	10001a70 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001996:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000199a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000199e:	f003 0302 	and.w	r3, r3, #2
100019a2:	2b02      	cmp	r3, #2
100019a4:	d009      	beq.n	100019ba <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
100019a6:	2301      	movs	r3, #1
100019a8:	e062      	b.n	10001a70 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100019aa:	bf00      	nop
100019ac:	e006      	b.n	100019bc <RCC_MCUConfig+0x8c>
      break;
100019ae:	bf00      	nop
100019b0:	e004      	b.n	100019bc <RCC_MCUConfig+0x8c>
      break;
100019b2:	bf00      	nop
100019b4:	e002      	b.n	100019bc <RCC_MCUConfig+0x8c>
      break;
100019b6:	bf00      	nop
100019b8:	e000      	b.n	100019bc <RCC_MCUConfig+0x8c>
      break;
100019ba:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100019bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100019c2:	f023 0203 	bic.w	r2, r3, #3
100019c6:	687b      	ldr	r3, [r7, #4]
100019c8:	681b      	ldr	r3, [r3, #0]
100019ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100019ce:	4313      	orrs	r3, r2
100019d0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100019d2:	f7fe fd0d 	bl	100003f0 <HAL_GetTick>
100019d6:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100019d8:	e009      	b.n	100019ee <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100019da:	f7fe fd09 	bl	100003f0 <HAL_GetTick>
100019de:	4602      	mov	r2, r0
100019e0:	68fb      	ldr	r3, [r7, #12]
100019e2:	1ad3      	subs	r3, r2, r3
100019e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100019e8:	d901      	bls.n	100019ee <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
100019ea:	2303      	movs	r3, #3
100019ec:	e040      	b.n	10001a70 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100019ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100019f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100019f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100019fc:	d1ed      	bne.n	100019da <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100019fe:	f000 f954 	bl	10001caa <HAL_RCC_GetSystemCoreClockFreq>
10001a02:	4603      	mov	r3, r0
10001a04:	4a1c      	ldr	r2, [pc, #112]	; (10001a78 <RCC_MCUConfig+0x148>)
10001a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001a08:	4b1c      	ldr	r3, [pc, #112]	; (10001a7c <RCC_MCUConfig+0x14c>)
10001a0a:	681b      	ldr	r3, [r3, #0]
10001a0c:	4618      	mov	r0, r3
10001a0e:	f7fe fca5 	bl	1000035c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a16:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001a1a:	f023 020f 	bic.w	r2, r3, #15
10001a1e:	687b      	ldr	r3, [r7, #4]
10001a20:	685b      	ldr	r3, [r3, #4]
10001a22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a26:	4313      	orrs	r3, r2
10001a28:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a2c:	f7fe fce0 	bl	100003f0 <HAL_GetTick>
10001a30:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001a32:	e009      	b.n	10001a48 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a34:	f7fe fcdc 	bl	100003f0 <HAL_GetTick>
10001a38:	4602      	mov	r2, r0
10001a3a:	68fb      	ldr	r3, [r7, #12]
10001a3c:	1ad3      	subs	r3, r2, r3
10001a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a42:	d901      	bls.n	10001a48 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001a44:	2303      	movs	r3, #3
10001a46:	e013      	b.n	10001a70 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a4c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a58:	d1ec      	bne.n	10001a34 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001a5a:	f000 f926 	bl	10001caa <HAL_RCC_GetSystemCoreClockFreq>
10001a5e:	4603      	mov	r3, r0
10001a60:	4a05      	ldr	r2, [pc, #20]	; (10001a78 <RCC_MCUConfig+0x148>)
10001a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001a64:	4b05      	ldr	r3, [pc, #20]	; (10001a7c <RCC_MCUConfig+0x14c>)
10001a66:	681b      	ldr	r3, [r3, #0]
10001a68:	4618      	mov	r0, r3
10001a6a:	f7fe fc77 	bl	1000035c <HAL_InitTick>
#endif

  return HAL_OK;
10001a6e:	2300      	movs	r3, #0
}
10001a70:	4618      	mov	r0, r3
10001a72:	3710      	adds	r7, #16
10001a74:	46bd      	mov	sp, r7
10001a76:	bd80      	pop	{r7, pc}
10001a78:	10020000 	.word	0x10020000
10001a7c:	10020004 	.word	0x10020004

10001a80 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001a80:	b480      	push	{r7}
10001a82:	b089      	sub	sp, #36	; 0x24
10001a84:	af00      	add	r7, sp, #0
10001a86:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001a88:	2300      	movs	r3, #0
10001a8a:	61bb      	str	r3, [r7, #24]
10001a8c:	2301      	movs	r3, #1
10001a8e:	617b      	str	r3, [r7, #20]
10001a90:	2300      	movs	r3, #0
10001a92:	613b      	str	r3, [r7, #16]
10001a94:	2300      	movs	r3, #0
10001a96:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001a98:	f04f 0300 	mov.w	r3, #0
10001a9c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001a9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aa2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001aa6:	f003 0303 	and.w	r3, r3, #3
10001aaa:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ab0:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001ab4:	0c1b      	lsrs	r3, r3, #16
10001ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001aba:	3301      	adds	r3, #1
10001abc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ac2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001ac6:	0c1b      	lsrs	r3, r3, #16
10001ac8:	f003 0301 	and.w	r3, r3, #1
10001acc:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ad2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001ad6:	08db      	lsrs	r3, r3, #3
10001ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001adc:	693a      	ldr	r2, [r7, #16]
10001ade:	fb02 f303 	mul.w	r3, r2, r3
10001ae2:	ee07 3a90 	vmov	s15, r3
10001ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001aea:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001af2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001afa:	3301      	adds	r3, #1
10001afc:	ee07 3a90 	vmov	s15, r3
10001b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001b04:	edd7 6a02 	vldr	s13, [r7, #8]
10001b08:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10001c64 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001b0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
10001b14:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001b18:	69bb      	ldr	r3, [r7, #24]
10001b1a:	2b03      	cmp	r3, #3
10001b1c:	d85b      	bhi.n	10001bd6 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001b1e:	a201      	add	r2, pc, #4	; (adr r2, 10001b24 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001b24:	10001b35 	.word	0x10001b35
10001b28:	10001b93 	.word	0x10001b93
10001b2c:	10001bb1 	.word	0x10001bb1
10001b30:	10001bcf 	.word	0x10001bcf
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001b34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b38:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001b3c:	f003 0304 	and.w	r3, r3, #4
10001b40:	2b04      	cmp	r3, #4
10001b42:	d117      	bne.n	10001b74 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001b44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b48:	699b      	ldr	r3, [r3, #24]
10001b4a:	f003 0303 	and.w	r3, r3, #3
10001b4e:	4a46      	ldr	r2, [pc, #280]	; (10001c68 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001b50:	fa22 f303 	lsr.w	r3, r2, r3
10001b54:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001b56:	68fa      	ldr	r2, [r7, #12]
10001b58:	697b      	ldr	r3, [r7, #20]
10001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
10001b5e:	ee07 3a90 	vmov	s15, r3
10001b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001b66:	ed97 7a07 	vldr	s14, [r7, #28]
10001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
10001b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001b72:	e030      	b.n	10001bd6 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001b74:	4a3c      	ldr	r2, [pc, #240]	; (10001c68 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001b76:	697b      	ldr	r3, [r7, #20]
10001b78:	fbb2 f3f3 	udiv	r3, r2, r3
10001b7c:	ee07 3a90 	vmov	s15, r3
10001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001b84:	ed97 7a07 	vldr	s14, [r7, #28]
10001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
10001b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001b90:	e021      	b.n	10001bd6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001b92:	4a36      	ldr	r2, [pc, #216]	; (10001c6c <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001b94:	697b      	ldr	r3, [r7, #20]
10001b96:	fbb2 f3f3 	udiv	r3, r2, r3
10001b9a:	ee07 3a90 	vmov	s15, r3
10001b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ba2:	ed97 7a07 	vldr	s14, [r7, #28]
10001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
10001baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001bae:	e012      	b.n	10001bd6 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001bb0:	4a2f      	ldr	r2, [pc, #188]	; (10001c70 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001bb2:	697b      	ldr	r3, [r7, #20]
10001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
10001bb8:	ee07 3a90 	vmov	s15, r3
10001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001bc0:	ed97 7a07 	vldr	s14, [r7, #28]
10001bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001bcc:	e003      	b.n	10001bd6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001bce:	f04f 0300 	mov.w	r3, #0
10001bd2:	61fb      	str	r3, [r7, #28]
      break;
10001bd4:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bda:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001be2:	3301      	adds	r3, #1
10001be4:	ee07 3a90 	vmov	s15, r3
10001be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001bec:	edd7 6a07 	vldr	s13, [r7, #28]
10001bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001bf8:	ee17 2a90 	vmov	r2, s15
10001bfc:	687b      	ldr	r3, [r7, #4]
10001bfe:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c04:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c08:	0a1b      	lsrs	r3, r3, #8
10001c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c0e:	3301      	adds	r3, #1
10001c10:	ee07 3a90 	vmov	s15, r3
10001c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c18:	edd7 6a07 	vldr	s13, [r7, #28]
10001c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c24:	ee17 2a90 	vmov	r2, s15
10001c28:	687b      	ldr	r3, [r7, #4]
10001c2a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001c2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c30:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c34:	0c1b      	lsrs	r3, r3, #16
10001c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c3a:	3301      	adds	r3, #1
10001c3c:	ee07 3a90 	vmov	s15, r3
10001c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c44:	edd7 6a07 	vldr	s13, [r7, #28]
10001c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c50:	ee17 2a90 	vmov	r2, s15
10001c54:	687b      	ldr	r3, [r7, #4]
10001c56:	609a      	str	r2, [r3, #8]
}
10001c58:	bf00      	nop
10001c5a:	3724      	adds	r7, #36	; 0x24
10001c5c:	46bd      	mov	sp, r7
10001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c62:	4770      	bx	lr
10001c64:	46000000 	.word	0x46000000
10001c68:	03d09000 	.word	0x03d09000
10001c6c:	016e3600 	.word	0x016e3600
10001c70:	003d0900 	.word	0x003d0900

10001c74 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001c74:	b580      	push	{r7, lr}
10001c76:	b082      	sub	sp, #8
10001c78:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001c7a:	2300      	movs	r3, #0
10001c7c:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c82:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001c86:	f003 030f 	and.w	r3, r3, #15
10001c8a:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001c8c:	687b      	ldr	r3, [r7, #4]
10001c8e:	2b09      	cmp	r3, #9
10001c90:	d901      	bls.n	10001c96 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001c92:	2309      	movs	r3, #9
10001c94:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001c96:	f000 f80f 	bl	10001cb8 <HAL_RCC_GetMCUSSFreq>
10001c9a:	4602      	mov	r2, r0
10001c9c:	687b      	ldr	r3, [r7, #4]
10001c9e:	fa22 f303 	lsr.w	r3, r2, r3
}
10001ca2:	4618      	mov	r0, r3
10001ca4:	3708      	adds	r7, #8
10001ca6:	46bd      	mov	sp, r7
10001ca8:	bd80      	pop	{r7, pc}

10001caa <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10001caa:	b580      	push	{r7, lr}
10001cac:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001cae:	f7ff ffe1 	bl	10001c74 <HAL_RCC_GetMCUFreq>
10001cb2:	4603      	mov	r3, r0
#endif
}
10001cb4:	4618      	mov	r0, r3
10001cb6:	bd80      	pop	{r7, pc}

10001cb8 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10001cb8:	b580      	push	{r7, lr}
10001cba:	b084      	sub	sp, #16
10001cbc:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001cbe:	2300      	movs	r3, #0
10001cc0:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001cc8:	f003 0303 	and.w	r3, r3, #3
10001ccc:	2b03      	cmp	r3, #3
10001cce:	d822      	bhi.n	10001d16 <HAL_RCC_GetMCUSSFreq+0x5e>
10001cd0:	a201      	add	r2, pc, #4	; (adr r2, 10001cd8 <HAL_RCC_GetMCUSSFreq+0x20>)
10001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001cd6:	bf00      	nop
10001cd8:	10001cf7 	.word	0x10001cf7
10001cdc:	10001d0b 	.word	0x10001d0b
10001ce0:	10001d11 	.word	0x10001d11
10001ce4:	10001ce9 	.word	0x10001ce9
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10001ce8:	463b      	mov	r3, r7
10001cea:	4618      	mov	r0, r3
10001cec:	f7ff fec8 	bl	10001a80 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001cf0:	683b      	ldr	r3, [r7, #0]
10001cf2:	60fb      	str	r3, [r7, #12]
      break;
10001cf4:	e00f      	b.n	10001d16 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001cf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cfa:	699b      	ldr	r3, [r3, #24]
10001cfc:	f003 0303 	and.w	r3, r3, #3
10001d00:	4a07      	ldr	r2, [pc, #28]	; (10001d20 <HAL_RCC_GetMCUSSFreq+0x68>)
10001d02:	fa22 f303 	lsr.w	r3, r2, r3
10001d06:	60fb      	str	r3, [r7, #12]

      break;
10001d08:	e005      	b.n	10001d16 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001d0a:	4b06      	ldr	r3, [pc, #24]	; (10001d24 <HAL_RCC_GetMCUSSFreq+0x6c>)
10001d0c:	60fb      	str	r3, [r7, #12]
      break;
10001d0e:	e002      	b.n	10001d16 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001d10:	4b05      	ldr	r3, [pc, #20]	; (10001d28 <HAL_RCC_GetMCUSSFreq+0x70>)
10001d12:	60fb      	str	r3, [r7, #12]
      break;
10001d14:	bf00      	nop
  }

  return mcussfreq;
10001d16:	68fb      	ldr	r3, [r7, #12]
}
10001d18:	4618      	mov	r0, r3
10001d1a:	3710      	adds	r7, #16
10001d1c:	46bd      	mov	sp, r7
10001d1e:	bd80      	pop	{r7, pc}
10001d20:	03d09000 	.word	0x03d09000
10001d24:	016e3600 	.word	0x016e3600
10001d28:	003d0900 	.word	0x003d0900

10001d2c <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10001d2c:	b580      	push	{r7, lr}
10001d2e:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10001d30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d34:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10001d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10001d40:	d107      	bne.n	10001d52 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10001d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10001d4a:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10001d4e:	f000 f802 	bl	10001d56 <HAL_RCC_WAKEUP_Callback>
  }
}
10001d52:	bf00      	nop
10001d54:	bd80      	pop	{r7, pc}

10001d56 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10001d56:	b480      	push	{r7}
10001d58:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10001d5a:	bf00      	nop
10001d5c:	46bd      	mov	sp, r7
10001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d62:	4770      	bx	lr

10001d64 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10001d64:	b580      	push	{r7, lr}
10001d66:	b084      	sub	sp, #16
10001d68:	af00      	add	r7, sp, #0
10001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001d6c:	687b      	ldr	r3, [r7, #4]
10001d6e:	681b      	ldr	r3, [r3, #0]
10001d70:	2b00      	cmp	r3, #0
10001d72:	f000 8171 	beq.w	10002058 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10001d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001d7c:	f003 0307 	and.w	r3, r3, #7
10001d80:	2b02      	cmp	r3, #2
10001d82:	d108      	bne.n	10001d96 <RCCEx_PLL2_Config+0x32>
10001d84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d92:	f000 815f 	beq.w	10002054 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001d96:	687b      	ldr	r3, [r7, #4]
10001d98:	681b      	ldr	r3, [r3, #0]
10001d9a:	2b02      	cmp	r3, #2
10001d9c:	f040 8130 	bne.w	10002000 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001da6:	f003 0303 	and.w	r3, r3, #3
10001daa:	2b00      	cmp	r3, #0
10001dac:	d008      	beq.n	10001dc0 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10001dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001db4:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001db8:	2b01      	cmp	r3, #1
10001dba:	d001      	beq.n	10001dc0 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001dbc:	2301      	movs	r3, #1
10001dbe:	e14c      	b.n	1000205a <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001dc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001dd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001ddc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001de0:	f023 0301 	bic.w	r3, r3, #1
10001de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001de8:	f7fe fb02 	bl	100003f0 <HAL_GetTick>
10001dec:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001dee:	e008      	b.n	10001e02 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001df0:	f7fe fafe 	bl	100003f0 <HAL_GetTick>
10001df4:	4602      	mov	r2, r0
10001df6:	68fb      	ldr	r3, [r7, #12]
10001df8:	1ad3      	subs	r3, r2, r3
10001dfa:	2b64      	cmp	r3, #100	; 0x64
10001dfc:	d901      	bls.n	10001e02 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001dfe:	2303      	movs	r3, #3
10001e00:	e12b      	b.n	1000205a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001e02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001e0a:	f003 0302 	and.w	r3, r3, #2
10001e0e:	2b02      	cmp	r3, #2
10001e10:	d0ee      	beq.n	10001df0 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e16:	6a1b      	ldr	r3, [r3, #32]
10001e18:	f003 0303 	and.w	r3, r3, #3
10001e1c:	2b02      	cmp	r3, #2
10001e1e:	d107      	bne.n	10001e30 <RCCEx_PLL2_Config+0xcc>
10001e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e24:	6a1b      	ldr	r3, [r3, #32]
10001e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001e2e:	d00e      	beq.n	10001e4e <RCCEx_PLL2_Config+0xea>
10001e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e34:	6a1b      	ldr	r3, [r3, #32]
10001e36:	f003 0303 	and.w	r3, r3, #3
10001e3a:	2b03      	cmp	r3, #3
10001e3c:	d112      	bne.n	10001e64 <RCCEx_PLL2_Config+0x100>
10001e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e42:	6a1b      	ldr	r3, [r3, #32]
10001e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001e4c:	d10a      	bne.n	10001e64 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001e4e:	687b      	ldr	r3, [r7, #4]
10001e50:	685a      	ldr	r2, [r3, #4]
10001e52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001e58:	f003 0303 	and.w	r3, r3, #3
10001e5c:	429a      	cmp	r2, r3
10001e5e:	d00c      	beq.n	10001e7a <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001e60:	2301      	movs	r3, #1
10001e62:	e0fa      	b.n	1000205a <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001e64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001e6a:	f023 0203 	bic.w	r2, r3, #3
10001e6e:	687b      	ldr	r3, [r7, #4]
10001e70:	685b      	ldr	r3, [r3, #4]
10001e72:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e76:	4313      	orrs	r3, r2
10001e78:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e7e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10001e82:	4b78      	ldr	r3, [pc, #480]	; (10002064 <RCCEx_PLL2_Config+0x300>)
10001e84:	4013      	ands	r3, r2
10001e86:	687a      	ldr	r2, [r7, #4]
10001e88:	68d2      	ldr	r2, [r2, #12]
10001e8a:	1e51      	subs	r1, r2, #1
10001e8c:	687a      	ldr	r2, [r7, #4]
10001e8e:	6892      	ldr	r2, [r2, #8]
10001e90:	3a01      	subs	r2, #1
10001e92:	0412      	lsls	r2, r2, #16
10001e94:	430a      	orrs	r2, r1
10001e96:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e9a:	4313      	orrs	r3, r2
10001e9c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10001ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001ea8:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001eac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001eb0:	687a      	ldr	r2, [r7, #4]
10001eb2:	6912      	ldr	r2, [r2, #16]
10001eb4:	1e51      	subs	r1, r2, #1
10001eb6:	687a      	ldr	r2, [r7, #4]
10001eb8:	6952      	ldr	r2, [r2, #20]
10001eba:	3a01      	subs	r2, #1
10001ebc:	0212      	lsls	r2, r2, #8
10001ebe:	4311      	orrs	r1, r2
10001ec0:	687a      	ldr	r2, [r7, #4]
10001ec2:	6992      	ldr	r2, [r2, #24]
10001ec4:	3a01      	subs	r2, #1
10001ec6:	0412      	lsls	r2, r2, #16
10001ec8:	430a      	orrs	r2, r1
10001eca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ece:	4313      	orrs	r3, r2
10001ed0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10001ed4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ed8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001edc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001ee4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10001ee8:	687b      	ldr	r3, [r7, #4]
10001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001eec:	2b02      	cmp	r3, #2
10001eee:	d003      	beq.n	10001ef8 <RCCEx_PLL2_Config+0x194>
10001ef0:	687b      	ldr	r3, [r7, #4]
10001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ef4:	2b00      	cmp	r3, #0
10001ef6:	d10c      	bne.n	10001f12 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10001ef8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001efc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001f00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001f08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001f0c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10001f10:	e00f      	b.n	10001f32 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10001f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001f1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001f22:	687a      	ldr	r2, [r7, #4]
10001f24:	6a12      	ldr	r2, [r2, #32]
10001f26:	00d2      	lsls	r2, r2, #3
10001f28:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f2c:	4313      	orrs	r3, r2
10001f2e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10001f32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001f42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001f46:	687b      	ldr	r3, [r7, #4]
10001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f4a:	2b02      	cmp	r3, #2
10001f4c:	d124      	bne.n	10001f98 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10001f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10001f56:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001f5a:	687b      	ldr	r3, [r7, #4]
10001f5c:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001f5e:	687b      	ldr	r3, [r7, #4]
10001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001f62:	4319      	orrs	r1, r3
10001f64:	687b      	ldr	r3, [r7, #4]
10001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001f68:	4319      	orrs	r1, r3
10001f6a:	687b      	ldr	r3, [r7, #4]
10001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001f6e:	4319      	orrs	r1, r3
10001f70:	687b      	ldr	r3, [r7, #4]
10001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001f74:	041b      	lsls	r3, r3, #16
10001f76:	430b      	orrs	r3, r1
10001f78:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f7c:	4313      	orrs	r3, r2
10001f7e:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10001f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f8e:	f043 0304 	orr.w	r3, r3, #4
10001f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10001f96:	e009      	b.n	10001fac <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10001f98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001fa0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001fa4:	f023 0304 	bic.w	r3, r3, #4
10001fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10001fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001fb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001fb8:	f043 0301 	orr.w	r3, r3, #1
10001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001fc0:	f7fe fa16 	bl	100003f0 <HAL_GetTick>
10001fc4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001fc6:	e008      	b.n	10001fda <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001fc8:	f7fe fa12 	bl	100003f0 <HAL_GetTick>
10001fcc:	4602      	mov	r2, r0
10001fce:	68fb      	ldr	r3, [r7, #12]
10001fd0:	1ad3      	subs	r3, r2, r3
10001fd2:	2b64      	cmp	r3, #100	; 0x64
10001fd4:	d901      	bls.n	10001fda <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10001fd6:	2303      	movs	r3, #3
10001fd8:	e03f      	b.n	1000205a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001fda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001fe2:	f003 0302 	and.w	r3, r3, #2
10001fe6:	2b02      	cmp	r3, #2
10001fe8:	d1ee      	bne.n	10001fc8 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001fea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001ff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ff6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10001ffe:	e02b      	b.n	10002058 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002000:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002008:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000200c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002014:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000201c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002020:	f023 0301 	bic.w	r3, r3, #1
10002024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002028:	f7fe f9e2 	bl	100003f0 <HAL_GetTick>
1000202c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000202e:	e008      	b.n	10002042 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002030:	f7fe f9de 	bl	100003f0 <HAL_GetTick>
10002034:	4602      	mov	r2, r0
10002036:	68fb      	ldr	r3, [r7, #12]
10002038:	1ad3      	subs	r3, r2, r3
1000203a:	2b64      	cmp	r3, #100	; 0x64
1000203c:	d901      	bls.n	10002042 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000203e:	2303      	movs	r3, #3
10002040:	e00b      	b.n	1000205a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002042:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000204a:	f003 0302 	and.w	r3, r3, #2
1000204e:	2b02      	cmp	r3, #2
10002050:	d0ee      	beq.n	10002030 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10002052:	e001      	b.n	10002058 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002054:	2301      	movs	r3, #1
10002056:	e000      	b.n	1000205a <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002058:	2300      	movs	r3, #0

}
1000205a:	4618      	mov	r0, r3
1000205c:	3710      	adds	r7, #16
1000205e:	46bd      	mov	sp, r7
10002060:	bd80      	pop	{r7, pc}
10002062:	bf00      	nop
10002064:	ffc0fe00 	.word	0xffc0fe00

10002068 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10002068:	b580      	push	{r7, lr}
1000206a:	b084      	sub	sp, #16
1000206c:	af00      	add	r7, sp, #0
1000206e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10002070:	687b      	ldr	r3, [r7, #4]
10002072:	681b      	ldr	r3, [r3, #0]
10002074:	2b00      	cmp	r3, #0
10002076:	f000 815a 	beq.w	1000232e <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
1000207a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002080:	f003 0303 	and.w	r3, r3, #3
10002084:	2b03      	cmp	r3, #3
10002086:	d108      	bne.n	1000209a <RCCEx_PLL3_Config+0x32>
10002088:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000208e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002096:	f000 8148 	beq.w	1000232a <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
1000209a:	687b      	ldr	r3, [r7, #4]
1000209c:	681b      	ldr	r3, [r3, #0]
1000209e:	2b02      	cmp	r3, #2
100020a0:	f040 8119 	bne.w	100022d6 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100020a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100020ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100020b4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100020b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020bc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100020c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020c4:	f023 0301 	bic.w	r3, r3, #1
100020c8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100020cc:	f7fe f990 	bl	100003f0 <HAL_GetTick>
100020d0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100020d2:	e008      	b.n	100020e6 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100020d4:	f7fe f98c 	bl	100003f0 <HAL_GetTick>
100020d8:	4602      	mov	r2, r0
100020da:	68fb      	ldr	r3, [r7, #12]
100020dc:	1ad3      	subs	r3, r2, r3
100020de:	2b64      	cmp	r3, #100	; 0x64
100020e0:	d901      	bls.n	100020e6 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100020e2:	2303      	movs	r3, #3
100020e4:	e124      	b.n	10002330 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100020e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100020ee:	f003 0302 	and.w	r3, r3, #2
100020f2:	2b02      	cmp	r3, #2
100020f4:	d0ee      	beq.n	100020d4 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100020f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020fa:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100020fe:	f023 0203 	bic.w	r2, r3, #3
10002102:	687b      	ldr	r3, [r7, #4]
10002104:	685b      	ldr	r3, [r3, #4]
10002106:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000210a:	4313      	orrs	r3, r2
1000210c:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002110:	e008      	b.n	10002124 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002112:	f7fe f96d 	bl	100003f0 <HAL_GetTick>
10002116:	4602      	mov	r2, r0
10002118:	68fb      	ldr	r3, [r7, #12]
1000211a:	1ad3      	subs	r3, r2, r3
1000211c:	2b64      	cmp	r3, #100	; 0x64
1000211e:	d901      	bls.n	10002124 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10002120:	2303      	movs	r3, #3
10002122:	e105      	b.n	10002330 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002128:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000212c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002134:	d1ed      	bne.n	10002112 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10002136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000213a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000213e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002142:	687b      	ldr	r3, [r7, #4]
10002144:	69db      	ldr	r3, [r3, #28]
10002146:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000214a:	4313      	orrs	r3, r2
1000214c:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10002150:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002154:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10002158:	4b77      	ldr	r3, [pc, #476]	; (10002338 <RCCEx_PLL3_Config+0x2d0>)
1000215a:	4013      	ands	r3, r2
1000215c:	687a      	ldr	r2, [r7, #4]
1000215e:	68d2      	ldr	r2, [r2, #12]
10002160:	1e51      	subs	r1, r2, #1
10002162:	687a      	ldr	r2, [r7, #4]
10002164:	6892      	ldr	r2, [r2, #8]
10002166:	3a01      	subs	r2, #1
10002168:	0412      	lsls	r2, r2, #16
1000216a:	430a      	orrs	r2, r1
1000216c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002170:	4313      	orrs	r3, r2
10002172:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10002176:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000217a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000217e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002182:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002186:	687a      	ldr	r2, [r7, #4]
10002188:	6912      	ldr	r2, [r2, #16]
1000218a:	1e51      	subs	r1, r2, #1
1000218c:	687a      	ldr	r2, [r7, #4]
1000218e:	6952      	ldr	r2, [r2, #20]
10002190:	3a01      	subs	r2, #1
10002192:	0212      	lsls	r2, r2, #8
10002194:	4311      	orrs	r1, r2
10002196:	687a      	ldr	r2, [r7, #4]
10002198:	6992      	ldr	r2, [r2, #24]
1000219a:	3a01      	subs	r2, #1
1000219c:	0412      	lsls	r2, r2, #16
1000219e:	430a      	orrs	r2, r1
100021a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100021a4:	4313      	orrs	r3, r2
100021a6:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100021aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021ae:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100021b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100021ba:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100021be:	687b      	ldr	r3, [r7, #4]
100021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100021c2:	2b02      	cmp	r3, #2
100021c4:	d003      	beq.n	100021ce <RCCEx_PLL3_Config+0x166>
100021c6:	687b      	ldr	r3, [r7, #4]
100021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100021ca:	2b00      	cmp	r3, #0
100021cc:	d10c      	bne.n	100021e8 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100021ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021d2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100021d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100021de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100021e2:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
100021e6:	e00f      	b.n	10002208 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100021e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021ec:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100021f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100021f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100021f8:	687a      	ldr	r2, [r7, #4]
100021fa:	6a12      	ldr	r2, [r2, #32]
100021fc:	00d2      	lsls	r2, r2, #3
100021fe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002202:	4313      	orrs	r3, r2
10002204:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002208:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000220c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002210:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002218:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000221c:	687b      	ldr	r3, [r7, #4]
1000221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002220:	2b02      	cmp	r3, #2
10002222:	d124      	bne.n	1000226e <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002228:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
1000222c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002234:	687b      	ldr	r3, [r7, #4]
10002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002238:	4319      	orrs	r1, r3
1000223a:	687b      	ldr	r3, [r7, #4]
1000223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000223e:	4319      	orrs	r1, r3
10002240:	687b      	ldr	r3, [r7, #4]
10002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002244:	4319      	orrs	r1, r3
10002246:	687b      	ldr	r3, [r7, #4]
10002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000224a:	041b      	lsls	r3, r3, #16
1000224c:	430b      	orrs	r3, r1
1000224e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002252:	4313      	orrs	r3, r2
10002254:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000225c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002260:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002264:	f043 0304 	orr.w	r3, r3, #4
10002268:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
1000226c:	e009      	b.n	10002282 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
1000226e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002272:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000227a:	f023 0304 	bic.w	r3, r3, #4
1000227e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10002282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002286:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000228a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000228e:	f043 0301 	orr.w	r3, r3, #1
10002292:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002296:	f7fe f8ab 	bl	100003f0 <HAL_GetTick>
1000229a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000229c:	e008      	b.n	100022b0 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000229e:	f7fe f8a7 	bl	100003f0 <HAL_GetTick>
100022a2:	4602      	mov	r2, r0
100022a4:	68fb      	ldr	r3, [r7, #12]
100022a6:	1ad3      	subs	r3, r2, r3
100022a8:	2b64      	cmp	r3, #100	; 0x64
100022aa:	d901      	bls.n	100022b0 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100022ac:	2303      	movs	r3, #3
100022ae:	e03f      	b.n	10002330 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100022b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022b4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100022b8:	f003 0302 	and.w	r3, r3, #2
100022bc:	2b02      	cmp	r3, #2
100022be:	d1ee      	bne.n	1000229e <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100022c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100022c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100022d0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
100022d4:	e02b      	b.n	1000232e <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100022d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022da:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100022de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100022e6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
100022ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022ee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100022f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022f6:	f023 0301 	bic.w	r3, r3, #1
100022fa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100022fe:	f7fe f877 	bl	100003f0 <HAL_GetTick>
10002302:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002304:	e008      	b.n	10002318 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002306:	f7fe f873 	bl	100003f0 <HAL_GetTick>
1000230a:	4602      	mov	r2, r0
1000230c:	68fb      	ldr	r3, [r7, #12]
1000230e:	1ad3      	subs	r3, r2, r3
10002310:	2b64      	cmp	r3, #100	; 0x64
10002312:	d901      	bls.n	10002318 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002314:	2303      	movs	r3, #3
10002316:	e00b      	b.n	10002330 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000231c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002320:	f003 0302 	and.w	r3, r3, #2
10002324:	2b02      	cmp	r3, #2
10002326:	d0ee      	beq.n	10002306 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002328:	e001      	b.n	1000232e <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000232a:	2301      	movs	r3, #1
1000232c:	e000      	b.n	10002330 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000232e:	2300      	movs	r3, #0
}
10002330:	4618      	mov	r0, r3
10002332:	3710      	adds	r7, #16
10002334:	46bd      	mov	sp, r7
10002336:	bd80      	pop	{r7, pc}
10002338:	ffc0fe00 	.word	0xffc0fe00

1000233c <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
1000233c:	b580      	push	{r7, lr}
1000233e:	b084      	sub	sp, #16
10002340:	af00      	add	r7, sp, #0
10002342:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002344:	687b      	ldr	r3, [r7, #4]
10002346:	681b      	ldr	r3, [r3, #0]
10002348:	2b00      	cmp	r3, #0
1000234a:	f000 8147 	beq.w	100025dc <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
1000234e:	687b      	ldr	r3, [r7, #4]
10002350:	681b      	ldr	r3, [r3, #0]
10002352:	2b02      	cmp	r3, #2
10002354:	f040 8119 	bne.w	1000258a <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000235c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002368:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
1000236c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002370:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002374:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002378:	f023 0301 	bic.w	r3, r3, #1
1000237c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002380:	f7fe f836 	bl	100003f0 <HAL_GetTick>
10002384:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002386:	e008      	b.n	1000239a <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002388:	f7fe f832 	bl	100003f0 <HAL_GetTick>
1000238c:	4602      	mov	r2, r0
1000238e:	68fb      	ldr	r3, [r7, #12]
10002390:	1ad3      	subs	r3, r2, r3
10002392:	2b64      	cmp	r3, #100	; 0x64
10002394:	d901      	bls.n	1000239a <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002396:	2303      	movs	r3, #3
10002398:	e121      	b.n	100025de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000239a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000239e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100023a2:	f003 0302 	and.w	r3, r3, #2
100023a6:	2b02      	cmp	r3, #2
100023a8:	d0ee      	beq.n	10002388 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100023aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ae:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100023b2:	f023 0203 	bic.w	r2, r3, #3
100023b6:	687b      	ldr	r3, [r7, #4]
100023b8:	685b      	ldr	r3, [r3, #4]
100023ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100023be:	4313      	orrs	r3, r2
100023c0:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100023c4:	e008      	b.n	100023d8 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100023c6:	f7fe f813 	bl	100003f0 <HAL_GetTick>
100023ca:	4602      	mov	r2, r0
100023cc:	68fb      	ldr	r3, [r7, #12]
100023ce:	1ad3      	subs	r3, r2, r3
100023d0:	2b64      	cmp	r3, #100	; 0x64
100023d2:	d901      	bls.n	100023d8 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
100023d4:	2303      	movs	r3, #3
100023d6:	e102      	b.n	100025de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100023d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023dc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100023e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100023e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100023e8:	d1ed      	bne.n	100023c6 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
100023ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ee:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100023f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100023f6:	687b      	ldr	r3, [r7, #4]
100023f8:	69db      	ldr	r3, [r3, #28]
100023fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100023fe:	4313      	orrs	r3, r2
10002400:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002404:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002408:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
1000240c:	4b76      	ldr	r3, [pc, #472]	; (100025e8 <RCCEx_PLL4_Config+0x2ac>)
1000240e:	4013      	ands	r3, r2
10002410:	687a      	ldr	r2, [r7, #4]
10002412:	68d2      	ldr	r2, [r2, #12]
10002414:	1e51      	subs	r1, r2, #1
10002416:	687a      	ldr	r2, [r7, #4]
10002418:	6892      	ldr	r2, [r2, #8]
1000241a:	3a01      	subs	r2, #1
1000241c:	0412      	lsls	r2, r2, #16
1000241e:	430a      	orrs	r2, r1
10002420:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002424:	4313      	orrs	r3, r2
10002426:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
1000242a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000242e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002432:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000243a:	687a      	ldr	r2, [r7, #4]
1000243c:	6912      	ldr	r2, [r2, #16]
1000243e:	1e51      	subs	r1, r2, #1
10002440:	687a      	ldr	r2, [r7, #4]
10002442:	6952      	ldr	r2, [r2, #20]
10002444:	3a01      	subs	r2, #1
10002446:	0212      	lsls	r2, r2, #8
10002448:	4311      	orrs	r1, r2
1000244a:	687a      	ldr	r2, [r7, #4]
1000244c:	6992      	ldr	r2, [r2, #24]
1000244e:	3a01      	subs	r2, #1
10002450:	0412      	lsls	r2, r2, #16
10002452:	430a      	orrs	r2, r1
10002454:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002458:	4313      	orrs	r3, r2
1000245a:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
1000245e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002462:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002466:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000246e:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002472:	687b      	ldr	r3, [r7, #4]
10002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002476:	2b02      	cmp	r3, #2
10002478:	d003      	beq.n	10002482 <RCCEx_PLL4_Config+0x146>
1000247a:	687b      	ldr	r3, [r7, #4]
1000247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000247e:	2b00      	cmp	r3, #0
10002480:	d10c      	bne.n	1000249c <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002486:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000248a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000248e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002492:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002496:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
1000249a:	e00f      	b.n	100024bc <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
1000249c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024a0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100024a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100024a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100024ac:	687a      	ldr	r2, [r7, #4]
100024ae:	6a12      	ldr	r2, [r2, #32]
100024b0:	00d2      	lsls	r2, r2, #3
100024b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100024b6:	4313      	orrs	r3, r2
100024b8:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100024bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024c0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100024c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100024cc:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100024d0:	687b      	ldr	r3, [r7, #4]
100024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100024d4:	2b02      	cmp	r3, #2
100024d6:	d124      	bne.n	10002522 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100024d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024dc:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
100024e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100024e4:	687b      	ldr	r3, [r7, #4]
100024e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100024e8:	687b      	ldr	r3, [r7, #4]
100024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100024ec:	4319      	orrs	r1, r3
100024ee:	687b      	ldr	r3, [r7, #4]
100024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100024f2:	4319      	orrs	r1, r3
100024f4:	687b      	ldr	r3, [r7, #4]
100024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100024f8:	4319      	orrs	r1, r3
100024fa:	687b      	ldr	r3, [r7, #4]
100024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100024fe:	041b      	lsls	r3, r3, #16
10002500:	430b      	orrs	r3, r1
10002502:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002506:	4313      	orrs	r3, r2
10002508:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
1000250c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002510:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002514:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002518:	f043 0304 	orr.w	r3, r3, #4
1000251c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002520:	e009      	b.n	10002536 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002526:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000252a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000252e:	f023 0304 	bic.w	r3, r3, #4
10002532:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002536:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000253a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000253e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002542:	f043 0301 	orr.w	r3, r3, #1
10002546:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000254a:	f7fd ff51 	bl	100003f0 <HAL_GetTick>
1000254e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002550:	e008      	b.n	10002564 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002552:	f7fd ff4d 	bl	100003f0 <HAL_GetTick>
10002556:	4602      	mov	r2, r0
10002558:	68fb      	ldr	r3, [r7, #12]
1000255a:	1ad3      	subs	r3, r2, r3
1000255c:	2b64      	cmp	r3, #100	; 0x64
1000255e:	d901      	bls.n	10002564 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002560:	2303      	movs	r3, #3
10002562:	e03c      	b.n	100025de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002568:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000256c:	f003 0302 	and.w	r3, r3, #2
10002570:	2b02      	cmp	r3, #2
10002572:	d1ee      	bne.n	10002552 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002578:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000257c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002580:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002584:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002588:	e028      	b.n	100025dc <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000258a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000258e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002592:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000259a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000259e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100025a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025aa:	f023 0301 	bic.w	r3, r3, #1
100025ae:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100025b2:	f7fd ff1d 	bl	100003f0 <HAL_GetTick>
100025b6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100025b8:	e008      	b.n	100025cc <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025ba:	f7fd ff19 	bl	100003f0 <HAL_GetTick>
100025be:	4602      	mov	r2, r0
100025c0:	68fb      	ldr	r3, [r7, #12]
100025c2:	1ad3      	subs	r3, r2, r3
100025c4:	2b64      	cmp	r3, #100	; 0x64
100025c6:	d901      	bls.n	100025cc <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100025c8:	2303      	movs	r3, #3
100025ca:	e008      	b.n	100025de <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100025cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100025d4:	f003 0302 	and.w	r3, r3, #2
100025d8:	2b02      	cmp	r3, #2
100025da:	d0ee      	beq.n	100025ba <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
100025dc:	2300      	movs	r3, #0
}
100025de:	4618      	mov	r0, r3
100025e0:	3710      	adds	r7, #16
100025e2:	46bd      	mov	sp, r7
100025e4:	bd80      	pop	{r7, pc}
100025e6:	bf00      	nop
100025e8:	ffc0fe00 	.word	0xffc0fe00

100025ec <memset>:
100025ec:	4402      	add	r2, r0
100025ee:	4603      	mov	r3, r0
100025f0:	4293      	cmp	r3, r2
100025f2:	d100      	bne.n	100025f6 <memset+0xa>
100025f4:	4770      	bx	lr
100025f6:	f803 1b01 	strb.w	r1, [r3], #1
100025fa:	e7f9      	b.n	100025f0 <memset+0x4>

100025fc <__libc_init_array>:
100025fc:	b570      	push	{r4, r5, r6, lr}
100025fe:	4d0d      	ldr	r5, [pc, #52]	; (10002634 <__libc_init_array+0x38>)
10002600:	4c0d      	ldr	r4, [pc, #52]	; (10002638 <__libc_init_array+0x3c>)
10002602:	1b64      	subs	r4, r4, r5
10002604:	10a4      	asrs	r4, r4, #2
10002606:	2600      	movs	r6, #0
10002608:	42a6      	cmp	r6, r4
1000260a:	d109      	bne.n	10002620 <__libc_init_array+0x24>
1000260c:	4d0b      	ldr	r5, [pc, #44]	; (1000263c <__libc_init_array+0x40>)
1000260e:	4c0c      	ldr	r4, [pc, #48]	; (10002640 <__libc_init_array+0x44>)
10002610:	f000 f818 	bl	10002644 <_init>
10002614:	1b64      	subs	r4, r4, r5
10002616:	10a4      	asrs	r4, r4, #2
10002618:	2600      	movs	r6, #0
1000261a:	42a6      	cmp	r6, r4
1000261c:	d105      	bne.n	1000262a <__libc_init_array+0x2e>
1000261e:	bd70      	pop	{r4, r5, r6, pc}
10002620:	f855 3b04 	ldr.w	r3, [r5], #4
10002624:	4798      	blx	r3
10002626:	3601      	adds	r6, #1
10002628:	e7ee      	b.n	10002608 <__libc_init_array+0xc>
1000262a:	f855 3b04 	ldr.w	r3, [r5], #4
1000262e:	4798      	blx	r3
10002630:	3601      	adds	r6, #1
10002632:	e7f2      	b.n	1000261a <__libc_init_array+0x1e>
10002634:	100026ac 	.word	0x100026ac
10002638:	100026ac 	.word	0x100026ac
1000263c:	100026ac 	.word	0x100026ac
10002640:	100026b0 	.word	0x100026b0

10002644 <_init>:
10002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002646:	bf00      	nop
10002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000264a:	bc08      	pop	{r3}
1000264c:	469e      	mov	lr, r3
1000264e:	4770      	bx	lr

10002650 <_fini>:
10002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002652:	bf00      	nop
10002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002656:	bc08      	pop	{r3}
10002658:	469e      	mov	lr, r3
1000265a:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000265c <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000265c:	f8df d034 	ldr.w	sp, [pc, #52]	; 10002694 <LoopForever+0x2>
  movs  r1, #0
10002660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10002662:	e003      	b.n	1000266c <LoopCopyDataInit>

10002664 <CopyDataInit>:
  ldr  r3, =_sidata
10002664:	4b0c      	ldr	r3, [pc, #48]	; (10002698 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10002666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000266a:	3104      	adds	r1, #4

1000266c <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000266c:	480b      	ldr	r0, [pc, #44]	; (1000269c <LoopForever+0xa>)
  ldr  r3, =_edata
1000266e:	4b0c      	ldr	r3, [pc, #48]	; (100026a0 <LoopForever+0xe>)
  adds  r2, r0, r1
10002670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10002672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10002674:	d3f6      	bcc.n	10002664 <CopyDataInit>
  ldr  r2, =_sbss
10002676:	4a0b      	ldr	r2, [pc, #44]	; (100026a4 <LoopForever+0x12>)
  b  LoopFillZerobss
10002678:	e002      	b.n	10002680 <LoopFillZerobss>

1000267a <FillZerobss>:
  movs  r3, #0
1000267a:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000267c:	f842 3b04 	str.w	r3, [r2], #4

10002680 <LoopFillZerobss>:
  ldr  r3, = _ebss
10002680:	4b09      	ldr	r3, [pc, #36]	; (100026a8 <LoopForever+0x16>)
  cmp  r2, r3
10002682:	429a      	cmp	r2, r3
  bcc  FillZerobss
10002684:	d3f9      	bcc.n	1000267a <FillZerobss>
  bl  SystemInit
10002686:	f7fd fcdb 	bl	10000040 <SystemInit>
 bl __libc_init_array
1000268a:	f7ff ffb7 	bl	100025fc <__libc_init_array>
  bl main
1000268e:	f7fd fd39 	bl	10000104 <main>

10002692 <LoopForever>:
    b LoopForever
10002692:	e7fe      	b.n	10002692 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10002694:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002698:	100026b4 	.word	0x100026b4
  ldr  r0, =_sdata
1000269c:	10020000 	.word	0x10020000
  ldr  r3, =_edata
100026a0:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
100026a4:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
100026a8:	1002002c 	.word	0x1002002c
