
DTN_GPIO_P_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e8  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  100026e8  100026e8  000226e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002738  10002738  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002738  10002738  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  10002738  10002738  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002738  10002738  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002738  10002738  00022738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000273c  1000273c  0002273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  10002740  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000020  1002000c  1000274c  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002002c  1000276c  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   000084e9  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000012bd  00000000  00000000  00038568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000005c8  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000043b  00000000  00000000  00039df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00043f10  00000000  00000000  0003a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00009819  00000000  00000000  0007e13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bf3e5  00000000  00000000  00087954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001548  00000000  00000000  00246d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  00248284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	100026d0 	.word	0x100026d0

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	100026d0 	.word	0x100026d0

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	b086      	sub	sp, #24
10000090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000092:	1d3b      	adds	r3, r7, #4
10000094:	2200      	movs	r2, #0
10000096:	601a      	str	r2, [r3, #0]
10000098:	605a      	str	r2, [r3, #4]
1000009a:	609a      	str	r2, [r3, #8]
1000009c:	60da      	str	r2, [r3, #12]
1000009e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOZ_CLK_ENABLE();
100000a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000a4:	2201      	movs	r2, #1
100000a6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOZ, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5, GPIO_PIN_RESET);
100000aa:	2200      	movs	r2, #0
100000ac:	21e0      	movs	r1, #224	; 0xe0
100000ae:	480a      	ldr	r0, [pc, #40]	; (100000d8 <MX_GPIO_Init+0x4c>)
100000b0:	f000 fcac 	bl	10000a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PZ6 PZ7 PZ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_5;
100000b4:	23e0      	movs	r3, #224	; 0xe0
100000b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
100000b8:	2301      	movs	r3, #1
100000ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
100000bc:	2300      	movs	r3, #0
100000be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100000c0:	2300      	movs	r3, #0
100000c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOZ, &GPIO_InitStruct);
100000c4:	1d3b      	adds	r3, r7, #4
100000c6:	4619      	mov	r1, r3
100000c8:	4803      	ldr	r0, [pc, #12]	; (100000d8 <MX_GPIO_Init+0x4c>)
100000ca:	f000 faf5 	bl	100006b8 <HAL_GPIO_Init>

}
100000ce:	bf00      	nop
100000d0:	3718      	adds	r7, #24
100000d2:	46bd      	mov	sp, r7
100000d4:	bd80      	pop	{r7, pc}
100000d6:	bf00      	nop
100000d8:	54004000 	.word	0x54004000

100000dc <bsp_led_on>:

/* USER CODE BEGIN 2 */
void bsp_led_on()
{
100000dc:	b580      	push	{r7, lr}
100000de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOZ,GPIO_PIN_5,GPIO_PIN_SET);
100000e0:	2201      	movs	r2, #1
100000e2:	2120      	movs	r1, #32
100000e4:	4807      	ldr	r0, [pc, #28]	; (10000104 <bsp_led_on+0x28>)
100000e6:	f000 fc91 	bl	10000a0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOZ,GPIO_PIN_6,GPIO_PIN_SET);
100000ea:	2201      	movs	r2, #1
100000ec:	2140      	movs	r1, #64	; 0x40
100000ee:	4805      	ldr	r0, [pc, #20]	; (10000104 <bsp_led_on+0x28>)
100000f0:	f000 fc8c 	bl	10000a0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOZ,GPIO_PIN_7,GPIO_PIN_SET);
100000f4:	2201      	movs	r2, #1
100000f6:	2180      	movs	r1, #128	; 0x80
100000f8:	4802      	ldr	r0, [pc, #8]	; (10000104 <bsp_led_on+0x28>)
100000fa:	f000 fc87 	bl	10000a0c <HAL_GPIO_WritePin>
}
100000fe:	bf00      	nop
10000100:	bd80      	pop	{r7, pc}
10000102:	bf00      	nop
10000104:	54004000 	.word	0x54004000

10000108 <bsp_led_off>:

void bsp_led_off()
{
10000108:	b580      	push	{r7, lr}
1000010a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOZ,GPIO_PIN_5,GPIO_PIN_RESET);
1000010c:	2200      	movs	r2, #0
1000010e:	2120      	movs	r1, #32
10000110:	4807      	ldr	r0, [pc, #28]	; (10000130 <bsp_led_off+0x28>)
10000112:	f000 fc7b 	bl	10000a0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOZ,GPIO_PIN_6,GPIO_PIN_RESET);
10000116:	2200      	movs	r2, #0
10000118:	2140      	movs	r1, #64	; 0x40
1000011a:	4805      	ldr	r0, [pc, #20]	; (10000130 <bsp_led_off+0x28>)
1000011c:	f000 fc76 	bl	10000a0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOZ,GPIO_PIN_7,GPIO_PIN_RESET);
10000120:	2200      	movs	r2, #0
10000122:	2180      	movs	r1, #128	; 0x80
10000124:	4802      	ldr	r0, [pc, #8]	; (10000130 <bsp_led_off+0x28>)
10000126:	f000 fc71 	bl	10000a0c <HAL_GPIO_WritePin>
}
1000012a:	bf00      	nop
1000012c:	bd80      	pop	{r7, pc}
1000012e:	bf00      	nop
10000130:	54004000 	.word	0x54004000

10000134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000134:	b580      	push	{r7, lr}
10000136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000138:	f000 f918 	bl	1000036c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
1000013c:	4b0b      	ldr	r3, [pc, #44]	; (1000016c <main+0x38>)
1000013e:	681b      	ldr	r3, [r3, #0]
10000140:	f003 0307 	and.w	r3, r3, #7
10000144:	2b04      	cmp	r3, #4
10000146:	d101      	bne.n	1000014c <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000148:	f000 f812 	bl	10000170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
1000014c:	f7ff ff9e 	bl	1000008c <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bsp_led_on();
10000150:	f7ff ffc4 	bl	100000dc <bsp_led_on>
	  HAL_Delay(500);
10000154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
10000158:	f000 f978 	bl	1000044c <HAL_Delay>
	  bsp_led_off();
1000015c:	f7ff ffd4 	bl	10000108 <bsp_led_off>
	  HAL_Delay(500);
10000160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
10000164:	f000 f972 	bl	1000044c <HAL_Delay>
  {
10000168:	e7f2      	b.n	10000150 <main+0x1c>
1000016a:	bf00      	nop
1000016c:	50020000 	.word	0x50020000

10000170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000170:	b580      	push	{r7, lr}
10000172:	b0d2      	sub	sp, #328	; 0x148
10000174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000176:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000017a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000017e:	4618      	mov	r0, r3
10000180:	f44f 738a 	mov.w	r3, #276	; 0x114
10000184:	461a      	mov	r2, r3
10000186:	2100      	movs	r1, #0
10000188:	f002 fa76 	bl	10002678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1000018c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000190:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000194:	4618      	mov	r0, r3
10000196:	2330      	movs	r3, #48	; 0x30
10000198:	461a      	mov	r2, r3
1000019a:	2100      	movs	r1, #0
1000019c:	f002 fa6c 	bl	10002678 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
100001a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001a8:	2202      	movs	r2, #2
100001aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100001ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001b4:	2201      	movs	r2, #1
100001b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100001b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001c0:	2200      	movs	r2, #0
100001c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
100001c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001cc:	2200      	movs	r2, #0
100001ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
100001d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001d8:	2200      	movs	r2, #0
100001da:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
100001dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001e4:	2200      	movs	r2, #0
100001e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100001ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001f2:	2200      	movs	r2, #0
100001f4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100001f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001fc:	4618      	mov	r0, r3
100001fe:	f000 fc1f 	bl	10000a40 <HAL_RCC_OscConfig>
10000202:	4603      	mov	r3, r0
10000204:	2b00      	cmp	r3, #0
10000206:	d001      	beq.n	1000020c <SystemClock_Config+0x9c>
  {
    Error_Handler();
10000208:	f000 f84a 	bl	100002a0 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
1000020c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000210:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000214:	22fe      	movs	r2, #254	; 0xfe
10000216:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000218:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000021c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000220:	2200      	movs	r2, #0
10000222:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000224:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000228:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000022c:	2200      	movs	r2, #0
1000022e:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
10000230:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000234:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000238:	2200      	movs	r2, #0
1000023a:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000023c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000240:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000244:	2200      	movs	r2, #0
10000246:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000248:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000024c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000250:	2200      	movs	r2, #0
10000252:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000254:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000258:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000025c:	2200      	movs	r2, #0
1000025e:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
10000260:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000264:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000268:	2200      	movs	r2, #0
1000026a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
1000026c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000270:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000274:	2200      	movs	r2, #0
10000276:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
10000278:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000027c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000280:	2200      	movs	r2, #0
10000282:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000284:	1d3b      	adds	r3, r7, #4
10000286:	4618      	mov	r0, r3
10000288:	f001 f978 	bl	1000157c <HAL_RCC_ClockConfig>
1000028c:	4603      	mov	r3, r0
1000028e:	2b00      	cmp	r3, #0
10000290:	d001      	beq.n	10000296 <SystemClock_Config+0x126>
  {
    Error_Handler();
10000292:	f000 f805 	bl	100002a0 <Error_Handler>
  }
}
10000296:	bf00      	nop
10000298:	f507 77a4 	add.w	r7, r7, #328	; 0x148
1000029c:	46bd      	mov	sp, r7
1000029e:	bd80      	pop	{r7, pc}

100002a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100002a0:	b480      	push	{r7}
100002a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100002a4:	b672      	cpsid	i
}
100002a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100002a8:	e7fe      	b.n	100002a8 <Error_Handler+0x8>

100002aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100002aa:	b580      	push	{r7, lr}
100002ac:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100002ae:	2200      	movs	r2, #0
100002b0:	2101      	movs	r1, #1
100002b2:	f06f 000b 	mvn.w	r0, #11
100002b6:	f000 f9c8 	bl	1000064a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100002ba:	2200      	movs	r2, #0
100002bc:	2101      	movs	r1, #1
100002be:	f06f 000a 	mvn.w	r0, #10
100002c2:	f000 f9c2 	bl	1000064a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100002c6:	2200      	movs	r2, #0
100002c8:	2101      	movs	r1, #1
100002ca:	f06f 0009 	mvn.w	r0, #9
100002ce:	f000 f9bc 	bl	1000064a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100002d2:	2200      	movs	r2, #0
100002d4:	2101      	movs	r1, #1
100002d6:	f06f 0004 	mvn.w	r0, #4
100002da:	f000 f9b6 	bl	1000064a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100002de:	2200      	movs	r2, #0
100002e0:	2101      	movs	r1, #1
100002e2:	f06f 0003 	mvn.w	r0, #3
100002e6:	f000 f9b0 	bl	1000064a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
100002ea:	2200      	movs	r2, #0
100002ec:	2101      	movs	r1, #1
100002ee:	f06f 0001 	mvn.w	r0, #1
100002f2:	f000 f9aa 	bl	1000064a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100002f6:	2200      	movs	r2, #0
100002f8:	2100      	movs	r1, #0
100002fa:	2091      	movs	r0, #145	; 0x91
100002fc:	f000 f9a5 	bl	1000064a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000300:	2091      	movs	r0, #145	; 0x91
10000302:	f000 f9be 	bl	10000682 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000306:	bf00      	nop
10000308:	bd80      	pop	{r7, pc}

1000030a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1000030a:	b480      	push	{r7}
1000030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1000030e:	e7fe      	b.n	1000030e <NMI_Handler+0x4>

10000310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000310:	b480      	push	{r7}
10000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000314:	e7fe      	b.n	10000314 <HardFault_Handler+0x4>

10000316 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000316:	b480      	push	{r7}
10000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
1000031a:	e7fe      	b.n	1000031a <MemManage_Handler+0x4>

1000031c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
1000031c:	b480      	push	{r7}
1000031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000320:	e7fe      	b.n	10000320 <BusFault_Handler+0x4>

10000322 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10000322:	b480      	push	{r7}
10000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000326:	e7fe      	b.n	10000326 <UsageFault_Handler+0x4>

10000328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000328:	b480      	push	{r7}
1000032a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000032c:	bf00      	nop
1000032e:	46bd      	mov	sp, r7
10000330:	f85d 7b04 	ldr.w	r7, [sp], #4
10000334:	4770      	bx	lr

10000336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000336:	b480      	push	{r7}
10000338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000033a:	bf00      	nop
1000033c:	46bd      	mov	sp, r7
1000033e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000342:	4770      	bx	lr

10000344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000344:	b480      	push	{r7}
10000346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000348:	bf00      	nop
1000034a:	46bd      	mov	sp, r7
1000034c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000350:	4770      	bx	lr

10000352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000352:	b580      	push	{r7, lr}
10000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000356:	f000 f859 	bl	1000040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000035a:	bf00      	nop
1000035c:	bd80      	pop	{r7, pc}

1000035e <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000035e:	b580      	push	{r7, lr}
10000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000362:	f001 fd29 	bl	10001db8 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000366:	bf00      	nop
10000368:	bd80      	pop	{r7, pc}

1000036a <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
1000036a:	e7fe      	b.n	1000036a <ADC1_IRQHandler>

1000036c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000036c:	b580      	push	{r7, lr}
1000036e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000370:	2003      	movs	r0, #3
10000372:	f000 f95f 	bl	10000634 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000376:	f001 fcde 	bl	10001d36 <HAL_RCC_GetSystemCoreClockFreq>
1000037a:	4603      	mov	r3, r0
1000037c:	4a07      	ldr	r2, [pc, #28]	; (1000039c <HAL_Init+0x30>)
1000037e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000380:	200f      	movs	r0, #15
10000382:	f000 f80d 	bl	100003a0 <HAL_InitTick>
10000386:	4603      	mov	r3, r0
10000388:	2b00      	cmp	r3, #0
1000038a:	d001      	beq.n	10000390 <HAL_Init+0x24>
  {
    return HAL_ERROR;
1000038c:	2301      	movs	r3, #1
1000038e:	e002      	b.n	10000396 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000390:	f7ff ff8b 	bl	100002aa <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000394:	2300      	movs	r3, #0
}
10000396:	4618      	mov	r0, r3
10000398:	bd80      	pop	{r7, pc}
1000039a:	bf00      	nop
1000039c:	10020000 	.word	0x10020000

100003a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100003a0:	b580      	push	{r7, lr}
100003a2:	b082      	sub	sp, #8
100003a4:	af00      	add	r7, sp, #0
100003a6:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100003a8:	4b15      	ldr	r3, [pc, #84]	; (10000400 <HAL_InitTick+0x60>)
100003aa:	781b      	ldrb	r3, [r3, #0]
100003ac:	2b00      	cmp	r3, #0
100003ae:	d101      	bne.n	100003b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100003b0:	2301      	movs	r3, #1
100003b2:	e021      	b.n	100003f8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100003b4:	4b13      	ldr	r3, [pc, #76]	; (10000404 <HAL_InitTick+0x64>)
100003b6:	681a      	ldr	r2, [r3, #0]
100003b8:	4b11      	ldr	r3, [pc, #68]	; (10000400 <HAL_InitTick+0x60>)
100003ba:	781b      	ldrb	r3, [r3, #0]
100003bc:	4619      	mov	r1, r3
100003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100003c2:	fbb3 f3f1 	udiv	r3, r3, r1
100003c6:	fbb2 f3f3 	udiv	r3, r2, r3
100003ca:	4618      	mov	r0, r3
100003cc:	f000 f967 	bl	1000069e <HAL_SYSTICK_Config>
100003d0:	4603      	mov	r3, r0
100003d2:	2b00      	cmp	r3, #0
100003d4:	d001      	beq.n	100003da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100003d6:	2301      	movs	r3, #1
100003d8:	e00e      	b.n	100003f8 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100003da:	687b      	ldr	r3, [r7, #4]
100003dc:	2b0f      	cmp	r3, #15
100003de:	d80a      	bhi.n	100003f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100003e0:	2200      	movs	r2, #0
100003e2:	6879      	ldr	r1, [r7, #4]
100003e4:	f04f 30ff 	mov.w	r0, #4294967295
100003e8:	f000 f92f 	bl	1000064a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100003ec:	4a06      	ldr	r2, [pc, #24]	; (10000408 <HAL_InitTick+0x68>)
100003ee:	687b      	ldr	r3, [r7, #4]
100003f0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100003f2:	2300      	movs	r3, #0
100003f4:	e000      	b.n	100003f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
100003f6:	2301      	movs	r3, #1
}
100003f8:	4618      	mov	r0, r3
100003fa:	3708      	adds	r7, #8
100003fc:	46bd      	mov	sp, r7
100003fe:	bd80      	pop	{r7, pc}
10000400:	10020008 	.word	0x10020008
10000404:	10020000 	.word	0x10020000
10000408:	10020004 	.word	0x10020004

1000040c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1000040c:	b480      	push	{r7}
1000040e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000410:	4b06      	ldr	r3, [pc, #24]	; (1000042c <HAL_IncTick+0x20>)
10000412:	781b      	ldrb	r3, [r3, #0]
10000414:	461a      	mov	r2, r3
10000416:	4b06      	ldr	r3, [pc, #24]	; (10000430 <HAL_IncTick+0x24>)
10000418:	681b      	ldr	r3, [r3, #0]
1000041a:	4413      	add	r3, r2
1000041c:	4a04      	ldr	r2, [pc, #16]	; (10000430 <HAL_IncTick+0x24>)
1000041e:	6013      	str	r3, [r2, #0]
}
10000420:	bf00      	nop
10000422:	46bd      	mov	sp, r7
10000424:	f85d 7b04 	ldr.w	r7, [sp], #4
10000428:	4770      	bx	lr
1000042a:	bf00      	nop
1000042c:	10020008 	.word	0x10020008
10000430:	10020028 	.word	0x10020028

10000434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000434:	b480      	push	{r7}
10000436:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000438:	4b03      	ldr	r3, [pc, #12]	; (10000448 <HAL_GetTick+0x14>)
1000043a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
1000043c:	4618      	mov	r0, r3
1000043e:	46bd      	mov	sp, r7
10000440:	f85d 7b04 	ldr.w	r7, [sp], #4
10000444:	4770      	bx	lr
10000446:	bf00      	nop
10000448:	10020028 	.word	0x10020028

1000044c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
1000044c:	b580      	push	{r7, lr}
1000044e:	b084      	sub	sp, #16
10000450:	af00      	add	r7, sp, #0
10000452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000454:	f7ff ffee 	bl	10000434 <HAL_GetTick>
10000458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
1000045a:	687b      	ldr	r3, [r7, #4]
1000045c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1000045e:	68fb      	ldr	r3, [r7, #12]
10000460:	f1b3 3fff 	cmp.w	r3, #4294967295
10000464:	d005      	beq.n	10000472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000466:	4b0a      	ldr	r3, [pc, #40]	; (10000490 <HAL_Delay+0x44>)
10000468:	781b      	ldrb	r3, [r3, #0]
1000046a:	461a      	mov	r2, r3
1000046c:	68fb      	ldr	r3, [r7, #12]
1000046e:	4413      	add	r3, r2
10000470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000472:	bf00      	nop
10000474:	f7ff ffde 	bl	10000434 <HAL_GetTick>
10000478:	4602      	mov	r2, r0
1000047a:	68bb      	ldr	r3, [r7, #8]
1000047c:	1ad3      	subs	r3, r2, r3
1000047e:	68fa      	ldr	r2, [r7, #12]
10000480:	429a      	cmp	r2, r3
10000482:	d8f7      	bhi.n	10000474 <HAL_Delay+0x28>
  {
  }
}
10000484:	bf00      	nop
10000486:	bf00      	nop
10000488:	3710      	adds	r7, #16
1000048a:	46bd      	mov	sp, r7
1000048c:	bd80      	pop	{r7, pc}
1000048e:	bf00      	nop
10000490:	10020008 	.word	0x10020008

10000494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000494:	b480      	push	{r7}
10000496:	b085      	sub	sp, #20
10000498:	af00      	add	r7, sp, #0
1000049a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
1000049c:	687b      	ldr	r3, [r7, #4]
1000049e:	f003 0307 	and.w	r3, r3, #7
100004a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100004a4:	4b0c      	ldr	r3, [pc, #48]	; (100004d8 <__NVIC_SetPriorityGrouping+0x44>)
100004a6:	68db      	ldr	r3, [r3, #12]
100004a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100004aa:	68ba      	ldr	r2, [r7, #8]
100004ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
100004b0:	4013      	ands	r3, r2
100004b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100004b4:	68fb      	ldr	r3, [r7, #12]
100004b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100004b8:	68bb      	ldr	r3, [r7, #8]
100004ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100004bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100004c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100004c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100004c6:	4a04      	ldr	r2, [pc, #16]	; (100004d8 <__NVIC_SetPriorityGrouping+0x44>)
100004c8:	68bb      	ldr	r3, [r7, #8]
100004ca:	60d3      	str	r3, [r2, #12]
}
100004cc:	bf00      	nop
100004ce:	3714      	adds	r7, #20
100004d0:	46bd      	mov	sp, r7
100004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100004d6:	4770      	bx	lr
100004d8:	e000ed00 	.word	0xe000ed00

100004dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100004dc:	b480      	push	{r7}
100004de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100004e0:	4b04      	ldr	r3, [pc, #16]	; (100004f4 <__NVIC_GetPriorityGrouping+0x18>)
100004e2:	68db      	ldr	r3, [r3, #12]
100004e4:	0a1b      	lsrs	r3, r3, #8
100004e6:	f003 0307 	and.w	r3, r3, #7
}
100004ea:	4618      	mov	r0, r3
100004ec:	46bd      	mov	sp, r7
100004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100004f2:	4770      	bx	lr
100004f4:	e000ed00 	.word	0xe000ed00

100004f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100004f8:	b480      	push	{r7}
100004fa:	b083      	sub	sp, #12
100004fc:	af00      	add	r7, sp, #0
100004fe:	4603      	mov	r3, r0
10000500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000506:	2b00      	cmp	r3, #0
10000508:	db0b      	blt.n	10000522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000050a:	88fb      	ldrh	r3, [r7, #6]
1000050c:	f003 021f 	and.w	r2, r3, #31
10000510:	4907      	ldr	r1, [pc, #28]	; (10000530 <__NVIC_EnableIRQ+0x38>)
10000512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000516:	095b      	lsrs	r3, r3, #5
10000518:	2001      	movs	r0, #1
1000051a:	fa00 f202 	lsl.w	r2, r0, r2
1000051e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000522:	bf00      	nop
10000524:	370c      	adds	r7, #12
10000526:	46bd      	mov	sp, r7
10000528:	f85d 7b04 	ldr.w	r7, [sp], #4
1000052c:	4770      	bx	lr
1000052e:	bf00      	nop
10000530:	e000e100 	.word	0xe000e100

10000534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000534:	b480      	push	{r7}
10000536:	b083      	sub	sp, #12
10000538:	af00      	add	r7, sp, #0
1000053a:	4603      	mov	r3, r0
1000053c:	6039      	str	r1, [r7, #0]
1000053e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000544:	2b00      	cmp	r3, #0
10000546:	db0a      	blt.n	1000055e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000548:	683b      	ldr	r3, [r7, #0]
1000054a:	b2da      	uxtb	r2, r3
1000054c:	490c      	ldr	r1, [pc, #48]	; (10000580 <__NVIC_SetPriority+0x4c>)
1000054e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000552:	0112      	lsls	r2, r2, #4
10000554:	b2d2      	uxtb	r2, r2
10000556:	440b      	add	r3, r1
10000558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
1000055c:	e00a      	b.n	10000574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000055e:	683b      	ldr	r3, [r7, #0]
10000560:	b2da      	uxtb	r2, r3
10000562:	4908      	ldr	r1, [pc, #32]	; (10000584 <__NVIC_SetPriority+0x50>)
10000564:	88fb      	ldrh	r3, [r7, #6]
10000566:	f003 030f 	and.w	r3, r3, #15
1000056a:	3b04      	subs	r3, #4
1000056c:	0112      	lsls	r2, r2, #4
1000056e:	b2d2      	uxtb	r2, r2
10000570:	440b      	add	r3, r1
10000572:	761a      	strb	r2, [r3, #24]
}
10000574:	bf00      	nop
10000576:	370c      	adds	r7, #12
10000578:	46bd      	mov	sp, r7
1000057a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000057e:	4770      	bx	lr
10000580:	e000e100 	.word	0xe000e100
10000584:	e000ed00 	.word	0xe000ed00

10000588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000588:	b480      	push	{r7}
1000058a:	b089      	sub	sp, #36	; 0x24
1000058c:	af00      	add	r7, sp, #0
1000058e:	60f8      	str	r0, [r7, #12]
10000590:	60b9      	str	r1, [r7, #8]
10000592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000594:	68fb      	ldr	r3, [r7, #12]
10000596:	f003 0307 	and.w	r3, r3, #7
1000059a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
1000059c:	69fb      	ldr	r3, [r7, #28]
1000059e:	f1c3 0307 	rsb	r3, r3, #7
100005a2:	2b04      	cmp	r3, #4
100005a4:	bf28      	it	cs
100005a6:	2304      	movcs	r3, #4
100005a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
100005aa:	69fb      	ldr	r3, [r7, #28]
100005ac:	3304      	adds	r3, #4
100005ae:	2b06      	cmp	r3, #6
100005b0:	d902      	bls.n	100005b8 <NVIC_EncodePriority+0x30>
100005b2:	69fb      	ldr	r3, [r7, #28]
100005b4:	3b03      	subs	r3, #3
100005b6:	e000      	b.n	100005ba <NVIC_EncodePriority+0x32>
100005b8:	2300      	movs	r3, #0
100005ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100005bc:	f04f 32ff 	mov.w	r2, #4294967295
100005c0:	69bb      	ldr	r3, [r7, #24]
100005c2:	fa02 f303 	lsl.w	r3, r2, r3
100005c6:	43da      	mvns	r2, r3
100005c8:	68bb      	ldr	r3, [r7, #8]
100005ca:	401a      	ands	r2, r3
100005cc:	697b      	ldr	r3, [r7, #20]
100005ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100005d0:	f04f 31ff 	mov.w	r1, #4294967295
100005d4:	697b      	ldr	r3, [r7, #20]
100005d6:	fa01 f303 	lsl.w	r3, r1, r3
100005da:	43d9      	mvns	r1, r3
100005dc:	687b      	ldr	r3, [r7, #4]
100005de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100005e0:	4313      	orrs	r3, r2
         );
}
100005e2:	4618      	mov	r0, r3
100005e4:	3724      	adds	r7, #36	; 0x24
100005e6:	46bd      	mov	sp, r7
100005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100005ec:	4770      	bx	lr
	...

100005f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100005f0:	b580      	push	{r7, lr}
100005f2:	b082      	sub	sp, #8
100005f4:	af00      	add	r7, sp, #0
100005f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100005f8:	687b      	ldr	r3, [r7, #4]
100005fa:	3b01      	subs	r3, #1
100005fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000600:	d301      	bcc.n	10000606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000602:	2301      	movs	r3, #1
10000604:	e00f      	b.n	10000626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000606:	4a0a      	ldr	r2, [pc, #40]	; (10000630 <SysTick_Config+0x40>)
10000608:	687b      	ldr	r3, [r7, #4]
1000060a:	3b01      	subs	r3, #1
1000060c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1000060e:	210f      	movs	r1, #15
10000610:	f04f 30ff 	mov.w	r0, #4294967295
10000614:	f7ff ff8e 	bl	10000534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000618:	4b05      	ldr	r3, [pc, #20]	; (10000630 <SysTick_Config+0x40>)
1000061a:	2200      	movs	r2, #0
1000061c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000061e:	4b04      	ldr	r3, [pc, #16]	; (10000630 <SysTick_Config+0x40>)
10000620:	2207      	movs	r2, #7
10000622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000624:	2300      	movs	r3, #0
}
10000626:	4618      	mov	r0, r3
10000628:	3708      	adds	r7, #8
1000062a:	46bd      	mov	sp, r7
1000062c:	bd80      	pop	{r7, pc}
1000062e:	bf00      	nop
10000630:	e000e010 	.word	0xe000e010

10000634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000634:	b580      	push	{r7, lr}
10000636:	b082      	sub	sp, #8
10000638:	af00      	add	r7, sp, #0
1000063a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
1000063c:	6878      	ldr	r0, [r7, #4]
1000063e:	f7ff ff29 	bl	10000494 <__NVIC_SetPriorityGrouping>
}
10000642:	bf00      	nop
10000644:	3708      	adds	r7, #8
10000646:	46bd      	mov	sp, r7
10000648:	bd80      	pop	{r7, pc}

1000064a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000064a:	b580      	push	{r7, lr}
1000064c:	b086      	sub	sp, #24
1000064e:	af00      	add	r7, sp, #0
10000650:	4603      	mov	r3, r0
10000652:	60b9      	str	r1, [r7, #8]
10000654:	607a      	str	r2, [r7, #4]
10000656:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000658:	2300      	movs	r3, #0
1000065a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
1000065c:	f7ff ff3e 	bl	100004dc <__NVIC_GetPriorityGrouping>
10000660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000662:	687a      	ldr	r2, [r7, #4]
10000664:	68b9      	ldr	r1, [r7, #8]
10000666:	6978      	ldr	r0, [r7, #20]
10000668:	f7ff ff8e 	bl	10000588 <NVIC_EncodePriority>
1000066c:	4602      	mov	r2, r0
1000066e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000672:	4611      	mov	r1, r2
10000674:	4618      	mov	r0, r3
10000676:	f7ff ff5d 	bl	10000534 <__NVIC_SetPriority>
}
1000067a:	bf00      	nop
1000067c:	3718      	adds	r7, #24
1000067e:	46bd      	mov	sp, r7
10000680:	bd80      	pop	{r7, pc}

10000682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000682:	b580      	push	{r7, lr}
10000684:	b082      	sub	sp, #8
10000686:	af00      	add	r7, sp, #0
10000688:	4603      	mov	r3, r0
1000068a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1000068c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000690:	4618      	mov	r0, r3
10000692:	f7ff ff31 	bl	100004f8 <__NVIC_EnableIRQ>
}
10000696:	bf00      	nop
10000698:	3708      	adds	r7, #8
1000069a:	46bd      	mov	sp, r7
1000069c:	bd80      	pop	{r7, pc}

1000069e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000069e:	b580      	push	{r7, lr}
100006a0:	b082      	sub	sp, #8
100006a2:	af00      	add	r7, sp, #0
100006a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100006a6:	6878      	ldr	r0, [r7, #4]
100006a8:	f7ff ffa2 	bl	100005f0 <SysTick_Config>
100006ac:	4603      	mov	r3, r0
}
100006ae:	4618      	mov	r0, r3
100006b0:	3708      	adds	r7, #8
100006b2:	46bd      	mov	sp, r7
100006b4:	bd80      	pop	{r7, pc}
	...

100006b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100006b8:	b480      	push	{r7}
100006ba:	b089      	sub	sp, #36	; 0x24
100006bc:	af00      	add	r7, sp, #0
100006be:	6078      	str	r0, [r7, #4]
100006c0:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100006c2:	4b8a      	ldr	r3, [pc, #552]	; (100008ec <HAL_GPIO_Init+0x234>)
100006c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100006c6:	2300      	movs	r3, #0
100006c8:	61fb      	str	r3, [r7, #28]
100006ca:	e191      	b.n	100009f0 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100006cc:	2201      	movs	r2, #1
100006ce:	69fb      	ldr	r3, [r7, #28]
100006d0:	fa02 f303 	lsl.w	r3, r2, r3
100006d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100006d6:	683b      	ldr	r3, [r7, #0]
100006d8:	681b      	ldr	r3, [r3, #0]
100006da:	693a      	ldr	r2, [r7, #16]
100006dc:	4013      	ands	r3, r2
100006de:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100006e0:	68fa      	ldr	r2, [r7, #12]
100006e2:	693b      	ldr	r3, [r7, #16]
100006e4:	429a      	cmp	r2, r3
100006e6:	f040 8180 	bne.w	100009ea <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100006ea:	683b      	ldr	r3, [r7, #0]
100006ec:	685b      	ldr	r3, [r3, #4]
100006ee:	2b02      	cmp	r3, #2
100006f0:	d003      	beq.n	100006fa <HAL_GPIO_Init+0x42>
100006f2:	683b      	ldr	r3, [r7, #0]
100006f4:	685b      	ldr	r3, [r3, #4]
100006f6:	2b12      	cmp	r3, #18
100006f8:	d123      	bne.n	10000742 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100006fa:	69fb      	ldr	r3, [r7, #28]
100006fc:	08da      	lsrs	r2, r3, #3
100006fe:	687b      	ldr	r3, [r7, #4]
10000700:	3208      	adds	r2, #8
10000702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10000706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000708:	69fb      	ldr	r3, [r7, #28]
1000070a:	f003 0307 	and.w	r3, r3, #7
1000070e:	009b      	lsls	r3, r3, #2
10000710:	220f      	movs	r2, #15
10000712:	fa02 f303 	lsl.w	r3, r2, r3
10000716:	43db      	mvns	r3, r3
10000718:	69ba      	ldr	r2, [r7, #24]
1000071a:	4013      	ands	r3, r2
1000071c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
1000071e:	683b      	ldr	r3, [r7, #0]
10000720:	691a      	ldr	r2, [r3, #16]
10000722:	69fb      	ldr	r3, [r7, #28]
10000724:	f003 0307 	and.w	r3, r3, #7
10000728:	009b      	lsls	r3, r3, #2
1000072a:	fa02 f303 	lsl.w	r3, r2, r3
1000072e:	69ba      	ldr	r2, [r7, #24]
10000730:	4313      	orrs	r3, r2
10000732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000734:	69fb      	ldr	r3, [r7, #28]
10000736:	08da      	lsrs	r2, r3, #3
10000738:	687b      	ldr	r3, [r7, #4]
1000073a:	3208      	adds	r2, #8
1000073c:	69b9      	ldr	r1, [r7, #24]
1000073e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000742:	687b      	ldr	r3, [r7, #4]
10000744:	681b      	ldr	r3, [r3, #0]
10000746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000748:	69fb      	ldr	r3, [r7, #28]
1000074a:	005b      	lsls	r3, r3, #1
1000074c:	2203      	movs	r2, #3
1000074e:	fa02 f303 	lsl.w	r3, r2, r3
10000752:	43db      	mvns	r3, r3
10000754:	69ba      	ldr	r2, [r7, #24]
10000756:	4013      	ands	r3, r2
10000758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
1000075a:	683b      	ldr	r3, [r7, #0]
1000075c:	685b      	ldr	r3, [r3, #4]
1000075e:	f003 0203 	and.w	r2, r3, #3
10000762:	69fb      	ldr	r3, [r7, #28]
10000764:	005b      	lsls	r3, r3, #1
10000766:	fa02 f303 	lsl.w	r3, r2, r3
1000076a:	69ba      	ldr	r2, [r7, #24]
1000076c:	4313      	orrs	r3, r2
1000076e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10000770:	687b      	ldr	r3, [r7, #4]
10000772:	69ba      	ldr	r2, [r7, #24]
10000774:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000776:	683b      	ldr	r3, [r7, #0]
10000778:	685b      	ldr	r3, [r3, #4]
1000077a:	2b01      	cmp	r3, #1
1000077c:	d00b      	beq.n	10000796 <HAL_GPIO_Init+0xde>
1000077e:	683b      	ldr	r3, [r7, #0]
10000780:	685b      	ldr	r3, [r3, #4]
10000782:	2b02      	cmp	r3, #2
10000784:	d007      	beq.n	10000796 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000786:	683b      	ldr	r3, [r7, #0]
10000788:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000078a:	2b11      	cmp	r3, #17
1000078c:	d003      	beq.n	10000796 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000078e:	683b      	ldr	r3, [r7, #0]
10000790:	685b      	ldr	r3, [r3, #4]
10000792:	2b12      	cmp	r3, #18
10000794:	d130      	bne.n	100007f8 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000796:	687b      	ldr	r3, [r7, #4]
10000798:	689b      	ldr	r3, [r3, #8]
1000079a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
1000079c:	69fb      	ldr	r3, [r7, #28]
1000079e:	005b      	lsls	r3, r3, #1
100007a0:	2203      	movs	r2, #3
100007a2:	fa02 f303 	lsl.w	r3, r2, r3
100007a6:	43db      	mvns	r3, r3
100007a8:	69ba      	ldr	r2, [r7, #24]
100007aa:	4013      	ands	r3, r2
100007ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
100007ae:	683b      	ldr	r3, [r7, #0]
100007b0:	68da      	ldr	r2, [r3, #12]
100007b2:	69fb      	ldr	r3, [r7, #28]
100007b4:	005b      	lsls	r3, r3, #1
100007b6:	fa02 f303 	lsl.w	r3, r2, r3
100007ba:	69ba      	ldr	r2, [r7, #24]
100007bc:	4313      	orrs	r3, r2
100007be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
100007c0:	687b      	ldr	r3, [r7, #4]
100007c2:	69ba      	ldr	r2, [r7, #24]
100007c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100007c6:	687b      	ldr	r3, [r7, #4]
100007c8:	685b      	ldr	r3, [r3, #4]
100007ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100007cc:	2201      	movs	r2, #1
100007ce:	69fb      	ldr	r3, [r7, #28]
100007d0:	fa02 f303 	lsl.w	r3, r2, r3
100007d4:	43db      	mvns	r3, r3
100007d6:	69ba      	ldr	r2, [r7, #24]
100007d8:	4013      	ands	r3, r2
100007da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100007dc:	683b      	ldr	r3, [r7, #0]
100007de:	685b      	ldr	r3, [r3, #4]
100007e0:	091b      	lsrs	r3, r3, #4
100007e2:	f003 0201 	and.w	r2, r3, #1
100007e6:	69fb      	ldr	r3, [r7, #28]
100007e8:	fa02 f303 	lsl.w	r3, r2, r3
100007ec:	69ba      	ldr	r2, [r7, #24]
100007ee:	4313      	orrs	r3, r2
100007f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100007f2:	687b      	ldr	r3, [r7, #4]
100007f4:	69ba      	ldr	r2, [r7, #24]
100007f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100007f8:	687b      	ldr	r3, [r7, #4]
100007fa:	68db      	ldr	r3, [r3, #12]
100007fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
100007fe:	69fb      	ldr	r3, [r7, #28]
10000800:	005b      	lsls	r3, r3, #1
10000802:	2203      	movs	r2, #3
10000804:	fa02 f303 	lsl.w	r3, r2, r3
10000808:	43db      	mvns	r3, r3
1000080a:	69ba      	ldr	r2, [r7, #24]
1000080c:	4013      	ands	r3, r2
1000080e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000810:	683b      	ldr	r3, [r7, #0]
10000812:	689a      	ldr	r2, [r3, #8]
10000814:	69fb      	ldr	r3, [r7, #28]
10000816:	005b      	lsls	r3, r3, #1
10000818:	fa02 f303 	lsl.w	r3, r2, r3
1000081c:	69ba      	ldr	r2, [r7, #24]
1000081e:	4313      	orrs	r3, r2
10000820:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000822:	687b      	ldr	r3, [r7, #4]
10000824:	69ba      	ldr	r2, [r7, #24]
10000826:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000828:	683b      	ldr	r3, [r7, #0]
1000082a:	685b      	ldr	r3, [r3, #4]
1000082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10000830:	2b00      	cmp	r3, #0
10000832:	f000 80da 	beq.w	100009ea <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000836:	4a2e      	ldr	r2, [pc, #184]	; (100008f0 <HAL_GPIO_Init+0x238>)
10000838:	69fb      	ldr	r3, [r7, #28]
1000083a:	089b      	lsrs	r3, r3, #2
1000083c:	3318      	adds	r3, #24
1000083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000844:	69fb      	ldr	r3, [r7, #28]
10000846:	f003 0303 	and.w	r3, r3, #3
1000084a:	00db      	lsls	r3, r3, #3
1000084c:	22ff      	movs	r2, #255	; 0xff
1000084e:	fa02 f303 	lsl.w	r3, r2, r3
10000852:	43db      	mvns	r3, r3
10000854:	69ba      	ldr	r2, [r7, #24]
10000856:	4013      	ands	r3, r2
10000858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
1000085a:	687b      	ldr	r3, [r7, #4]
1000085c:	4a25      	ldr	r2, [pc, #148]	; (100008f4 <HAL_GPIO_Init+0x23c>)
1000085e:	4293      	cmp	r3, r2
10000860:	d05e      	beq.n	10000920 <HAL_GPIO_Init+0x268>
10000862:	687b      	ldr	r3, [r7, #4]
10000864:	4a24      	ldr	r2, [pc, #144]	; (100008f8 <HAL_GPIO_Init+0x240>)
10000866:	4293      	cmp	r3, r2
10000868:	d03d      	beq.n	100008e6 <HAL_GPIO_Init+0x22e>
1000086a:	687b      	ldr	r3, [r7, #4]
1000086c:	4a23      	ldr	r2, [pc, #140]	; (100008fc <HAL_GPIO_Init+0x244>)
1000086e:	4293      	cmp	r3, r2
10000870:	d037      	beq.n	100008e2 <HAL_GPIO_Init+0x22a>
10000872:	687b      	ldr	r3, [r7, #4]
10000874:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000878:	d031      	beq.n	100008de <HAL_GPIO_Init+0x226>
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	4a20      	ldr	r2, [pc, #128]	; (10000900 <HAL_GPIO_Init+0x248>)
1000087e:	4293      	cmp	r3, r2
10000880:	d02b      	beq.n	100008da <HAL_GPIO_Init+0x222>
10000882:	687b      	ldr	r3, [r7, #4]
10000884:	4a1f      	ldr	r2, [pc, #124]	; (10000904 <HAL_GPIO_Init+0x24c>)
10000886:	4293      	cmp	r3, r2
10000888:	d025      	beq.n	100008d6 <HAL_GPIO_Init+0x21e>
1000088a:	687b      	ldr	r3, [r7, #4]
1000088c:	4a1e      	ldr	r2, [pc, #120]	; (10000908 <HAL_GPIO_Init+0x250>)
1000088e:	4293      	cmp	r3, r2
10000890:	d01f      	beq.n	100008d2 <HAL_GPIO_Init+0x21a>
10000892:	687b      	ldr	r3, [r7, #4]
10000894:	4a1d      	ldr	r2, [pc, #116]	; (1000090c <HAL_GPIO_Init+0x254>)
10000896:	4293      	cmp	r3, r2
10000898:	d019      	beq.n	100008ce <HAL_GPIO_Init+0x216>
1000089a:	687b      	ldr	r3, [r7, #4]
1000089c:	4a1c      	ldr	r2, [pc, #112]	; (10000910 <HAL_GPIO_Init+0x258>)
1000089e:	4293      	cmp	r3, r2
100008a0:	d013      	beq.n	100008ca <HAL_GPIO_Init+0x212>
100008a2:	687b      	ldr	r3, [r7, #4]
100008a4:	4a1b      	ldr	r2, [pc, #108]	; (10000914 <HAL_GPIO_Init+0x25c>)
100008a6:	4293      	cmp	r3, r2
100008a8:	d00d      	beq.n	100008c6 <HAL_GPIO_Init+0x20e>
100008aa:	687b      	ldr	r3, [r7, #4]
100008ac:	4a1a      	ldr	r2, [pc, #104]	; (10000918 <HAL_GPIO_Init+0x260>)
100008ae:	4293      	cmp	r3, r2
100008b0:	d007      	beq.n	100008c2 <HAL_GPIO_Init+0x20a>
100008b2:	687b      	ldr	r3, [r7, #4]
100008b4:	4a19      	ldr	r2, [pc, #100]	; (1000091c <HAL_GPIO_Init+0x264>)
100008b6:	4293      	cmp	r3, r2
100008b8:	d101      	bne.n	100008be <HAL_GPIO_Init+0x206>
100008ba:	230b      	movs	r3, #11
100008bc:	e031      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008be:	2319      	movs	r3, #25
100008c0:	e02f      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008c2:	230a      	movs	r3, #10
100008c4:	e02d      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008c6:	2309      	movs	r3, #9
100008c8:	e02b      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008ca:	2308      	movs	r3, #8
100008cc:	e029      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008ce:	2307      	movs	r3, #7
100008d0:	e027      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008d2:	2306      	movs	r3, #6
100008d4:	e025      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008d6:	2305      	movs	r3, #5
100008d8:	e023      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008da:	2304      	movs	r3, #4
100008dc:	e021      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008de:	2303      	movs	r3, #3
100008e0:	e01f      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008e2:	2302      	movs	r3, #2
100008e4:	e01d      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008e6:	2301      	movs	r3, #1
100008e8:	e01b      	b.n	10000922 <HAL_GPIO_Init+0x26a>
100008ea:	bf00      	nop
100008ec:	5000d0c0 	.word	0x5000d0c0
100008f0:	5000d000 	.word	0x5000d000
100008f4:	50002000 	.word	0x50002000
100008f8:	50003000 	.word	0x50003000
100008fc:	50004000 	.word	0x50004000
10000900:	50006000 	.word	0x50006000
10000904:	50007000 	.word	0x50007000
10000908:	50008000 	.word	0x50008000
1000090c:	50009000 	.word	0x50009000
10000910:	5000a000 	.word	0x5000a000
10000914:	5000b000 	.word	0x5000b000
10000918:	5000c000 	.word	0x5000c000
1000091c:	54004000 	.word	0x54004000
10000920:	2300      	movs	r3, #0
10000922:	69fa      	ldr	r2, [r7, #28]
10000924:	f002 0203 	and.w	r2, r2, #3
10000928:	00d2      	lsls	r2, r2, #3
1000092a:	4093      	lsls	r3, r2
1000092c:	461a      	mov	r2, r3
1000092e:	69bb      	ldr	r3, [r7, #24]
10000930:	4313      	orrs	r3, r2
10000932:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000934:	4934      	ldr	r1, [pc, #208]	; (10000a08 <HAL_GPIO_Init+0x350>)
10000936:	69fb      	ldr	r3, [r7, #28]
10000938:	089b      	lsrs	r3, r3, #2
1000093a:	3318      	adds	r3, #24
1000093c:	69ba      	ldr	r2, [r7, #24]
1000093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000942:	697b      	ldr	r3, [r7, #20]
10000944:	681b      	ldr	r3, [r3, #0]
10000946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000948:	68fb      	ldr	r3, [r7, #12]
1000094a:	43db      	mvns	r3, r3
1000094c:	69ba      	ldr	r2, [r7, #24]
1000094e:	4013      	ands	r3, r2
10000950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000952:	683b      	ldr	r3, [r7, #0]
10000954:	685b      	ldr	r3, [r3, #4]
10000956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
1000095a:	2b00      	cmp	r3, #0
1000095c:	d003      	beq.n	10000966 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
1000095e:	69ba      	ldr	r2, [r7, #24]
10000960:	68fb      	ldr	r3, [r7, #12]
10000962:	4313      	orrs	r3, r2
10000964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000966:	697b      	ldr	r3, [r7, #20]
10000968:	69ba      	ldr	r2, [r7, #24]
1000096a:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
1000096c:	697b      	ldr	r3, [r7, #20]
1000096e:	685b      	ldr	r3, [r3, #4]
10000970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000972:	68fb      	ldr	r3, [r7, #12]
10000974:	43db      	mvns	r3, r3
10000976:	69ba      	ldr	r2, [r7, #24]
10000978:	4013      	ands	r3, r2
1000097a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
1000097c:	683b      	ldr	r3, [r7, #0]
1000097e:	685b      	ldr	r3, [r3, #4]
10000980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000984:	2b00      	cmp	r3, #0
10000986:	d003      	beq.n	10000990 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000988:	69ba      	ldr	r2, [r7, #24]
1000098a:	68fb      	ldr	r3, [r7, #12]
1000098c:	4313      	orrs	r3, r2
1000098e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000990:	697b      	ldr	r3, [r7, #20]
10000992:	69ba      	ldr	r2, [r7, #24]
10000994:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000996:	4b1c      	ldr	r3, [pc, #112]	; (10000a08 <HAL_GPIO_Init+0x350>)
10000998:	681b      	ldr	r3, [r3, #0]
1000099a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000099c:	68fb      	ldr	r3, [r7, #12]
1000099e:	43db      	mvns	r3, r3
100009a0:	69ba      	ldr	r2, [r7, #24]
100009a2:	4013      	ands	r3, r2
100009a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100009a6:	683b      	ldr	r3, [r7, #0]
100009a8:	685b      	ldr	r3, [r3, #4]
100009aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100009ae:	2b00      	cmp	r3, #0
100009b0:	d003      	beq.n	100009ba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
100009b2:	69ba      	ldr	r2, [r7, #24]
100009b4:	68fb      	ldr	r3, [r7, #12]
100009b6:	4313      	orrs	r3, r2
100009b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
100009ba:	4a13      	ldr	r2, [pc, #76]	; (10000a08 <HAL_GPIO_Init+0x350>)
100009bc:	69bb      	ldr	r3, [r7, #24]
100009be:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
100009c0:	4b11      	ldr	r3, [pc, #68]	; (10000a08 <HAL_GPIO_Init+0x350>)
100009c2:	685b      	ldr	r3, [r3, #4]
100009c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100009c6:	68fb      	ldr	r3, [r7, #12]
100009c8:	43db      	mvns	r3, r3
100009ca:	69ba      	ldr	r2, [r7, #24]
100009cc:	4013      	ands	r3, r2
100009ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100009d0:	683b      	ldr	r3, [r7, #0]
100009d2:	685b      	ldr	r3, [r3, #4]
100009d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
100009d8:	2b00      	cmp	r3, #0
100009da:	d003      	beq.n	100009e4 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
100009dc:	69ba      	ldr	r2, [r7, #24]
100009de:	68fb      	ldr	r3, [r7, #12]
100009e0:	4313      	orrs	r3, r2
100009e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
100009e4:	4a08      	ldr	r2, [pc, #32]	; (10000a08 <HAL_GPIO_Init+0x350>)
100009e6:	69bb      	ldr	r3, [r7, #24]
100009e8:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
100009ea:	69fb      	ldr	r3, [r7, #28]
100009ec:	3301      	adds	r3, #1
100009ee:	61fb      	str	r3, [r7, #28]
100009f0:	69fb      	ldr	r3, [r7, #28]
100009f2:	2b0f      	cmp	r3, #15
100009f4:	f67f ae6a 	bls.w	100006cc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
100009f8:	bf00      	nop
100009fa:	bf00      	nop
100009fc:	3724      	adds	r7, #36	; 0x24
100009fe:	46bd      	mov	sp, r7
10000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a04:	4770      	bx	lr
10000a06:	bf00      	nop
10000a08:	5000d000 	.word	0x5000d000

10000a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10000a0c:	b480      	push	{r7}
10000a0e:	b083      	sub	sp, #12
10000a10:	af00      	add	r7, sp, #0
10000a12:	6078      	str	r0, [r7, #4]
10000a14:	460b      	mov	r3, r1
10000a16:	807b      	strh	r3, [r7, #2]
10000a18:	4613      	mov	r3, r2
10000a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10000a1c:	787b      	ldrb	r3, [r7, #1]
10000a1e:	2b00      	cmp	r3, #0
10000a20:	d003      	beq.n	10000a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10000a22:	887a      	ldrh	r2, [r7, #2]
10000a24:	687b      	ldr	r3, [r7, #4]
10000a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10000a28:	e003      	b.n	10000a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10000a2a:	887b      	ldrh	r3, [r7, #2]
10000a2c:	041a      	lsls	r2, r3, #16
10000a2e:	687b      	ldr	r3, [r7, #4]
10000a30:	619a      	str	r2, [r3, #24]
}
10000a32:	bf00      	nop
10000a34:	370c      	adds	r7, #12
10000a36:	46bd      	mov	sp, r7
10000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a3c:	4770      	bx	lr
	...

10000a40 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000a40:	b580      	push	{r7, lr}
10000a42:	b084      	sub	sp, #16
10000a44:	af00      	add	r7, sp, #0
10000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000a48:	2300      	movs	r3, #0
10000a4a:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000a4c:	687b      	ldr	r3, [r7, #4]
10000a4e:	2b00      	cmp	r3, #0
10000a50:	d101      	bne.n	10000a56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000a52:	2301      	movs	r3, #1
10000a54:	e320      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000a56:	687b      	ldr	r3, [r7, #4]
10000a58:	681b      	ldr	r3, [r3, #0]
10000a5a:	f003 0301 	and.w	r3, r3, #1
10000a5e:	2b00      	cmp	r3, #0
10000a60:	f000 8081 	beq.w	10000b66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000a64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a68:	6a1b      	ldr	r3, [r3, #32]
10000a6a:	f003 0303 	and.w	r3, r3, #3
10000a6e:	2b01      	cmp	r3, #1
10000a70:	d107      	bne.n	10000a82 <HAL_RCC_OscConfig+0x42>
10000a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a76:	6a1b      	ldr	r3, [r3, #32]
10000a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000a80:	d054      	beq.n	10000b2c <HAL_RCC_OscConfig+0xec>
10000a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000a88:	f003 0307 	and.w	r3, r3, #7
10000a8c:	2b01      	cmp	r3, #1
10000a8e:	d107      	bne.n	10000aa0 <HAL_RCC_OscConfig+0x60>
10000a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000a9e:	d045      	beq.n	10000b2c <HAL_RCC_OscConfig+0xec>
10000aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000aa6:	f003 0303 	and.w	r3, r3, #3
10000aaa:	2b01      	cmp	r3, #1
10000aac:	d107      	bne.n	10000abe <HAL_RCC_OscConfig+0x7e>
10000aae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000abc:	d036      	beq.n	10000b2c <HAL_RCC_OscConfig+0xec>
10000abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000ac4:	f003 0303 	and.w	r3, r3, #3
10000ac8:	2b01      	cmp	r3, #1
10000aca:	d10f      	bne.n	10000aec <HAL_RCC_OscConfig+0xac>
10000acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000ad4:	f003 0302 	and.w	r3, r3, #2
10000ad8:	2b02      	cmp	r3, #2
10000ada:	d027      	beq.n	10000b2c <HAL_RCC_OscConfig+0xec>
10000adc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000ae4:	f003 0302 	and.w	r3, r3, #2
10000ae8:	2b02      	cmp	r3, #2
10000aea:	d01f      	beq.n	10000b2c <HAL_RCC_OscConfig+0xec>
10000aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000af0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000af4:	f003 0303 	and.w	r3, r3, #3
10000af8:	2b01      	cmp	r3, #1
10000afa:	d107      	bne.n	10000b0c <HAL_RCC_OscConfig+0xcc>
10000afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b00:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000b04:	f003 0302 	and.w	r3, r3, #2
10000b08:	2b02      	cmp	r3, #2
10000b0a:	d00f      	beq.n	10000b2c <HAL_RCC_OscConfig+0xec>
10000b0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b10:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000b14:	f003 0303 	and.w	r3, r3, #3
10000b18:	2b01      	cmp	r3, #1
10000b1a:	d117      	bne.n	10000b4c <HAL_RCC_OscConfig+0x10c>
10000b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b20:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000b24:	f003 0302 	and.w	r3, r3, #2
10000b28:	2b02      	cmp	r3, #2
10000b2a:	d10f      	bne.n	10000b4c <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000b3c:	d112      	bne.n	10000b64 <HAL_RCC_OscConfig+0x124>
10000b3e:	687b      	ldr	r3, [r7, #4]
10000b40:	685b      	ldr	r3, [r3, #4]
10000b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000b46:	d00d      	beq.n	10000b64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000b48:	2301      	movs	r3, #1
10000b4a:	e2a5      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000b4c:	687b      	ldr	r3, [r7, #4]
10000b4e:	685b      	ldr	r3, [r3, #4]
10000b50:	4618      	mov	r0, r3
10000b52:	f000 faa7 	bl	100010a4 <HAL_RCC_HSEConfig>
10000b56:	4603      	mov	r3, r0
10000b58:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000b5a:	7bfb      	ldrb	r3, [r7, #15]
10000b5c:	2b00      	cmp	r3, #0
10000b5e:	d002      	beq.n	10000b66 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000b60:	7bfb      	ldrb	r3, [r7, #15]
10000b62:	e299      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000b64:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000b66:	687b      	ldr	r3, [r7, #4]
10000b68:	681b      	ldr	r3, [r3, #0]
10000b6a:	f003 0302 	and.w	r3, r3, #2
10000b6e:	2b00      	cmp	r3, #0
10000b70:	f000 814e 	beq.w	10000e10 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000b74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b78:	6a1b      	ldr	r3, [r3, #32]
10000b7a:	f003 0303 	and.w	r3, r3, #3
10000b7e:	2b00      	cmp	r3, #0
10000b80:	d107      	bne.n	10000b92 <HAL_RCC_OscConfig+0x152>
10000b82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b86:	6a1b      	ldr	r3, [r3, #32]
10000b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b90:	d055      	beq.n	10000c3e <HAL_RCC_OscConfig+0x1fe>
10000b92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b98:	f003 0307 	and.w	r3, r3, #7
10000b9c:	2b00      	cmp	r3, #0
10000b9e:	d107      	bne.n	10000bb0 <HAL_RCC_OscConfig+0x170>
10000ba0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000bae:	d046      	beq.n	10000c3e <HAL_RCC_OscConfig+0x1fe>
10000bb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000bb6:	f003 0303 	and.w	r3, r3, #3
10000bba:	2b00      	cmp	r3, #0
10000bbc:	d107      	bne.n	10000bce <HAL_RCC_OscConfig+0x18e>
10000bbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000bcc:	d037      	beq.n	10000c3e <HAL_RCC_OscConfig+0x1fe>
10000bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000bd4:	f003 0303 	and.w	r3, r3, #3
10000bd8:	2b00      	cmp	r3, #0
10000bda:	d10f      	bne.n	10000bfc <HAL_RCC_OscConfig+0x1bc>
10000bdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000be4:	f003 0302 	and.w	r3, r3, #2
10000be8:	2b02      	cmp	r3, #2
10000bea:	d028      	beq.n	10000c3e <HAL_RCC_OscConfig+0x1fe>
10000bec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000bf4:	f003 0302 	and.w	r3, r3, #2
10000bf8:	2b02      	cmp	r3, #2
10000bfa:	d020      	beq.n	10000c3e <HAL_RCC_OscConfig+0x1fe>
10000bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c00:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000c04:	f003 0303 	and.w	r3, r3, #3
10000c08:	2b00      	cmp	r3, #0
10000c0a:	d107      	bne.n	10000c1c <HAL_RCC_OscConfig+0x1dc>
10000c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c10:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000c14:	f003 0302 	and.w	r3, r3, #2
10000c18:	2b02      	cmp	r3, #2
10000c1a:	d010      	beq.n	10000c3e <HAL_RCC_OscConfig+0x1fe>
10000c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c20:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000c24:	f003 0303 	and.w	r3, r3, #3
10000c28:	2b00      	cmp	r3, #0
10000c2a:	f040 8088 	bne.w	10000d3e <HAL_RCC_OscConfig+0x2fe>
10000c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c32:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000c36:	f003 0302 	and.w	r3, r3, #2
10000c3a:	2b02      	cmp	r3, #2
10000c3c:	d17f      	bne.n	10000d3e <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c42:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000c46:	f003 0301 	and.w	r3, r3, #1
10000c4a:	2b01      	cmp	r3, #1
10000c4c:	d105      	bne.n	10000c5a <HAL_RCC_OscConfig+0x21a>
10000c4e:	687b      	ldr	r3, [r7, #4]
10000c50:	68db      	ldr	r3, [r3, #12]
10000c52:	2b01      	cmp	r3, #1
10000c54:	d001      	beq.n	10000c5a <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000c56:	2301      	movs	r3, #1
10000c58:	e21e      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c5e:	699b      	ldr	r3, [r3, #24]
10000c60:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000c64:	687b      	ldr	r3, [r7, #4]
10000c66:	691b      	ldr	r3, [r3, #16]
10000c68:	021b      	lsls	r3, r3, #8
10000c6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000c6e:	4313      	orrs	r3, r2
10000c70:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000c78:	f003 0303 	and.w	r3, r3, #3
10000c7c:	2b00      	cmp	r3, #0
10000c7e:	d10f      	bne.n	10000ca0 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000c88:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000c8c:	2b02      	cmp	r3, #2
10000c8e:	d047      	beq.n	10000d20 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000c98:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000c9c:	2b02      	cmp	r3, #2
10000c9e:	d03f      	beq.n	10000d20 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ca4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000ca8:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000cac:	2b00      	cmp	r3, #0
10000cae:	d107      	bne.n	10000cc0 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cb4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000cb8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000cbc:	2b02      	cmp	r3, #2
10000cbe:	d02f      	beq.n	10000d20 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cc4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000cc8:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000ccc:	2b00      	cmp	r3, #0
10000cce:	d107      	bne.n	10000ce0 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000cd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000cd8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000cdc:	2b02      	cmp	r3, #2
10000cde:	d01f      	beq.n	10000d20 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000ce0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ce4:	699b      	ldr	r3, [r3, #24]
10000ce6:	f023 0203 	bic.w	r2, r3, #3
10000cea:	687b      	ldr	r3, [r7, #4]
10000cec:	695b      	ldr	r3, [r3, #20]
10000cee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000cf2:	4313      	orrs	r3, r2
10000cf4:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000cf6:	f7ff fb9d 	bl	10000434 <HAL_GetTick>
10000cfa:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000cfc:	e008      	b.n	10000d10 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000cfe:	f7ff fb99 	bl	10000434 <HAL_GetTick>
10000d02:	4602      	mov	r2, r0
10000d04:	68bb      	ldr	r3, [r7, #8]
10000d06:	1ad3      	subs	r3, r2, r3
10000d08:	2b64      	cmp	r3, #100	; 0x64
10000d0a:	d901      	bls.n	10000d10 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000d0c:	2303      	movs	r3, #3
10000d0e:	e1c3      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d14:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d18:	f003 0304 	and.w	r3, r3, #4
10000d1c:	2b04      	cmp	r3, #4
10000d1e:	d1ee      	bne.n	10000cfe <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000d20:	f001 f809 	bl	10001d36 <HAL_RCC_GetSystemCoreClockFreq>
10000d24:	4603      	mov	r3, r0
10000d26:	4ab3      	ldr	r2, [pc, #716]	; (10000ff4 <HAL_RCC_OscConfig+0x5b4>)
10000d28:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000d2a:	4bb3      	ldr	r3, [pc, #716]	; (10000ff8 <HAL_RCC_OscConfig+0x5b8>)
10000d2c:	681b      	ldr	r3, [r3, #0]
10000d2e:	4618      	mov	r0, r3
10000d30:	f7ff fb36 	bl	100003a0 <HAL_InitTick>
10000d34:	4603      	mov	r3, r0
10000d36:	2b00      	cmp	r3, #0
10000d38:	d069      	beq.n	10000e0e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000d3a:	2301      	movs	r3, #1
10000d3c:	e1ac      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000d3e:	687b      	ldr	r3, [r7, #4]
10000d40:	68db      	ldr	r3, [r3, #12]
10000d42:	2b00      	cmp	r3, #0
10000d44:	d049      	beq.n	10000dda <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d4a:	68db      	ldr	r3, [r3, #12]
10000d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d50:	f043 0301 	orr.w	r3, r3, #1
10000d54:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000d56:	f7ff fb6d 	bl	10000434 <HAL_GetTick>
10000d5a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000d5c:	e008      	b.n	10000d70 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d5e:	f7ff fb69 	bl	10000434 <HAL_GetTick>
10000d62:	4602      	mov	r2, r0
10000d64:	68bb      	ldr	r3, [r7, #8]
10000d66:	1ad3      	subs	r3, r2, r3
10000d68:	2b64      	cmp	r3, #100	; 0x64
10000d6a:	d901      	bls.n	10000d70 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000d6c:	2303      	movs	r3, #3
10000d6e:	e193      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d78:	f003 0301 	and.w	r3, r3, #1
10000d7c:	2b01      	cmp	r3, #1
10000d7e:	d1ee      	bne.n	10000d5e <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d84:	699b      	ldr	r3, [r3, #24]
10000d86:	f023 0203 	bic.w	r2, r3, #3
10000d8a:	687b      	ldr	r3, [r7, #4]
10000d8c:	695b      	ldr	r3, [r3, #20]
10000d8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000d92:	4313      	orrs	r3, r2
10000d94:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000d96:	f7ff fb4d 	bl	10000434 <HAL_GetTick>
10000d9a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000d9c:	e008      	b.n	10000db0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000d9e:	f7ff fb49 	bl	10000434 <HAL_GetTick>
10000da2:	4602      	mov	r2, r0
10000da4:	68bb      	ldr	r3, [r7, #8]
10000da6:	1ad3      	subs	r3, r2, r3
10000da8:	2b64      	cmp	r3, #100	; 0x64
10000daa:	d901      	bls.n	10000db0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000dac:	2303      	movs	r3, #3
10000dae:	e173      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000db4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000db8:	f003 0304 	and.w	r3, r3, #4
10000dbc:	2b04      	cmp	r3, #4
10000dbe:	d1ee      	bne.n	10000d9e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dc4:	699b      	ldr	r3, [r3, #24]
10000dc6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000dca:	687b      	ldr	r3, [r7, #4]
10000dcc:	691b      	ldr	r3, [r3, #16]
10000dce:	021b      	lsls	r3, r3, #8
10000dd0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000dd4:	4313      	orrs	r3, r2
10000dd6:	618b      	str	r3, [r1, #24]
10000dd8:	e01a      	b.n	10000e10 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000dda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dde:	2201      	movs	r2, #1
10000de0:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000de2:	f7ff fb27 	bl	10000434 <HAL_GetTick>
10000de6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000de8:	e008      	b.n	10000dfc <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000dea:	f7ff fb23 	bl	10000434 <HAL_GetTick>
10000dee:	4602      	mov	r2, r0
10000df0:	68bb      	ldr	r3, [r7, #8]
10000df2:	1ad3      	subs	r3, r2, r3
10000df4:	2b64      	cmp	r3, #100	; 0x64
10000df6:	d901      	bls.n	10000dfc <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000df8:	2303      	movs	r3, #3
10000dfa:	e14d      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e00:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e04:	f003 0301 	and.w	r3, r3, #1
10000e08:	2b01      	cmp	r3, #1
10000e0a:	d0ee      	beq.n	10000dea <HAL_RCC_OscConfig+0x3aa>
10000e0c:	e000      	b.n	10000e10 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000e0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000e10:	687b      	ldr	r3, [r7, #4]
10000e12:	681b      	ldr	r3, [r3, #0]
10000e14:	f003 0310 	and.w	r3, r3, #16
10000e18:	2b00      	cmp	r3, #0
10000e1a:	f000 8091 	beq.w	10000f40 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e22:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000e26:	f003 0303 	and.w	r3, r3, #3
10000e2a:	2b02      	cmp	r3, #2
10000e2c:	d107      	bne.n	10000e3e <HAL_RCC_OscConfig+0x3fe>
10000e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e32:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000e36:	f003 0302 	and.w	r3, r3, #2
10000e3a:	2b02      	cmp	r3, #2
10000e3c:	d01e      	beq.n	10000e7c <HAL_RCC_OscConfig+0x43c>
10000e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000e44:	f003 0303 	and.w	r3, r3, #3
10000e48:	2b02      	cmp	r3, #2
10000e4a:	d107      	bne.n	10000e5c <HAL_RCC_OscConfig+0x41c>
10000e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e5a:	d00f      	beq.n	10000e7c <HAL_RCC_OscConfig+0x43c>
10000e5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e60:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000e64:	f003 0303 	and.w	r3, r3, #3
10000e68:	2b02      	cmp	r3, #2
10000e6a:	d122      	bne.n	10000eb2 <HAL_RCC_OscConfig+0x472>
10000e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e70:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000e74:	f003 0302 	and.w	r3, r3, #2
10000e78:	2b02      	cmp	r3, #2
10000e7a:	d11a      	bne.n	10000eb2 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e80:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e84:	f003 0310 	and.w	r3, r3, #16
10000e88:	2b10      	cmp	r3, #16
10000e8a:	d105      	bne.n	10000e98 <HAL_RCC_OscConfig+0x458>
10000e8c:	687b      	ldr	r3, [r7, #4]
10000e8e:	69db      	ldr	r3, [r3, #28]
10000e90:	2b10      	cmp	r3, #16
10000e92:	d001      	beq.n	10000e98 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000e94:	2301      	movs	r3, #1
10000e96:	e0ff      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e9c:	69db      	ldr	r3, [r3, #28]
10000e9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000ea2:	687b      	ldr	r3, [r7, #4]
10000ea4:	6a1b      	ldr	r3, [r3, #32]
10000ea6:	021b      	lsls	r3, r3, #8
10000ea8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000eac:	4313      	orrs	r3, r2
10000eae:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000eb0:	e046      	b.n	10000f40 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000eb2:	687b      	ldr	r3, [r7, #4]
10000eb4:	69db      	ldr	r3, [r3, #28]
10000eb6:	2b00      	cmp	r3, #0
10000eb8:	d029      	beq.n	10000f0e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ebe:	68db      	ldr	r3, [r3, #12]
10000ec0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000ec4:	f043 0310 	orr.w	r3, r3, #16
10000ec8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000eca:	f7ff fab3 	bl	10000434 <HAL_GetTick>
10000ece:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000ed0:	e008      	b.n	10000ee4 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000ed2:	f7ff faaf 	bl	10000434 <HAL_GetTick>
10000ed6:	4602      	mov	r2, r0
10000ed8:	68bb      	ldr	r3, [r7, #8]
10000eda:	1ad3      	subs	r3, r2, r3
10000edc:	2b64      	cmp	r3, #100	; 0x64
10000ede:	d901      	bls.n	10000ee4 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000ee0:	2303      	movs	r3, #3
10000ee2:	e0d9      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ee8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000eec:	f003 0310 	and.w	r3, r3, #16
10000ef0:	2b10      	cmp	r3, #16
10000ef2:	d1ee      	bne.n	10000ed2 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ef8:	69db      	ldr	r3, [r3, #28]
10000efa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000efe:	687b      	ldr	r3, [r7, #4]
10000f00:	6a1b      	ldr	r3, [r3, #32]
10000f02:	021b      	lsls	r3, r3, #8
10000f04:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f08:	4313      	orrs	r3, r2
10000f0a:	61cb      	str	r3, [r1, #28]
10000f0c:	e018      	b.n	10000f40 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f12:	2210      	movs	r2, #16
10000f14:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f16:	f7ff fa8d 	bl	10000434 <HAL_GetTick>
10000f1a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000f1c:	e008      	b.n	10000f30 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000f1e:	f7ff fa89 	bl	10000434 <HAL_GetTick>
10000f22:	4602      	mov	r2, r0
10000f24:	68bb      	ldr	r3, [r7, #8]
10000f26:	1ad3      	subs	r3, r2, r3
10000f28:	2b64      	cmp	r3, #100	; 0x64
10000f2a:	d901      	bls.n	10000f30 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000f2c:	2303      	movs	r3, #3
10000f2e:	e0b3      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f34:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f38:	f003 0310 	and.w	r3, r3, #16
10000f3c:	2b10      	cmp	r3, #16
10000f3e:	d0ee      	beq.n	10000f1e <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000f40:	687b      	ldr	r3, [r7, #4]
10000f42:	681b      	ldr	r3, [r3, #0]
10000f44:	f003 0308 	and.w	r3, r3, #8
10000f48:	2b00      	cmp	r3, #0
10000f4a:	d042      	beq.n	10000fd2 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000f4c:	687b      	ldr	r3, [r7, #4]
10000f4e:	699b      	ldr	r3, [r3, #24]
10000f50:	2b00      	cmp	r3, #0
10000f52:	d01f      	beq.n	10000f94 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10000f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f58:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000f5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f60:	f043 0301 	orr.w	r3, r3, #1
10000f64:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000f68:	f7ff fa64 	bl	10000434 <HAL_GetTick>
10000f6c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000f6e:	e008      	b.n	10000f82 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000f70:	f7ff fa60 	bl	10000434 <HAL_GetTick>
10000f74:	4602      	mov	r2, r0
10000f76:	68bb      	ldr	r3, [r7, #8]
10000f78:	1ad3      	subs	r3, r2, r3
10000f7a:	2b64      	cmp	r3, #100	; 0x64
10000f7c:	d901      	bls.n	10000f82 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10000f7e:	2303      	movs	r3, #3
10000f80:	e08a      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000f82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f86:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000f8a:	f003 0302 	and.w	r3, r3, #2
10000f8e:	2b02      	cmp	r3, #2
10000f90:	d1ee      	bne.n	10000f70 <HAL_RCC_OscConfig+0x530>
10000f92:	e01e      	b.n	10000fd2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10000f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f98:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000f9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000fa0:	f023 0301 	bic.w	r3, r3, #1
10000fa4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000fa8:	f7ff fa44 	bl	10000434 <HAL_GetTick>
10000fac:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000fae:	e008      	b.n	10000fc2 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000fb0:	f7ff fa40 	bl	10000434 <HAL_GetTick>
10000fb4:	4602      	mov	r2, r0
10000fb6:	68bb      	ldr	r3, [r7, #8]
10000fb8:	1ad3      	subs	r3, r2, r3
10000fba:	2b64      	cmp	r3, #100	; 0x64
10000fbc:	d901      	bls.n	10000fc2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10000fbe:	2303      	movs	r3, #3
10000fc0:	e06a      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000fc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fc6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000fca:	f003 0302 	and.w	r3, r3, #2
10000fce:	2b02      	cmp	r3, #2
10000fd0:	d0ee      	beq.n	10000fb0 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10000fd2:	687b      	ldr	r3, [r7, #4]
10000fd4:	681b      	ldr	r3, [r3, #0]
10000fd6:	f003 0304 	and.w	r3, r3, #4
10000fda:	2b00      	cmp	r3, #0
10000fdc:	d02b      	beq.n	10001036 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000fde:	4b07      	ldr	r3, [pc, #28]	; (10000ffc <HAL_RCC_OscConfig+0x5bc>)
10000fe0:	681b      	ldr	r3, [r3, #0]
10000fe2:	4a06      	ldr	r2, [pc, #24]	; (10000ffc <HAL_RCC_OscConfig+0x5bc>)
10000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000fe8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10000fea:	f7ff fa23 	bl	10000434 <HAL_GetTick>
10000fee:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000ff0:	e00f      	b.n	10001012 <HAL_RCC_OscConfig+0x5d2>
10000ff2:	bf00      	nop
10000ff4:	10020000 	.word	0x10020000
10000ff8:	10020004 	.word	0x10020004
10000ffc:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10001000:	f7ff fa18 	bl	10000434 <HAL_GetTick>
10001004:	4602      	mov	r2, r0
10001006:	68bb      	ldr	r3, [r7, #8]
10001008:	1ad3      	subs	r3, r2, r3
1000100a:	2b64      	cmp	r3, #100	; 0x64
1000100c:	d901      	bls.n	10001012 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
1000100e:	2303      	movs	r3, #3
10001010:	e042      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001012:	4b23      	ldr	r3, [pc, #140]	; (100010a0 <HAL_RCC_OscConfig+0x660>)
10001014:	681b      	ldr	r3, [r3, #0]
10001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000101a:	2b00      	cmp	r3, #0
1000101c:	d0f0      	beq.n	10001000 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000101e:	687b      	ldr	r3, [r7, #4]
10001020:	689b      	ldr	r3, [r3, #8]
10001022:	4618      	mov	r0, r3
10001024:	f000 f8a9 	bl	1000117a <HAL_RCC_LSEConfig>
10001028:	4603      	mov	r3, r0
1000102a:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
1000102c:	7bfb      	ldrb	r3, [r7, #15]
1000102e:	2b00      	cmp	r3, #0
10001030:	d001      	beq.n	10001036 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10001032:	7bfb      	ldrb	r3, [r7, #15]
10001034:	e030      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001036:	687b      	ldr	r3, [r7, #4]
10001038:	3324      	adds	r3, #36	; 0x24
1000103a:	4618      	mov	r0, r3
1000103c:	f000 f91a 	bl	10001274 <RCC_PLL1_Config>
10001040:	4603      	mov	r3, r0
10001042:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001044:	7bfb      	ldrb	r3, [r7, #15]
10001046:	2b00      	cmp	r3, #0
10001048:	d001      	beq.n	1000104e <HAL_RCC_OscConfig+0x60e>
  {
    return result;
1000104a:	7bfb      	ldrb	r3, [r7, #15]
1000104c:	e024      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000104e:	687b      	ldr	r3, [r7, #4]
10001050:	3360      	adds	r3, #96	; 0x60
10001052:	4618      	mov	r0, r3
10001054:	f000 fecc 	bl	10001df0 <RCCEx_PLL2_Config>
10001058:	4603      	mov	r3, r0
1000105a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000105c:	7bfb      	ldrb	r3, [r7, #15]
1000105e:	2b00      	cmp	r3, #0
10001060:	d001      	beq.n	10001066 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10001062:	7bfb      	ldrb	r3, [r7, #15]
10001064:	e018      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001066:	687b      	ldr	r3, [r7, #4]
10001068:	339c      	adds	r3, #156	; 0x9c
1000106a:	4618      	mov	r0, r3
1000106c:	f001 f842 	bl	100020f4 <RCCEx_PLL3_Config>
10001070:	4603      	mov	r3, r0
10001072:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001074:	7bfb      	ldrb	r3, [r7, #15]
10001076:	2b00      	cmp	r3, #0
10001078:	d001      	beq.n	1000107e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000107a:	7bfb      	ldrb	r3, [r7, #15]
1000107c:	e00c      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000107e:	687b      	ldr	r3, [r7, #4]
10001080:	33d8      	adds	r3, #216	; 0xd8
10001082:	4618      	mov	r0, r3
10001084:	f001 f9a0 	bl	100023c8 <RCCEx_PLL4_Config>
10001088:	4603      	mov	r3, r0
1000108a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000108c:	7bfb      	ldrb	r3, [r7, #15]
1000108e:	2b00      	cmp	r3, #0
10001090:	d001      	beq.n	10001096 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001092:	7bfb      	ldrb	r3, [r7, #15]
10001094:	e000      	b.n	10001098 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001096:	2300      	movs	r3, #0
}
10001098:	4618      	mov	r0, r3
1000109a:	3710      	adds	r7, #16
1000109c:	46bd      	mov	sp, r7
1000109e:	bd80      	pop	{r7, pc}
100010a0:	50001000 	.word	0x50001000

100010a4 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100010a4:	b580      	push	{r7, lr}
100010a6:	b084      	sub	sp, #16
100010a8:	af00      	add	r7, sp, #0
100010aa:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100010ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010b0:	f44f 7280 	mov.w	r2, #256	; 0x100
100010b4:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100010b6:	f7ff f9bd 	bl	10000434 <HAL_GetTick>
100010ba:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100010bc:	e008      	b.n	100010d0 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100010be:	f7ff f9b9 	bl	10000434 <HAL_GetTick>
100010c2:	4602      	mov	r2, r0
100010c4:	68fb      	ldr	r3, [r7, #12]
100010c6:	1ad3      	subs	r3, r2, r3
100010c8:	2b64      	cmp	r3, #100	; 0x64
100010ca:	d901      	bls.n	100010d0 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100010cc:	2303      	movs	r3, #3
100010ce:	e050      	b.n	10001172 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100010d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
100010dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100010e0:	d0ed      	beq.n	100010be <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100010e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010e6:	f44f 6290 	mov.w	r2, #1152	; 0x480
100010ea:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100010ec:	687b      	ldr	r3, [r7, #4]
100010ee:	2b00      	cmp	r3, #0
100010f0:	d03e      	beq.n	10001170 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100010f2:	687b      	ldr	r3, [r7, #4]
100010f4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
100010f8:	d108      	bne.n	1000110c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100010fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010fe:	68db      	ldr	r3, [r3, #12]
10001100:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001104:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10001108:	60d3      	str	r3, [r2, #12]
1000110a:	e013      	b.n	10001134 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
1000110c:	687b      	ldr	r3, [r7, #4]
1000110e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10001112:	d10f      	bne.n	10001134 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001114:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001118:	68db      	ldr	r3, [r3, #12]
1000111a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000111e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10001122:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001124:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001128:	68db      	ldr	r3, [r3, #12]
1000112a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10001132:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001138:	68db      	ldr	r3, [r3, #12]
1000113a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10001142:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001144:	f7ff f976 	bl	10000434 <HAL_GetTick>
10001148:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000114a:	e008      	b.n	1000115e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000114c:	f7ff f972 	bl	10000434 <HAL_GetTick>
10001150:	4602      	mov	r2, r0
10001152:	68fb      	ldr	r3, [r7, #12]
10001154:	1ad3      	subs	r3, r2, r3
10001156:	2b64      	cmp	r3, #100	; 0x64
10001158:	d901      	bls.n	1000115e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000115a:	2303      	movs	r3, #3
1000115c:	e009      	b.n	10001172 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000115e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001162:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000116a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000116e:	d1ed      	bne.n	1000114c <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001170:	2300      	movs	r3, #0
}
10001172:	4618      	mov	r0, r3
10001174:	3710      	adds	r7, #16
10001176:	46bd      	mov	sp, r7
10001178:	bd80      	pop	{r7, pc}

1000117a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000117a:	b580      	push	{r7, lr}
1000117c:	b084      	sub	sp, #16
1000117e:	af00      	add	r7, sp, #0
10001180:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001186:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000118a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000118e:	f023 0301 	bic.w	r3, r3, #1
10001192:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001196:	f7ff f94d 	bl	10000434 <HAL_GetTick>
1000119a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000119c:	e00a      	b.n	100011b4 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000119e:	f7ff f949 	bl	10000434 <HAL_GetTick>
100011a2:	4602      	mov	r2, r0
100011a4:	68fb      	ldr	r3, [r7, #12]
100011a6:	1ad3      	subs	r3, r2, r3
100011a8:	f241 3288 	movw	r2, #5000	; 0x1388
100011ac:	4293      	cmp	r3, r2
100011ae:	d901      	bls.n	100011b4 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100011b0:	2303      	movs	r3, #3
100011b2:	e05b      	b.n	1000126c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100011b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100011bc:	f003 0304 	and.w	r3, r3, #4
100011c0:	2b04      	cmp	r3, #4
100011c2:	d0ec      	beq.n	1000119e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100011c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100011cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011d0:	f023 030a 	bic.w	r3, r3, #10
100011d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100011d8:	687b      	ldr	r3, [r7, #4]
100011da:	2b00      	cmp	r3, #0
100011dc:	d045      	beq.n	1000126a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100011de:	687b      	ldr	r3, [r7, #4]
100011e0:	2b03      	cmp	r3, #3
100011e2:	d10a      	bne.n	100011fa <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100011e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100011ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011f0:	f043 0302 	orr.w	r3, r3, #2
100011f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100011f8:	e016      	b.n	10001228 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100011fa:	687b      	ldr	r3, [r7, #4]
100011fc:	2b0b      	cmp	r3, #11
100011fe:	d113      	bne.n	10001228 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10001200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001204:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000120c:	f043 0308 	orr.w	r3, r3, #8
10001210:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001214:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000121c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001220:	f043 0302 	orr.w	r3, r3, #2
10001224:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000122c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001230:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001234:	f043 0301 	orr.w	r3, r3, #1
10001238:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000123c:	f7ff f8fa 	bl	10000434 <HAL_GetTick>
10001240:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001242:	e00a      	b.n	1000125a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001244:	f7ff f8f6 	bl	10000434 <HAL_GetTick>
10001248:	4602      	mov	r2, r0
1000124a:	68fb      	ldr	r3, [r7, #12]
1000124c:	1ad3      	subs	r3, r2, r3
1000124e:	f241 3288 	movw	r2, #5000	; 0x1388
10001252:	4293      	cmp	r3, r2
10001254:	d901      	bls.n	1000125a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001256:	2303      	movs	r3, #3
10001258:	e008      	b.n	1000126c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000125a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000125e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001262:	f003 0304 	and.w	r3, r3, #4
10001266:	2b04      	cmp	r3, #4
10001268:	d1ec      	bne.n	10001244 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000126a:	2300      	movs	r3, #0
}
1000126c:	4618      	mov	r0, r3
1000126e:	3710      	adds	r7, #16
10001270:	46bd      	mov	sp, r7
10001272:	bd80      	pop	{r7, pc}

10001274 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001274:	b580      	push	{r7, lr}
10001276:	b084      	sub	sp, #16
10001278:	af00      	add	r7, sp, #0
1000127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000127c:	687b      	ldr	r3, [r7, #4]
1000127e:	681b      	ldr	r3, [r3, #0]
10001280:	2b00      	cmp	r3, #0
10001282:	f000 8174 	beq.w	1000156e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000128a:	6a1b      	ldr	r3, [r3, #32]
1000128c:	f003 0303 	and.w	r3, r3, #3
10001290:	2b02      	cmp	r3, #2
10001292:	d108      	bne.n	100012a6 <RCC_PLL1_Config+0x32>
10001294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001298:	6a1b      	ldr	r3, [r3, #32]
1000129a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000129e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100012a2:	f000 8162 	beq.w	1000156a <RCC_PLL1_Config+0x2f6>
100012a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012aa:	6a1b      	ldr	r3, [r3, #32]
100012ac:	f003 0303 	and.w	r3, r3, #3
100012b0:	2b03      	cmp	r3, #3
100012b2:	d108      	bne.n	100012c6 <RCC_PLL1_Config+0x52>
100012b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012b8:	6a1b      	ldr	r3, [r3, #32]
100012ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100012c2:	f000 8152 	beq.w	1000156a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100012c6:	687b      	ldr	r3, [r7, #4]
100012c8:	681b      	ldr	r3, [r3, #0]
100012ca:	2b02      	cmp	r3, #2
100012cc:	f040 8123 	bne.w	10001516 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100012d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100012d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100012e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100012e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100012ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012f0:	f023 0301 	bic.w	r3, r3, #1
100012f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100012f8:	f7ff f89c 	bl	10000434 <HAL_GetTick>
100012fc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100012fe:	e008      	b.n	10001312 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001300:	f7ff f898 	bl	10000434 <HAL_GetTick>
10001304:	4602      	mov	r2, r0
10001306:	68fb      	ldr	r3, [r7, #12]
10001308:	1ad3      	subs	r3, r2, r3
1000130a:	2b64      	cmp	r3, #100	; 0x64
1000130c:	d901      	bls.n	10001312 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000130e:	2303      	movs	r3, #3
10001310:	e12e      	b.n	10001570 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000131a:	f003 0302 	and.w	r3, r3, #2
1000131e:	2b02      	cmp	r3, #2
10001320:	d0ee      	beq.n	10001300 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10001322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	f003 0307 	and.w	r3, r3, #7
1000132c:	2b02      	cmp	r3, #2
1000132e:	d112      	bne.n	10001356 <RCC_PLL1_Config+0xe2>
10001330:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000133a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000133e:	d10a      	bne.n	10001356 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001340:	687b      	ldr	r3, [r7, #4]
10001342:	685a      	ldr	r2, [r3, #4]
10001344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000134a:	f003 0303 	and.w	r3, r3, #3
1000134e:	429a      	cmp	r2, r3
10001350:	d00c      	beq.n	1000136c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10001352:	2301      	movs	r3, #1
10001354:	e10c      	b.n	10001570 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000135c:	f023 0203 	bic.w	r2, r3, #3
10001360:	687b      	ldr	r3, [r7, #4]
10001362:	685b      	ldr	r3, [r3, #4]
10001364:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001368:	4313      	orrs	r3, r2
1000136a:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000136c:	e008      	b.n	10001380 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000136e:	f7ff f861 	bl	10000434 <HAL_GetTick>
10001372:	4602      	mov	r2, r0
10001374:	68fb      	ldr	r3, [r7, #12]
10001376:	1ad3      	subs	r3, r2, r3
10001378:	2b64      	cmp	r3, #100	; 0x64
1000137a:	d901      	bls.n	10001380 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000137c:	2303      	movs	r3, #3
1000137e:	e0f7      	b.n	10001570 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000138a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000138e:	d1ee      	bne.n	1000136e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001390:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001394:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10001398:	4b77      	ldr	r3, [pc, #476]	; (10001578 <RCC_PLL1_Config+0x304>)
1000139a:	4013      	ands	r3, r2
1000139c:	687a      	ldr	r2, [r7, #4]
1000139e:	68d2      	ldr	r2, [r2, #12]
100013a0:	1e51      	subs	r1, r2, #1
100013a2:	687a      	ldr	r2, [r7, #4]
100013a4:	6892      	ldr	r2, [r2, #8]
100013a6:	3a01      	subs	r2, #1
100013a8:	0412      	lsls	r2, r2, #16
100013aa:	430a      	orrs	r2, r1
100013ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100013b0:	4313      	orrs	r3, r2
100013b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
100013b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100013be:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100013c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100013c6:	687a      	ldr	r2, [r7, #4]
100013c8:	6912      	ldr	r2, [r2, #16]
100013ca:	1e51      	subs	r1, r2, #1
100013cc:	687a      	ldr	r2, [r7, #4]
100013ce:	6952      	ldr	r2, [r2, #20]
100013d0:	3a01      	subs	r2, #1
100013d2:	0212      	lsls	r2, r2, #8
100013d4:	4311      	orrs	r1, r2
100013d6:	687a      	ldr	r2, [r7, #4]
100013d8:	6992      	ldr	r2, [r2, #24]
100013da:	3a01      	subs	r2, #1
100013dc:	0412      	lsls	r2, r2, #16
100013de:	430a      	orrs	r2, r1
100013e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100013e4:	4313      	orrs	r3, r2
100013e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100013ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100013f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100013fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100013fe:	687b      	ldr	r3, [r7, #4]
10001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001402:	2b02      	cmp	r3, #2
10001404:	d003      	beq.n	1000140e <RCC_PLL1_Config+0x19a>
10001406:	687b      	ldr	r3, [r7, #4]
10001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000140a:	2b00      	cmp	r3, #0
1000140c:	d10c      	bne.n	10001428 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000140e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000141a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000141e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001422:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10001426:	e00f      	b.n	10001448 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10001428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001434:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001438:	687a      	ldr	r2, [r7, #4]
1000143a:	6a12      	ldr	r2, [r2, #32]
1000143c:	00d2      	lsls	r2, r2, #3
1000143e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001442:	4313      	orrs	r3, r2
10001444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001458:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000145c:	687b      	ldr	r3, [r7, #4]
1000145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001460:	2b02      	cmp	r3, #2
10001462:	d124      	bne.n	100014ae <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001464:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
1000146c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001470:	687b      	ldr	r3, [r7, #4]
10001472:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001474:	687b      	ldr	r3, [r7, #4]
10001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001478:	4319      	orrs	r1, r3
1000147a:	687b      	ldr	r3, [r7, #4]
1000147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000147e:	4319      	orrs	r1, r3
10001480:	687b      	ldr	r3, [r7, #4]
10001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001484:	4319      	orrs	r1, r3
10001486:	687b      	ldr	r3, [r7, #4]
10001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000148a:	041b      	lsls	r3, r3, #16
1000148c:	430b      	orrs	r3, r1
1000148e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001492:	4313      	orrs	r3, r2
10001494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001498:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000149c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014a4:	f043 0304 	orr.w	r3, r3, #4
100014a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
100014ac:	e009      	b.n	100014c2 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100014ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014ba:	f023 0304 	bic.w	r3, r3, #4
100014be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100014c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014ce:	f043 0301 	orr.w	r3, r3, #1
100014d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100014d6:	f7fe ffad 	bl	10000434 <HAL_GetTick>
100014da:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100014dc:	e008      	b.n	100014f0 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100014de:	f7fe ffa9 	bl	10000434 <HAL_GetTick>
100014e2:	4602      	mov	r2, r0
100014e4:	68fb      	ldr	r3, [r7, #12]
100014e6:	1ad3      	subs	r3, r2, r3
100014e8:	2b64      	cmp	r3, #100	; 0x64
100014ea:	d901      	bls.n	100014f0 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100014ec:	2303      	movs	r3, #3
100014ee:	e03f      	b.n	10001570 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100014f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100014f8:	f003 0302 	and.w	r3, r3, #2
100014fc:	2b02      	cmp	r3, #2
100014fe:	d1ee      	bne.n	100014de <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000150c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001510:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001514:	e02b      	b.n	1000156e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000151e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001526:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000152a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001532:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001536:	f023 0301 	bic.w	r3, r3, #1
1000153a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000153e:	f7fe ff79 	bl	10000434 <HAL_GetTick>
10001542:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001544:	e008      	b.n	10001558 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001546:	f7fe ff75 	bl	10000434 <HAL_GetTick>
1000154a:	4602      	mov	r2, r0
1000154c:	68fb      	ldr	r3, [r7, #12]
1000154e:	1ad3      	subs	r3, r2, r3
10001550:	2b64      	cmp	r3, #100	; 0x64
10001552:	d901      	bls.n	10001558 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001554:	2303      	movs	r3, #3
10001556:	e00b      	b.n	10001570 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001558:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000155c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001560:	f003 0302 	and.w	r3, r3, #2
10001564:	2b02      	cmp	r3, #2
10001566:	d0ee      	beq.n	10001546 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001568:	e001      	b.n	1000156e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000156a:	2301      	movs	r3, #1
1000156c:	e000      	b.n	10001570 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000156e:	2300      	movs	r3, #0

}
10001570:	4618      	mov	r0, r3
10001572:	3710      	adds	r7, #16
10001574:	46bd      	mov	sp, r7
10001576:	bd80      	pop	{r7, pc}
10001578:	ffc0fe00 	.word	0xffc0fe00

1000157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000157c:	b580      	push	{r7, lr}
1000157e:	b084      	sub	sp, #16
10001580:	af00      	add	r7, sp, #0
10001582:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001584:	2300      	movs	r3, #0
10001586:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001588:	687b      	ldr	r3, [r7, #4]
1000158a:	2b00      	cmp	r3, #0
1000158c:	d101      	bne.n	10001592 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000158e:	2301      	movs	r3, #1
10001590:	e102      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001592:	687b      	ldr	r3, [r7, #4]
10001594:	681b      	ldr	r3, [r3, #0]
10001596:	f003 0301 	and.w	r3, r3, #1
1000159a:	2b00      	cmp	r3, #0
1000159c:	d00b      	beq.n	100015b6 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000159e:	687b      	ldr	r3, [r7, #4]
100015a0:	3304      	adds	r3, #4
100015a2:	4618      	mov	r0, r3
100015a4:	f000 f8fc 	bl	100017a0 <RCC_MPUConfig>
100015a8:	4603      	mov	r3, r0
100015aa:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100015ac:	7bfb      	ldrb	r3, [r7, #15]
100015ae:	2b00      	cmp	r3, #0
100015b0:	d001      	beq.n	100015b6 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100015b2:	7bfb      	ldrb	r3, [r7, #15]
100015b4:	e0f0      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100015b6:	687b      	ldr	r3, [r7, #4]
100015b8:	681b      	ldr	r3, [r3, #0]
100015ba:	f003 0302 	and.w	r3, r3, #2
100015be:	2b00      	cmp	r3, #0
100015c0:	d00b      	beq.n	100015da <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100015c2:	687b      	ldr	r3, [r7, #4]
100015c4:	330c      	adds	r3, #12
100015c6:	4618      	mov	r0, r3
100015c8:	f000 f960 	bl	1000188c <RCC_AXISSConfig>
100015cc:	4603      	mov	r3, r0
100015ce:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100015d0:	7bfb      	ldrb	r3, [r7, #15]
100015d2:	2b00      	cmp	r3, #0
100015d4:	d001      	beq.n	100015da <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100015d6:	7bfb      	ldrb	r3, [r7, #15]
100015d8:	e0de      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100015da:	687b      	ldr	r3, [r7, #4]
100015dc:	681b      	ldr	r3, [r3, #0]
100015de:	f003 0304 	and.w	r3, r3, #4
100015e2:	2b00      	cmp	r3, #0
100015e4:	d00b      	beq.n	100015fe <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100015e6:	687b      	ldr	r3, [r7, #4]
100015e8:	3314      	adds	r3, #20
100015ea:	4618      	mov	r0, r3
100015ec:	f000 f9e6 	bl	100019bc <RCC_MCUConfig>
100015f0:	4603      	mov	r3, r0
100015f2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100015f4:	7bfb      	ldrb	r3, [r7, #15]
100015f6:	2b00      	cmp	r3, #0
100015f8:	d001      	beq.n	100015fe <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100015fa:	7bfb      	ldrb	r3, [r7, #15]
100015fc:	e0cc      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100015fe:	687b      	ldr	r3, [r7, #4]
10001600:	681b      	ldr	r3, [r3, #0]
10001602:	f003 0308 	and.w	r3, r3, #8
10001606:	2b00      	cmp	r3, #0
10001608:	d020      	beq.n	1000164c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000160a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001610:	f023 0207 	bic.w	r2, r3, #7
10001614:	687b      	ldr	r3, [r7, #4]
10001616:	69db      	ldr	r3, [r3, #28]
10001618:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000161c:	4313      	orrs	r3, r2
1000161e:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001620:	f7fe ff08 	bl	10000434 <HAL_GetTick>
10001624:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001626:	e009      	b.n	1000163c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001628:	f7fe ff04 	bl	10000434 <HAL_GetTick>
1000162c:	4602      	mov	r2, r0
1000162e:	68bb      	ldr	r3, [r7, #8]
10001630:	1ad3      	subs	r3, r2, r3
10001632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001636:	d901      	bls.n	1000163c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001638:	2303      	movs	r3, #3
1000163a:	e0ad      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000163c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000164a:	d1ed      	bne.n	10001628 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
1000164c:	687b      	ldr	r3, [r7, #4]
1000164e:	681b      	ldr	r3, [r3, #0]
10001650:	f003 0310 	and.w	r3, r3, #16
10001654:	2b00      	cmp	r3, #0
10001656:	d020      	beq.n	1000169a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000165e:	f023 0207 	bic.w	r2, r3, #7
10001662:	687b      	ldr	r3, [r7, #4]
10001664:	6a1b      	ldr	r3, [r3, #32]
10001666:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000166a:	4313      	orrs	r3, r2
1000166c:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000166e:	f7fe fee1 	bl	10000434 <HAL_GetTick>
10001672:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001674:	e009      	b.n	1000168a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001676:	f7fe fedd 	bl	10000434 <HAL_GetTick>
1000167a:	4602      	mov	r2, r0
1000167c:	68bb      	ldr	r3, [r7, #8]
1000167e:	1ad3      	subs	r3, r2, r3
10001680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001684:	d901      	bls.n	1000168a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001686:	2303      	movs	r3, #3
10001688:	e086      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000168a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001698:	d1ed      	bne.n	10001676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000169a:	687b      	ldr	r3, [r7, #4]
1000169c:	681b      	ldr	r3, [r3, #0]
1000169e:	f003 0320 	and.w	r3, r3, #32
100016a2:	2b00      	cmp	r3, #0
100016a4:	d023      	beq.n	100016ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
100016a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016aa:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100016ae:	f023 0207 	bic.w	r2, r3, #7
100016b2:	687b      	ldr	r3, [r7, #4]
100016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100016b6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100016ba:	4313      	orrs	r3, r2
100016bc:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100016c0:	f7fe feb8 	bl	10000434 <HAL_GetTick>
100016c4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100016c6:	e009      	b.n	100016dc <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016c8:	f7fe feb4 	bl	10000434 <HAL_GetTick>
100016cc:	4602      	mov	r2, r0
100016ce:	68bb      	ldr	r3, [r7, #8]
100016d0:	1ad3      	subs	r3, r2, r3
100016d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100016d6:	d901      	bls.n	100016dc <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100016d8:	2303      	movs	r3, #3
100016da:	e05d      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100016dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016e0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100016e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100016e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100016ec:	d1ec      	bne.n	100016c8 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100016ee:	687b      	ldr	r3, [r7, #4]
100016f0:	681b      	ldr	r3, [r3, #0]
100016f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
100016f6:	2b00      	cmp	r3, #0
100016f8:	d023      	beq.n	10001742 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100016fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016fe:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001702:	f023 0207 	bic.w	r2, r3, #7
10001706:	687b      	ldr	r3, [r7, #4]
10001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000170a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000170e:	4313      	orrs	r3, r2
10001710:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001714:	f7fe fe8e 	bl	10000434 <HAL_GetTick>
10001718:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000171a:	e009      	b.n	10001730 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000171c:	f7fe fe8a 	bl	10000434 <HAL_GetTick>
10001720:	4602      	mov	r2, r0
10001722:	68bb      	ldr	r3, [r7, #8]
10001724:	1ad3      	subs	r3, r2, r3
10001726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000172a:	d901      	bls.n	10001730 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
1000172c:	2303      	movs	r3, #3
1000172e:	e033      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001730:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001734:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000173c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001740:	d1ec      	bne.n	1000171c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10001742:	687b      	ldr	r3, [r7, #4]
10001744:	681b      	ldr	r3, [r3, #0]
10001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000174a:	2b00      	cmp	r3, #0
1000174c:	d023      	beq.n	10001796 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000174e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001752:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001756:	f023 0207 	bic.w	r2, r3, #7
1000175a:	687b      	ldr	r3, [r7, #4]
1000175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000175e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001762:	4313      	orrs	r3, r2
10001764:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001768:	f7fe fe64 	bl	10000434 <HAL_GetTick>
1000176c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000176e:	e009      	b.n	10001784 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001770:	f7fe fe60 	bl	10000434 <HAL_GetTick>
10001774:	4602      	mov	r2, r0
10001776:	68bb      	ldr	r3, [r7, #8]
10001778:	1ad3      	subs	r3, r2, r3
1000177a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000177e:	d901      	bls.n	10001784 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001780:	2303      	movs	r3, #3
10001782:	e009      	b.n	10001798 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001784:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001788:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
1000178c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001794:	d1ec      	bne.n	10001770 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001796:	2300      	movs	r3, #0
}
10001798:	4618      	mov	r0, r3
1000179a:	3710      	adds	r7, #16
1000179c:	46bd      	mov	sp, r7
1000179e:	bd80      	pop	{r7, pc}

100017a0 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
100017a0:	b580      	push	{r7, lr}
100017a2:	b084      	sub	sp, #16
100017a4:	af00      	add	r7, sp, #0
100017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
100017a8:	687b      	ldr	r3, [r7, #4]
100017aa:	681b      	ldr	r3, [r3, #0]
100017ac:	2b03      	cmp	r3, #3
100017ae:	d840      	bhi.n	10001832 <RCC_MPUConfig+0x92>
100017b0:	a201      	add	r2, pc, #4	; (adr r2, 100017b8 <RCC_MPUConfig+0x18>)
100017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100017b6:	bf00      	nop
100017b8:	100017c9 	.word	0x100017c9
100017bc:	100017dd 	.word	0x100017dd
100017c0:	100017f3 	.word	0x100017f3
100017c4:	10001807 	.word	0x10001807
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100017c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017cc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100017d0:	f003 0301 	and.w	r3, r3, #1
100017d4:	2b01      	cmp	r3, #1
100017d6:	d02e      	beq.n	10001836 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100017d8:	2301      	movs	r3, #1
100017da:	e053      	b.n	10001884 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100017dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
100017e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100017ec:	d025      	beq.n	1000183a <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
100017ee:	2301      	movs	r3, #1
100017f0:	e048      	b.n	10001884 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100017f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100017fa:	f003 0302 	and.w	r3, r3, #2
100017fe:	2b02      	cmp	r3, #2
10001800:	d01d      	beq.n	1000183e <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001802:	2301      	movs	r3, #1
10001804:	e03e      	b.n	10001884 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001806:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000180a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000180e:	f003 0302 	and.w	r3, r3, #2
10001812:	2b02      	cmp	r3, #2
10001814:	d001      	beq.n	1000181a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001816:	2301      	movs	r3, #1
10001818:	e034      	b.n	10001884 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000181a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001820:	f023 0207 	bic.w	r2, r3, #7
10001824:	687b      	ldr	r3, [r7, #4]
10001826:	685b      	ldr	r3, [r3, #4]
10001828:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000182c:	4313      	orrs	r3, r2
1000182e:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10001830:	e006      	b.n	10001840 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001832:	2301      	movs	r3, #1
10001834:	e026      	b.n	10001884 <RCC_MPUConfig+0xe4>
      break;
10001836:	bf00      	nop
10001838:	e002      	b.n	10001840 <RCC_MPUConfig+0xa0>
      break;
1000183a:	bf00      	nop
1000183c:	e000      	b.n	10001840 <RCC_MPUConfig+0xa0>
      break;
1000183e:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001844:	6a1b      	ldr	r3, [r3, #32]
10001846:	f023 0203 	bic.w	r2, r3, #3
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	681b      	ldr	r3, [r3, #0]
1000184e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001852:	4313      	orrs	r3, r2
10001854:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001856:	f7fe fded 	bl	10000434 <HAL_GetTick>
1000185a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000185c:	e009      	b.n	10001872 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000185e:	f7fe fde9 	bl	10000434 <HAL_GetTick>
10001862:	4602      	mov	r2, r0
10001864:	68fb      	ldr	r3, [r7, #12]
10001866:	1ad3      	subs	r3, r2, r3
10001868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000186c:	d901      	bls.n	10001872 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000186e:	2303      	movs	r3, #3
10001870:	e008      	b.n	10001884 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001876:	6a1b      	ldr	r3, [r3, #32]
10001878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000187c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001880:	d1ed      	bne.n	1000185e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001882:	2300      	movs	r3, #0
}
10001884:	4618      	mov	r0, r3
10001886:	3710      	adds	r7, #16
10001888:	46bd      	mov	sp, r7
1000188a:	bd80      	pop	{r7, pc}

1000188c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
1000188c:	b580      	push	{r7, lr}
1000188e:	b084      	sub	sp, #16
10001890:	af00      	add	r7, sp, #0
10001892:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001894:	687b      	ldr	r3, [r7, #4]
10001896:	681b      	ldr	r3, [r3, #0]
10001898:	2b02      	cmp	r3, #2
1000189a:	d01b      	beq.n	100018d4 <RCC_AXISSConfig+0x48>
1000189c:	2b02      	cmp	r3, #2
1000189e:	d823      	bhi.n	100018e8 <RCC_AXISSConfig+0x5c>
100018a0:	2b00      	cmp	r3, #0
100018a2:	d002      	beq.n	100018aa <RCC_AXISSConfig+0x1e>
100018a4:	2b01      	cmp	r3, #1
100018a6:	d00a      	beq.n	100018be <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
100018a8:	e01e      	b.n	100018e8 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100018aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018ae:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100018b2:	f003 0301 	and.w	r3, r3, #1
100018b6:	2b01      	cmp	r3, #1
100018b8:	d018      	beq.n	100018ec <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100018ba:	2301      	movs	r3, #1
100018bc:	e079      	b.n	100019b2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100018be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018c2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100018ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100018ce:	d00f      	beq.n	100018f0 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100018d0:	2301      	movs	r3, #1
100018d2:	e06e      	b.n	100019b2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100018d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100018dc:	f003 0302 	and.w	r3, r3, #2
100018e0:	2b02      	cmp	r3, #2
100018e2:	d007      	beq.n	100018f4 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
100018e4:	2301      	movs	r3, #1
100018e6:	e064      	b.n	100019b2 <RCC_AXISSConfig+0x126>
      break;
100018e8:	bf00      	nop
100018ea:	e004      	b.n	100018f6 <RCC_AXISSConfig+0x6a>
      break;
100018ec:	bf00      	nop
100018ee:	e002      	b.n	100018f6 <RCC_AXISSConfig+0x6a>
      break;
100018f0:	bf00      	nop
100018f2:	e000      	b.n	100018f6 <RCC_AXISSConfig+0x6a>
      break;
100018f4:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
100018f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100018fc:	f023 0207 	bic.w	r2, r3, #7
10001900:	687b      	ldr	r3, [r7, #4]
10001902:	681b      	ldr	r3, [r3, #0]
10001904:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001908:	4313      	orrs	r3, r2
1000190a:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
1000190c:	687b      	ldr	r3, [r7, #4]
1000190e:	681b      	ldr	r3, [r3, #0]
10001910:	2b03      	cmp	r3, #3
10001912:	d016      	beq.n	10001942 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001914:	f7fe fd8e 	bl	10000434 <HAL_GetTick>
10001918:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000191a:	e009      	b.n	10001930 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000191c:	f7fe fd8a 	bl	10000434 <HAL_GetTick>
10001920:	4602      	mov	r2, r0
10001922:	68fb      	ldr	r3, [r7, #12]
10001924:	1ad3      	subs	r3, r2, r3
10001926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000192a:	d901      	bls.n	10001930 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
1000192c:	2303      	movs	r3, #3
1000192e:	e040      	b.n	100019b2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000193a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000193e:	d1ed      	bne.n	1000191c <RCC_AXISSConfig+0x90>
10001940:	e015      	b.n	1000196e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001942:	f7fe fd77 	bl	10000434 <HAL_GetTick>
10001946:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001948:	e009      	b.n	1000195e <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000194a:	f7fe fd73 	bl	10000434 <HAL_GetTick>
1000194e:	4602      	mov	r2, r0
10001950:	68fb      	ldr	r3, [r7, #12]
10001952:	1ad3      	subs	r3, r2, r3
10001954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001958:	d901      	bls.n	1000195e <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
1000195a:	2303      	movs	r3, #3
1000195c:	e029      	b.n	100019b2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
1000195e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000196c:	d0ed      	beq.n	1000194a <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000196e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001974:	f023 0207 	bic.w	r2, r3, #7
10001978:	687b      	ldr	r3, [r7, #4]
1000197a:	685b      	ldr	r3, [r3, #4]
1000197c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001980:	4313      	orrs	r3, r2
10001982:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001984:	f7fe fd56 	bl	10000434 <HAL_GetTick>
10001988:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000198a:	e009      	b.n	100019a0 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000198c:	f7fe fd52 	bl	10000434 <HAL_GetTick>
10001990:	4602      	mov	r2, r0
10001992:	68fb      	ldr	r3, [r7, #12]
10001994:	1ad3      	subs	r3, r2, r3
10001996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000199a:	d901      	bls.n	100019a0 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
1000199c:	2303      	movs	r3, #3
1000199e:	e008      	b.n	100019b2 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100019a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100019a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100019aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100019ae:	d1ed      	bne.n	1000198c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
100019b0:	2300      	movs	r3, #0
}
100019b2:	4618      	mov	r0, r3
100019b4:	3710      	adds	r7, #16
100019b6:	46bd      	mov	sp, r7
100019b8:	bd80      	pop	{r7, pc}
	...

100019bc <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100019bc:	b580      	push	{r7, lr}
100019be:	b084      	sub	sp, #16
100019c0:	af00      	add	r7, sp, #0
100019c2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100019c4:	687b      	ldr	r3, [r7, #4]
100019c6:	681b      	ldr	r3, [r3, #0]
100019c8:	2b03      	cmp	r3, #3
100019ca:	d834      	bhi.n	10001a36 <RCC_MCUConfig+0x7a>
100019cc:	a201      	add	r2, pc, #4	; (adr r2, 100019d4 <RCC_MCUConfig+0x18>)
100019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100019d2:	bf00      	nop
100019d4:	100019e5 	.word	0x100019e5
100019d8:	100019f9 	.word	0x100019f9
100019dc:	10001a0f 	.word	0x10001a0f
100019e0:	10001a23 	.word	0x10001a23
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100019e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100019ec:	f003 0301 	and.w	r3, r3, #1
100019f0:	2b01      	cmp	r3, #1
100019f2:	d022      	beq.n	10001a3a <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
100019f4:	2301      	movs	r3, #1
100019f6:	e081      	b.n	10001afc <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100019f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001a08:	d019      	beq.n	10001a3e <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001a0a:	2301      	movs	r3, #1
10001a0c:	e076      	b.n	10001afc <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001a0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a12:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a16:	f003 0310 	and.w	r3, r3, #16
10001a1a:	2b10      	cmp	r3, #16
10001a1c:	d011      	beq.n	10001a42 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001a1e:	2301      	movs	r3, #1
10001a20:	e06c      	b.n	10001afc <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a26:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001a2a:	f003 0302 	and.w	r3, r3, #2
10001a2e:	2b02      	cmp	r3, #2
10001a30:	d009      	beq.n	10001a46 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001a32:	2301      	movs	r3, #1
10001a34:	e062      	b.n	10001afc <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001a36:	bf00      	nop
10001a38:	e006      	b.n	10001a48 <RCC_MCUConfig+0x8c>
      break;
10001a3a:	bf00      	nop
10001a3c:	e004      	b.n	10001a48 <RCC_MCUConfig+0x8c>
      break;
10001a3e:	bf00      	nop
10001a40:	e002      	b.n	10001a48 <RCC_MCUConfig+0x8c>
      break;
10001a42:	bf00      	nop
10001a44:	e000      	b.n	10001a48 <RCC_MCUConfig+0x8c>
      break;
10001a46:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001a4e:	f023 0203 	bic.w	r2, r3, #3
10001a52:	687b      	ldr	r3, [r7, #4]
10001a54:	681b      	ldr	r3, [r3, #0]
10001a56:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a5a:	4313      	orrs	r3, r2
10001a5c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a5e:	f7fe fce9 	bl	10000434 <HAL_GetTick>
10001a62:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001a64:	e009      	b.n	10001a7a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a66:	f7fe fce5 	bl	10000434 <HAL_GetTick>
10001a6a:	4602      	mov	r2, r0
10001a6c:	68fb      	ldr	r3, [r7, #12]
10001a6e:	1ad3      	subs	r3, r2, r3
10001a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a74:	d901      	bls.n	10001a7a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001a76:	2303      	movs	r3, #3
10001a78:	e040      	b.n	10001afc <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a88:	d1ed      	bne.n	10001a66 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001a8a:	f000 f954 	bl	10001d36 <HAL_RCC_GetSystemCoreClockFreq>
10001a8e:	4603      	mov	r3, r0
10001a90:	4a1c      	ldr	r2, [pc, #112]	; (10001b04 <RCC_MCUConfig+0x148>)
10001a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001a94:	4b1c      	ldr	r3, [pc, #112]	; (10001b08 <RCC_MCUConfig+0x14c>)
10001a96:	681b      	ldr	r3, [r3, #0]
10001a98:	4618      	mov	r0, r3
10001a9a:	f7fe fc81 	bl	100003a0 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001a9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aa2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001aa6:	f023 020f 	bic.w	r2, r3, #15
10001aaa:	687b      	ldr	r3, [r7, #4]
10001aac:	685b      	ldr	r3, [r3, #4]
10001aae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ab2:	4313      	orrs	r3, r2
10001ab4:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ab8:	f7fe fcbc 	bl	10000434 <HAL_GetTick>
10001abc:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001abe:	e009      	b.n	10001ad4 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ac0:	f7fe fcb8 	bl	10000434 <HAL_GetTick>
10001ac4:	4602      	mov	r2, r0
10001ac6:	68fb      	ldr	r3, [r7, #12]
10001ac8:	1ad3      	subs	r3, r2, r3
10001aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001ace:	d901      	bls.n	10001ad4 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001ad0:	2303      	movs	r3, #3
10001ad2:	e013      	b.n	10001afc <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ad8:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ae4:	d1ec      	bne.n	10001ac0 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001ae6:	f000 f926 	bl	10001d36 <HAL_RCC_GetSystemCoreClockFreq>
10001aea:	4603      	mov	r3, r0
10001aec:	4a05      	ldr	r2, [pc, #20]	; (10001b04 <RCC_MCUConfig+0x148>)
10001aee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001af0:	4b05      	ldr	r3, [pc, #20]	; (10001b08 <RCC_MCUConfig+0x14c>)
10001af2:	681b      	ldr	r3, [r3, #0]
10001af4:	4618      	mov	r0, r3
10001af6:	f7fe fc53 	bl	100003a0 <HAL_InitTick>
#endif

  return HAL_OK;
10001afa:	2300      	movs	r3, #0
}
10001afc:	4618      	mov	r0, r3
10001afe:	3710      	adds	r7, #16
10001b00:	46bd      	mov	sp, r7
10001b02:	bd80      	pop	{r7, pc}
10001b04:	10020000 	.word	0x10020000
10001b08:	10020004 	.word	0x10020004

10001b0c <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001b0c:	b480      	push	{r7}
10001b0e:	b089      	sub	sp, #36	; 0x24
10001b10:	af00      	add	r7, sp, #0
10001b12:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001b14:	2300      	movs	r3, #0
10001b16:	61bb      	str	r3, [r7, #24]
10001b18:	2301      	movs	r3, #1
10001b1a:	617b      	str	r3, [r7, #20]
10001b1c:	2300      	movs	r3, #0
10001b1e:	613b      	str	r3, [r7, #16]
10001b20:	2300      	movs	r3, #0
10001b22:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001b24:	f04f 0300 	mov.w	r3, #0
10001b28:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b2e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001b32:	f003 0303 	and.w	r3, r3, #3
10001b36:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001b38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b3c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001b40:	0c1b      	lsrs	r3, r3, #16
10001b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001b46:	3301      	adds	r3, #1
10001b48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b4e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001b52:	0c1b      	lsrs	r3, r3, #16
10001b54:	f003 0301 	and.w	r3, r3, #1
10001b58:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b5e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001b62:	08db      	lsrs	r3, r3, #3
10001b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001b68:	693a      	ldr	r2, [r7, #16]
10001b6a:	fb02 f303 	mul.w	r3, r2, r3
10001b6e:	ee07 3a90 	vmov	s15, r3
10001b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001b76:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b7e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001b86:	3301      	adds	r3, #1
10001b88:	ee07 3a90 	vmov	s15, r3
10001b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001b90:	edd7 6a02 	vldr	s13, [r7, #8]
10001b94:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10001cf0 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001b98:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
10001ba0:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001ba4:	69bb      	ldr	r3, [r7, #24]
10001ba6:	2b03      	cmp	r3, #3
10001ba8:	d85b      	bhi.n	10001c62 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001baa:	a201      	add	r2, pc, #4	; (adr r2, 10001bb0 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001bb0:	10001bc1 	.word	0x10001bc1
10001bb4:	10001c1f 	.word	0x10001c1f
10001bb8:	10001c3d 	.word	0x10001c3d
10001bbc:	10001c5b 	.word	0x10001c5b
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bc4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001bc8:	f003 0304 	and.w	r3, r3, #4
10001bcc:	2b04      	cmp	r3, #4
10001bce:	d117      	bne.n	10001c00 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bd4:	699b      	ldr	r3, [r3, #24]
10001bd6:	f003 0303 	and.w	r3, r3, #3
10001bda:	4a46      	ldr	r2, [pc, #280]	; (10001cf4 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001bdc:	fa22 f303 	lsr.w	r3, r2, r3
10001be0:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001be2:	68fa      	ldr	r2, [r7, #12]
10001be4:	697b      	ldr	r3, [r7, #20]
10001be6:	fbb2 f3f3 	udiv	r3, r2, r3
10001bea:	ee07 3a90 	vmov	s15, r3
10001bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001bf2:	ed97 7a07 	vldr	s14, [r7, #28]
10001bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001bfe:	e030      	b.n	10001c62 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001c00:	4a3c      	ldr	r2, [pc, #240]	; (10001cf4 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001c02:	697b      	ldr	r3, [r7, #20]
10001c04:	fbb2 f3f3 	udiv	r3, r2, r3
10001c08:	ee07 3a90 	vmov	s15, r3
10001c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c10:	ed97 7a07 	vldr	s14, [r7, #28]
10001c14:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001c1c:	e021      	b.n	10001c62 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001c1e:	4a36      	ldr	r2, [pc, #216]	; (10001cf8 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001c20:	697b      	ldr	r3, [r7, #20]
10001c22:	fbb2 f3f3 	udiv	r3, r2, r3
10001c26:	ee07 3a90 	vmov	s15, r3
10001c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c2e:	ed97 7a07 	vldr	s14, [r7, #28]
10001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001c3a:	e012      	b.n	10001c62 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001c3c:	4a2f      	ldr	r2, [pc, #188]	; (10001cfc <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001c3e:	697b      	ldr	r3, [r7, #20]
10001c40:	fbb2 f3f3 	udiv	r3, r2, r3
10001c44:	ee07 3a90 	vmov	s15, r3
10001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c4c:	ed97 7a07 	vldr	s14, [r7, #28]
10001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001c58:	e003      	b.n	10001c62 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001c5a:	f04f 0300 	mov.w	r3, #0
10001c5e:	61fb      	str	r3, [r7, #28]
      break;
10001c60:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001c62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c66:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c6e:	3301      	adds	r3, #1
10001c70:	ee07 3a90 	vmov	s15, r3
10001c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c78:	edd7 6a07 	vldr	s13, [r7, #28]
10001c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c84:	ee17 2a90 	vmov	r2, s15
10001c88:	687b      	ldr	r3, [r7, #4]
10001c8a:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c90:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c94:	0a1b      	lsrs	r3, r3, #8
10001c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c9a:	3301      	adds	r3, #1
10001c9c:	ee07 3a90 	vmov	s15, r3
10001ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ca4:	edd7 6a07 	vldr	s13, [r7, #28]
10001ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001cb0:	ee17 2a90 	vmov	r2, s15
10001cb4:	687b      	ldr	r3, [r7, #4]
10001cb6:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cbc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001cc0:	0c1b      	lsrs	r3, r3, #16
10001cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001cc6:	3301      	adds	r3, #1
10001cc8:	ee07 3a90 	vmov	s15, r3
10001ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001cd0:	edd7 6a07 	vldr	s13, [r7, #28]
10001cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001cdc:	ee17 2a90 	vmov	r2, s15
10001ce0:	687b      	ldr	r3, [r7, #4]
10001ce2:	609a      	str	r2, [r3, #8]
}
10001ce4:	bf00      	nop
10001ce6:	3724      	adds	r7, #36	; 0x24
10001ce8:	46bd      	mov	sp, r7
10001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cee:	4770      	bx	lr
10001cf0:	46000000 	.word	0x46000000
10001cf4:	03d09000 	.word	0x03d09000
10001cf8:	016e3600 	.word	0x016e3600
10001cfc:	003d0900 	.word	0x003d0900

10001d00 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001d00:	b580      	push	{r7, lr}
10001d02:	b082      	sub	sp, #8
10001d04:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001d06:	2300      	movs	r3, #0
10001d08:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001d0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d0e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001d12:	f003 030f 	and.w	r3, r3, #15
10001d16:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001d18:	687b      	ldr	r3, [r7, #4]
10001d1a:	2b09      	cmp	r3, #9
10001d1c:	d901      	bls.n	10001d22 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001d1e:	2309      	movs	r3, #9
10001d20:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001d22:	f000 f80f 	bl	10001d44 <HAL_RCC_GetMCUSSFreq>
10001d26:	4602      	mov	r2, r0
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	fa22 f303 	lsr.w	r3, r2, r3
}
10001d2e:	4618      	mov	r0, r3
10001d30:	3708      	adds	r7, #8
10001d32:	46bd      	mov	sp, r7
10001d34:	bd80      	pop	{r7, pc}

10001d36 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10001d36:	b580      	push	{r7, lr}
10001d38:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001d3a:	f7ff ffe1 	bl	10001d00 <HAL_RCC_GetMCUFreq>
10001d3e:	4603      	mov	r3, r0
#endif
}
10001d40:	4618      	mov	r0, r3
10001d42:	bd80      	pop	{r7, pc}

10001d44 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10001d44:	b580      	push	{r7, lr}
10001d46:	b084      	sub	sp, #16
10001d48:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001d4a:	2300      	movs	r3, #0
10001d4c:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001d54:	f003 0303 	and.w	r3, r3, #3
10001d58:	2b03      	cmp	r3, #3
10001d5a:	d822      	bhi.n	10001da2 <HAL_RCC_GetMCUSSFreq+0x5e>
10001d5c:	a201      	add	r2, pc, #4	; (adr r2, 10001d64 <HAL_RCC_GetMCUSSFreq+0x20>)
10001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001d62:	bf00      	nop
10001d64:	10001d83 	.word	0x10001d83
10001d68:	10001d97 	.word	0x10001d97
10001d6c:	10001d9d 	.word	0x10001d9d
10001d70:	10001d75 	.word	0x10001d75
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10001d74:	463b      	mov	r3, r7
10001d76:	4618      	mov	r0, r3
10001d78:	f7ff fec8 	bl	10001b0c <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001d7c:	683b      	ldr	r3, [r7, #0]
10001d7e:	60fb      	str	r3, [r7, #12]
      break;
10001d80:	e00f      	b.n	10001da2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001d82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d86:	699b      	ldr	r3, [r3, #24]
10001d88:	f003 0303 	and.w	r3, r3, #3
10001d8c:	4a07      	ldr	r2, [pc, #28]	; (10001dac <HAL_RCC_GetMCUSSFreq+0x68>)
10001d8e:	fa22 f303 	lsr.w	r3, r2, r3
10001d92:	60fb      	str	r3, [r7, #12]

      break;
10001d94:	e005      	b.n	10001da2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001d96:	4b06      	ldr	r3, [pc, #24]	; (10001db0 <HAL_RCC_GetMCUSSFreq+0x6c>)
10001d98:	60fb      	str	r3, [r7, #12]
      break;
10001d9a:	e002      	b.n	10001da2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001d9c:	4b05      	ldr	r3, [pc, #20]	; (10001db4 <HAL_RCC_GetMCUSSFreq+0x70>)
10001d9e:	60fb      	str	r3, [r7, #12]
      break;
10001da0:	bf00      	nop
  }

  return mcussfreq;
10001da2:	68fb      	ldr	r3, [r7, #12]
}
10001da4:	4618      	mov	r0, r3
10001da6:	3710      	adds	r7, #16
10001da8:	46bd      	mov	sp, r7
10001daa:	bd80      	pop	{r7, pc}
10001dac:	03d09000 	.word	0x03d09000
10001db0:	016e3600 	.word	0x016e3600
10001db4:	003d0900 	.word	0x003d0900

10001db8 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10001db8:	b580      	push	{r7, lr}
10001dba:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10001dbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dc0:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10001dcc:	d107      	bne.n	10001dde <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10001dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10001dd6:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10001dda:	f000 f802 	bl	10001de2 <HAL_RCC_WAKEUP_Callback>
  }
}
10001dde:	bf00      	nop
10001de0:	bd80      	pop	{r7, pc}

10001de2 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10001de2:	b480      	push	{r7}
10001de4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10001de6:	bf00      	nop
10001de8:	46bd      	mov	sp, r7
10001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dee:	4770      	bx	lr

10001df0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10001df0:	b580      	push	{r7, lr}
10001df2:	b084      	sub	sp, #16
10001df4:	af00      	add	r7, sp, #0
10001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001df8:	687b      	ldr	r3, [r7, #4]
10001dfa:	681b      	ldr	r3, [r3, #0]
10001dfc:	2b00      	cmp	r3, #0
10001dfe:	f000 8171 	beq.w	100020e4 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10001e02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e08:	f003 0307 	and.w	r3, r3, #7
10001e0c:	2b02      	cmp	r3, #2
10001e0e:	d108      	bne.n	10001e22 <RCCEx_PLL2_Config+0x32>
10001e10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001e1e:	f000 815f 	beq.w	100020e0 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001e22:	687b      	ldr	r3, [r7, #4]
10001e24:	681b      	ldr	r3, [r3, #0]
10001e26:	2b02      	cmp	r3, #2
10001e28:	f040 8130 	bne.w	1000208c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001e2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001e32:	f003 0303 	and.w	r3, r3, #3
10001e36:	2b00      	cmp	r3, #0
10001e38:	d008      	beq.n	10001e4c <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10001e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001e40:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001e44:	2b01      	cmp	r3, #1
10001e46:	d001      	beq.n	10001e4c <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001e48:	2301      	movs	r3, #1
10001e4a:	e14c      	b.n	100020e6 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001e54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001e68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e6c:	f023 0301 	bic.w	r3, r3, #1
10001e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001e74:	f7fe fade 	bl	10000434 <HAL_GetTick>
10001e78:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001e7a:	e008      	b.n	10001e8e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001e7c:	f7fe fada 	bl	10000434 <HAL_GetTick>
10001e80:	4602      	mov	r2, r0
10001e82:	68fb      	ldr	r3, [r7, #12]
10001e84:	1ad3      	subs	r3, r2, r3
10001e86:	2b64      	cmp	r3, #100	; 0x64
10001e88:	d901      	bls.n	10001e8e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001e8a:	2303      	movs	r3, #3
10001e8c:	e12b      	b.n	100020e6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001e96:	f003 0302 	and.w	r3, r3, #2
10001e9a:	2b02      	cmp	r3, #2
10001e9c:	d0ee      	beq.n	10001e7c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ea2:	6a1b      	ldr	r3, [r3, #32]
10001ea4:	f003 0303 	and.w	r3, r3, #3
10001ea8:	2b02      	cmp	r3, #2
10001eaa:	d107      	bne.n	10001ebc <RCCEx_PLL2_Config+0xcc>
10001eac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001eb0:	6a1b      	ldr	r3, [r3, #32]
10001eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001eba:	d00e      	beq.n	10001eda <RCCEx_PLL2_Config+0xea>
10001ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ec0:	6a1b      	ldr	r3, [r3, #32]
10001ec2:	f003 0303 	and.w	r3, r3, #3
10001ec6:	2b03      	cmp	r3, #3
10001ec8:	d112      	bne.n	10001ef0 <RCCEx_PLL2_Config+0x100>
10001eca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ece:	6a1b      	ldr	r3, [r3, #32]
10001ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ed8:	d10a      	bne.n	10001ef0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001eda:	687b      	ldr	r3, [r7, #4]
10001edc:	685a      	ldr	r2, [r3, #4]
10001ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001ee4:	f003 0303 	and.w	r3, r3, #3
10001ee8:	429a      	cmp	r2, r3
10001eea:	d00c      	beq.n	10001f06 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001eec:	2301      	movs	r3, #1
10001eee:	e0fa      	b.n	100020e6 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001ef0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001ef6:	f023 0203 	bic.w	r2, r3, #3
10001efa:	687b      	ldr	r3, [r7, #4]
10001efc:	685b      	ldr	r3, [r3, #4]
10001efe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f02:	4313      	orrs	r3, r2
10001f04:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001f06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f0a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10001f0e:	4b78      	ldr	r3, [pc, #480]	; (100020f0 <RCCEx_PLL2_Config+0x300>)
10001f10:	4013      	ands	r3, r2
10001f12:	687a      	ldr	r2, [r7, #4]
10001f14:	68d2      	ldr	r2, [r2, #12]
10001f16:	1e51      	subs	r1, r2, #1
10001f18:	687a      	ldr	r2, [r7, #4]
10001f1a:	6892      	ldr	r2, [r2, #8]
10001f1c:	3a01      	subs	r2, #1
10001f1e:	0412      	lsls	r2, r2, #16
10001f20:	430a      	orrs	r2, r1
10001f22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f26:	4313      	orrs	r3, r2
10001f28:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10001f2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001f34:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001f3c:	687a      	ldr	r2, [r7, #4]
10001f3e:	6912      	ldr	r2, [r2, #16]
10001f40:	1e51      	subs	r1, r2, #1
10001f42:	687a      	ldr	r2, [r7, #4]
10001f44:	6952      	ldr	r2, [r2, #20]
10001f46:	3a01      	subs	r2, #1
10001f48:	0212      	lsls	r2, r2, #8
10001f4a:	4311      	orrs	r1, r2
10001f4c:	687a      	ldr	r2, [r7, #4]
10001f4e:	6992      	ldr	r2, [r2, #24]
10001f50:	3a01      	subs	r2, #1
10001f52:	0412      	lsls	r2, r2, #16
10001f54:	430a      	orrs	r2, r1
10001f56:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f5a:	4313      	orrs	r3, r2
10001f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10001f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001f70:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10001f74:	687b      	ldr	r3, [r7, #4]
10001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f78:	2b02      	cmp	r3, #2
10001f7a:	d003      	beq.n	10001f84 <RCCEx_PLL2_Config+0x194>
10001f7c:	687b      	ldr	r3, [r7, #4]
10001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f80:	2b00      	cmp	r3, #0
10001f82:	d10c      	bne.n	10001f9e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10001f84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001f8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001f94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001f98:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10001f9c:	e00f      	b.n	10001fbe <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10001f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001faa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001fae:	687a      	ldr	r2, [r7, #4]
10001fb0:	6a12      	ldr	r2, [r2, #32]
10001fb2:	00d2      	lsls	r2, r2, #3
10001fb4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001fb8:	4313      	orrs	r3, r2
10001fba:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10001fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001fce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001fd2:	687b      	ldr	r3, [r7, #4]
10001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001fd6:	2b02      	cmp	r3, #2
10001fd8:	d124      	bne.n	10002024 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10001fda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10001fe2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001fe6:	687b      	ldr	r3, [r7, #4]
10001fe8:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001fea:	687b      	ldr	r3, [r7, #4]
10001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001fee:	4319      	orrs	r1, r3
10001ff0:	687b      	ldr	r3, [r7, #4]
10001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001ff4:	4319      	orrs	r1, r3
10001ff6:	687b      	ldr	r3, [r7, #4]
10001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001ffa:	4319      	orrs	r1, r3
10001ffc:	687b      	ldr	r3, [r7, #4]
10001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002000:	041b      	lsls	r3, r3, #16
10002002:	430b      	orrs	r3, r1
10002004:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002008:	4313      	orrs	r3, r2
1000200a:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000200e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000201a:	f043 0304 	orr.w	r3, r3, #4
1000201e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10002022:	e009      	b.n	10002038 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002024:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000202c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002030:	f023 0304 	bic.w	r3, r3, #4
10002034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002038:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002040:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002044:	f043 0301 	orr.w	r3, r3, #1
10002048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000204c:	f7fe f9f2 	bl	10000434 <HAL_GetTick>
10002050:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002052:	e008      	b.n	10002066 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002054:	f7fe f9ee 	bl	10000434 <HAL_GetTick>
10002058:	4602      	mov	r2, r0
1000205a:	68fb      	ldr	r3, [r7, #12]
1000205c:	1ad3      	subs	r3, r2, r3
1000205e:	2b64      	cmp	r3, #100	; 0x64
10002060:	d901      	bls.n	10002066 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10002062:	2303      	movs	r3, #3
10002064:	e03f      	b.n	100020e6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000206e:	f003 0302 	and.w	r3, r3, #2
10002072:	2b02      	cmp	r3, #2
10002074:	d1ee      	bne.n	10002054 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000207e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002082:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000208a:	e02b      	b.n	100020e4 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000208c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002094:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000209c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
100020a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100020a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020ac:	f023 0301 	bic.w	r3, r3, #1
100020b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100020b4:	f7fe f9be 	bl	10000434 <HAL_GetTick>
100020b8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100020ba:	e008      	b.n	100020ce <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100020bc:	f7fe f9ba 	bl	10000434 <HAL_GetTick>
100020c0:	4602      	mov	r2, r0
100020c2:	68fb      	ldr	r3, [r7, #12]
100020c4:	1ad3      	subs	r3, r2, r3
100020c6:	2b64      	cmp	r3, #100	; 0x64
100020c8:	d901      	bls.n	100020ce <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100020ca:	2303      	movs	r3, #3
100020cc:	e00b      	b.n	100020e6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100020ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100020d6:	f003 0302 	and.w	r3, r3, #2
100020da:	2b02      	cmp	r3, #2
100020dc:	d0ee      	beq.n	100020bc <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100020de:	e001      	b.n	100020e4 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100020e0:	2301      	movs	r3, #1
100020e2:	e000      	b.n	100020e6 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100020e4:	2300      	movs	r3, #0

}
100020e6:	4618      	mov	r0, r3
100020e8:	3710      	adds	r7, #16
100020ea:	46bd      	mov	sp, r7
100020ec:	bd80      	pop	{r7, pc}
100020ee:	bf00      	nop
100020f0:	ffc0fe00 	.word	0xffc0fe00

100020f4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100020f4:	b580      	push	{r7, lr}
100020f6:	b084      	sub	sp, #16
100020f8:	af00      	add	r7, sp, #0
100020fa:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100020fc:	687b      	ldr	r3, [r7, #4]
100020fe:	681b      	ldr	r3, [r3, #0]
10002100:	2b00      	cmp	r3, #0
10002102:	f000 815a 	beq.w	100023ba <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10002106:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000210c:	f003 0303 	and.w	r3, r3, #3
10002110:	2b03      	cmp	r3, #3
10002112:	d108      	bne.n	10002126 <RCCEx_PLL3_Config+0x32>
10002114:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000211a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000211e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002122:	f000 8148 	beq.w	100023b6 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002126:	687b      	ldr	r3, [r7, #4]
10002128:	681b      	ldr	r3, [r3, #0]
1000212a:	2b02      	cmp	r3, #2
1000212c:	f040 8119 	bne.w	10002362 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002130:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002134:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000213c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002140:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10002144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002148:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000214c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002150:	f023 0301 	bic.w	r3, r3, #1
10002154:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002158:	f7fe f96c 	bl	10000434 <HAL_GetTick>
1000215c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000215e:	e008      	b.n	10002172 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002160:	f7fe f968 	bl	10000434 <HAL_GetTick>
10002164:	4602      	mov	r2, r0
10002166:	68fb      	ldr	r3, [r7, #12]
10002168:	1ad3      	subs	r3, r2, r3
1000216a:	2b64      	cmp	r3, #100	; 0x64
1000216c:	d901      	bls.n	10002172 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000216e:	2303      	movs	r3, #3
10002170:	e124      	b.n	100023bc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002172:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002176:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000217a:	f003 0302 	and.w	r3, r3, #2
1000217e:	2b02      	cmp	r3, #2
10002180:	d0ee      	beq.n	10002160 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10002182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002186:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000218a:	f023 0203 	bic.w	r2, r3, #3
1000218e:	687b      	ldr	r3, [r7, #4]
10002190:	685b      	ldr	r3, [r3, #4]
10002192:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002196:	4313      	orrs	r3, r2
10002198:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000219c:	e008      	b.n	100021b0 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000219e:	f7fe f949 	bl	10000434 <HAL_GetTick>
100021a2:	4602      	mov	r2, r0
100021a4:	68fb      	ldr	r3, [r7, #12]
100021a6:	1ad3      	subs	r3, r2, r3
100021a8:	2b64      	cmp	r3, #100	; 0x64
100021aa:	d901      	bls.n	100021b0 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
100021ac:	2303      	movs	r3, #3
100021ae:	e105      	b.n	100023bc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100021b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021b4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100021b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100021bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100021c0:	d1ed      	bne.n	1000219e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100021c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100021ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100021ce:	687b      	ldr	r3, [r7, #4]
100021d0:	69db      	ldr	r3, [r3, #28]
100021d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100021d6:	4313      	orrs	r3, r2
100021d8:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100021dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021e0:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
100021e4:	4b77      	ldr	r3, [pc, #476]	; (100023c4 <RCCEx_PLL3_Config+0x2d0>)
100021e6:	4013      	ands	r3, r2
100021e8:	687a      	ldr	r2, [r7, #4]
100021ea:	68d2      	ldr	r2, [r2, #12]
100021ec:	1e51      	subs	r1, r2, #1
100021ee:	687a      	ldr	r2, [r7, #4]
100021f0:	6892      	ldr	r2, [r2, #8]
100021f2:	3a01      	subs	r2, #1
100021f4:	0412      	lsls	r2, r2, #16
100021f6:	430a      	orrs	r2, r1
100021f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100021fc:	4313      	orrs	r3, r2
100021fe:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10002202:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002206:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000220a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000220e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002212:	687a      	ldr	r2, [r7, #4]
10002214:	6912      	ldr	r2, [r2, #16]
10002216:	1e51      	subs	r1, r2, #1
10002218:	687a      	ldr	r2, [r7, #4]
1000221a:	6952      	ldr	r2, [r2, #20]
1000221c:	3a01      	subs	r2, #1
1000221e:	0212      	lsls	r2, r2, #8
10002220:	4311      	orrs	r1, r2
10002222:	687a      	ldr	r2, [r7, #4]
10002224:	6992      	ldr	r2, [r2, #24]
10002226:	3a01      	subs	r2, #1
10002228:	0412      	lsls	r2, r2, #16
1000222a:	430a      	orrs	r2, r1
1000222c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002230:	4313      	orrs	r3, r2
10002232:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000223a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000223e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002246:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
1000224a:	687b      	ldr	r3, [r7, #4]
1000224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000224e:	2b02      	cmp	r3, #2
10002250:	d003      	beq.n	1000225a <RCCEx_PLL3_Config+0x166>
10002252:	687b      	ldr	r3, [r7, #4]
10002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002256:	2b00      	cmp	r3, #0
10002258:	d10c      	bne.n	10002274 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000225a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000225e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000226a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000226e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10002272:	e00f      	b.n	10002294 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002278:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000227c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002280:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002284:	687a      	ldr	r2, [r7, #4]
10002286:	6a12      	ldr	r2, [r2, #32]
10002288:	00d2      	lsls	r2, r2, #3
1000228a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000228e:	4313      	orrs	r3, r2
10002290:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002298:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000229c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100022a4:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100022a8:	687b      	ldr	r3, [r7, #4]
100022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100022ac:	2b02      	cmp	r3, #2
100022ae:	d124      	bne.n	100022fa <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
100022b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022b4:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
100022b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100022bc:	687b      	ldr	r3, [r7, #4]
100022be:	6a99      	ldr	r1, [r3, #40]	; 0x28
100022c0:	687b      	ldr	r3, [r7, #4]
100022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100022c4:	4319      	orrs	r1, r3
100022c6:	687b      	ldr	r3, [r7, #4]
100022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100022ca:	4319      	orrs	r1, r3
100022cc:	687b      	ldr	r3, [r7, #4]
100022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100022d0:	4319      	orrs	r1, r3
100022d2:	687b      	ldr	r3, [r7, #4]
100022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100022d6:	041b      	lsls	r3, r3, #16
100022d8:	430b      	orrs	r3, r1
100022da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022de:	4313      	orrs	r3, r2
100022e0:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100022e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022e8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100022ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022f0:	f043 0304 	orr.w	r3, r3, #4
100022f4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100022f8:	e009      	b.n	1000230e <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100022fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022fe:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002302:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002306:	f023 0304 	bic.w	r3, r3, #4
1000230a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
1000230e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002312:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002316:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000231a:	f043 0301 	orr.w	r3, r3, #1
1000231e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002322:	f7fe f887 	bl	10000434 <HAL_GetTick>
10002326:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002328:	e008      	b.n	1000233c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000232a:	f7fe f883 	bl	10000434 <HAL_GetTick>
1000232e:	4602      	mov	r2, r0
10002330:	68fb      	ldr	r3, [r7, #12]
10002332:	1ad3      	subs	r3, r2, r3
10002334:	2b64      	cmp	r3, #100	; 0x64
10002336:	d901      	bls.n	1000233c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002338:	2303      	movs	r3, #3
1000233a:	e03f      	b.n	100023bc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000233c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002340:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002344:	f003 0302 	and.w	r3, r3, #2
10002348:	2b02      	cmp	r3, #2
1000234a:	d1ee      	bne.n	1000232a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000234c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002350:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002354:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002358:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000235c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002360:	e02b      	b.n	100023ba <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002366:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000236a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002372:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002376:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000237a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000237e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002382:	f023 0301 	bic.w	r3, r3, #1
10002386:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000238a:	f7fe f853 	bl	10000434 <HAL_GetTick>
1000238e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002390:	e008      	b.n	100023a4 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002392:	f7fe f84f 	bl	10000434 <HAL_GetTick>
10002396:	4602      	mov	r2, r0
10002398:	68fb      	ldr	r3, [r7, #12]
1000239a:	1ad3      	subs	r3, r2, r3
1000239c:	2b64      	cmp	r3, #100	; 0x64
1000239e:	d901      	bls.n	100023a4 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
100023a0:	2303      	movs	r3, #3
100023a2:	e00b      	b.n	100023bc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100023a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023a8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023ac:	f003 0302 	and.w	r3, r3, #2
100023b0:	2b02      	cmp	r3, #2
100023b2:	d0ee      	beq.n	10002392 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100023b4:	e001      	b.n	100023ba <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100023b6:	2301      	movs	r3, #1
100023b8:	e000      	b.n	100023bc <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100023ba:	2300      	movs	r3, #0
}
100023bc:	4618      	mov	r0, r3
100023be:	3710      	adds	r7, #16
100023c0:	46bd      	mov	sp, r7
100023c2:	bd80      	pop	{r7, pc}
100023c4:	ffc0fe00 	.word	0xffc0fe00

100023c8 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100023c8:	b580      	push	{r7, lr}
100023ca:	b084      	sub	sp, #16
100023cc:	af00      	add	r7, sp, #0
100023ce:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100023d0:	687b      	ldr	r3, [r7, #4]
100023d2:	681b      	ldr	r3, [r3, #0]
100023d4:	2b00      	cmp	r3, #0
100023d6:	f000 8147 	beq.w	10002668 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100023da:	687b      	ldr	r3, [r7, #4]
100023dc:	681b      	ldr	r3, [r3, #0]
100023de:	2b02      	cmp	r3, #2
100023e0:	f040 8119 	bne.w	10002616 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100023e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023e8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100023ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100023f4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100023f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023fc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002400:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002404:	f023 0301 	bic.w	r3, r3, #1
10002408:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000240c:	f7fe f812 	bl	10000434 <HAL_GetTick>
10002410:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002412:	e008      	b.n	10002426 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002414:	f7fe f80e 	bl	10000434 <HAL_GetTick>
10002418:	4602      	mov	r2, r0
1000241a:	68fb      	ldr	r3, [r7, #12]
1000241c:	1ad3      	subs	r3, r2, r3
1000241e:	2b64      	cmp	r3, #100	; 0x64
10002420:	d901      	bls.n	10002426 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002422:	2303      	movs	r3, #3
10002424:	e121      	b.n	1000266a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000242a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000242e:	f003 0302 	and.w	r3, r3, #2
10002432:	2b02      	cmp	r3, #2
10002434:	d0ee      	beq.n	10002414 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002436:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000243a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000243e:	f023 0203 	bic.w	r2, r3, #3
10002442:	687b      	ldr	r3, [r7, #4]
10002444:	685b      	ldr	r3, [r3, #4]
10002446:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000244a:	4313      	orrs	r3, r2
1000244c:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002450:	e008      	b.n	10002464 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002452:	f7fd ffef 	bl	10000434 <HAL_GetTick>
10002456:	4602      	mov	r2, r0
10002458:	68fb      	ldr	r3, [r7, #12]
1000245a:	1ad3      	subs	r3, r2, r3
1000245c:	2b64      	cmp	r3, #100	; 0x64
1000245e:	d901      	bls.n	10002464 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002460:	2303      	movs	r3, #3
10002462:	e102      	b.n	1000266a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002464:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002468:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000246c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002474:	d1ed      	bne.n	10002452 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000247a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000247e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002482:	687b      	ldr	r3, [r7, #4]
10002484:	69db      	ldr	r3, [r3, #28]
10002486:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000248a:	4313      	orrs	r3, r2
1000248c:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002494:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002498:	4b76      	ldr	r3, [pc, #472]	; (10002674 <RCCEx_PLL4_Config+0x2ac>)
1000249a:	4013      	ands	r3, r2
1000249c:	687a      	ldr	r2, [r7, #4]
1000249e:	68d2      	ldr	r2, [r2, #12]
100024a0:	1e51      	subs	r1, r2, #1
100024a2:	687a      	ldr	r2, [r7, #4]
100024a4:	6892      	ldr	r2, [r2, #8]
100024a6:	3a01      	subs	r2, #1
100024a8:	0412      	lsls	r2, r2, #16
100024aa:	430a      	orrs	r2, r1
100024ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100024b0:	4313      	orrs	r3, r2
100024b2:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100024b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024ba:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100024be:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100024c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100024c6:	687a      	ldr	r2, [r7, #4]
100024c8:	6912      	ldr	r2, [r2, #16]
100024ca:	1e51      	subs	r1, r2, #1
100024cc:	687a      	ldr	r2, [r7, #4]
100024ce:	6952      	ldr	r2, [r2, #20]
100024d0:	3a01      	subs	r2, #1
100024d2:	0212      	lsls	r2, r2, #8
100024d4:	4311      	orrs	r1, r2
100024d6:	687a      	ldr	r2, [r7, #4]
100024d8:	6992      	ldr	r2, [r2, #24]
100024da:	3a01      	subs	r2, #1
100024dc:	0412      	lsls	r2, r2, #16
100024de:	430a      	orrs	r2, r1
100024e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100024e4:	4313      	orrs	r3, r2
100024e6:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100024ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024ee:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100024f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100024fa:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100024fe:	687b      	ldr	r3, [r7, #4]
10002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002502:	2b02      	cmp	r3, #2
10002504:	d003      	beq.n	1000250e <RCCEx_PLL4_Config+0x146>
10002506:	687b      	ldr	r3, [r7, #4]
10002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000250a:	2b00      	cmp	r3, #0
1000250c:	d10c      	bne.n	10002528 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000250e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002512:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002516:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000251a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000251e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002522:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002526:	e00f      	b.n	10002548 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000252c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002534:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002538:	687a      	ldr	r2, [r7, #4]
1000253a:	6a12      	ldr	r2, [r2, #32]
1000253c:	00d2      	lsls	r2, r2, #3
1000253e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002542:	4313      	orrs	r3, r2
10002544:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000254c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002558:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000255c:	687b      	ldr	r3, [r7, #4]
1000255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002560:	2b02      	cmp	r3, #2
10002562:	d124      	bne.n	100025ae <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002568:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
1000256c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002570:	687b      	ldr	r3, [r7, #4]
10002572:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002574:	687b      	ldr	r3, [r7, #4]
10002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002578:	4319      	orrs	r1, r3
1000257a:	687b      	ldr	r3, [r7, #4]
1000257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000257e:	4319      	orrs	r1, r3
10002580:	687b      	ldr	r3, [r7, #4]
10002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002584:	4319      	orrs	r1, r3
10002586:	687b      	ldr	r3, [r7, #4]
10002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000258a:	041b      	lsls	r3, r3, #16
1000258c:	430b      	orrs	r3, r1
1000258e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002592:	4313      	orrs	r3, r2
10002594:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002598:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000259c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100025a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025a4:	f043 0304 	orr.w	r3, r3, #4
100025a8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100025ac:	e009      	b.n	100025c2 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
100025ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025b2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100025b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025ba:	f023 0304 	bic.w	r3, r3, #4
100025be:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100025c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025c6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100025ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025ce:	f043 0301 	orr.w	r3, r3, #1
100025d2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100025d6:	f7fd ff2d 	bl	10000434 <HAL_GetTick>
100025da:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100025dc:	e008      	b.n	100025f0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025de:	f7fd ff29 	bl	10000434 <HAL_GetTick>
100025e2:	4602      	mov	r2, r0
100025e4:	68fb      	ldr	r3, [r7, #12]
100025e6:	1ad3      	subs	r3, r2, r3
100025e8:	2b64      	cmp	r3, #100	; 0x64
100025ea:	d901      	bls.n	100025f0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100025ec:	2303      	movs	r3, #3
100025ee:	e03c      	b.n	1000266a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100025f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100025f8:	f003 0302 	and.w	r3, r3, #2
100025fc:	2b02      	cmp	r3, #2
100025fe:	d1ee      	bne.n	100025de <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002604:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000260c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002610:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002614:	e028      	b.n	10002668 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002616:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000261a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000261e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002626:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000262a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000262e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002636:	f023 0301 	bic.w	r3, r3, #1
1000263a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000263e:	f7fd fef9 	bl	10000434 <HAL_GetTick>
10002642:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002644:	e008      	b.n	10002658 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002646:	f7fd fef5 	bl	10000434 <HAL_GetTick>
1000264a:	4602      	mov	r2, r0
1000264c:	68fb      	ldr	r3, [r7, #12]
1000264e:	1ad3      	subs	r3, r2, r3
10002650:	2b64      	cmp	r3, #100	; 0x64
10002652:	d901      	bls.n	10002658 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002654:	2303      	movs	r3, #3
10002656:	e008      	b.n	1000266a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000265c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002660:	f003 0302 	and.w	r3, r3, #2
10002664:	2b02      	cmp	r3, #2
10002666:	d0ee      	beq.n	10002646 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002668:	2300      	movs	r3, #0
}
1000266a:	4618      	mov	r0, r3
1000266c:	3710      	adds	r7, #16
1000266e:	46bd      	mov	sp, r7
10002670:	bd80      	pop	{r7, pc}
10002672:	bf00      	nop
10002674:	ffc0fe00 	.word	0xffc0fe00

10002678 <memset>:
10002678:	4402      	add	r2, r0
1000267a:	4603      	mov	r3, r0
1000267c:	4293      	cmp	r3, r2
1000267e:	d100      	bne.n	10002682 <memset+0xa>
10002680:	4770      	bx	lr
10002682:	f803 1b01 	strb.w	r1, [r3], #1
10002686:	e7f9      	b.n	1000267c <memset+0x4>

10002688 <__libc_init_array>:
10002688:	b570      	push	{r4, r5, r6, lr}
1000268a:	4d0d      	ldr	r5, [pc, #52]	; (100026c0 <__libc_init_array+0x38>)
1000268c:	4c0d      	ldr	r4, [pc, #52]	; (100026c4 <__libc_init_array+0x3c>)
1000268e:	1b64      	subs	r4, r4, r5
10002690:	10a4      	asrs	r4, r4, #2
10002692:	2600      	movs	r6, #0
10002694:	42a6      	cmp	r6, r4
10002696:	d109      	bne.n	100026ac <__libc_init_array+0x24>
10002698:	4d0b      	ldr	r5, [pc, #44]	; (100026c8 <__libc_init_array+0x40>)
1000269a:	4c0c      	ldr	r4, [pc, #48]	; (100026cc <__libc_init_array+0x44>)
1000269c:	f000 f818 	bl	100026d0 <_init>
100026a0:	1b64      	subs	r4, r4, r5
100026a2:	10a4      	asrs	r4, r4, #2
100026a4:	2600      	movs	r6, #0
100026a6:	42a6      	cmp	r6, r4
100026a8:	d105      	bne.n	100026b6 <__libc_init_array+0x2e>
100026aa:	bd70      	pop	{r4, r5, r6, pc}
100026ac:	f855 3b04 	ldr.w	r3, [r5], #4
100026b0:	4798      	blx	r3
100026b2:	3601      	adds	r6, #1
100026b4:	e7ee      	b.n	10002694 <__libc_init_array+0xc>
100026b6:	f855 3b04 	ldr.w	r3, [r5], #4
100026ba:	4798      	blx	r3
100026bc:	3601      	adds	r6, #1
100026be:	e7f2      	b.n	100026a6 <__libc_init_array+0x1e>
100026c0:	10002738 	.word	0x10002738
100026c4:	10002738 	.word	0x10002738
100026c8:	10002738 	.word	0x10002738
100026cc:	1000273c 	.word	0x1000273c

100026d0 <_init>:
100026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100026d2:	bf00      	nop
100026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100026d6:	bc08      	pop	{r3}
100026d8:	469e      	mov	lr, r3
100026da:	4770      	bx	lr

100026dc <_fini>:
100026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100026de:	bf00      	nop
100026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100026e2:	bc08      	pop	{r3}
100026e4:	469e      	mov	lr, r3
100026e6:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

100026e8 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
100026e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 10002720 <LoopForever+0x2>
  movs  r1, #0
100026ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100026ee:	e003      	b.n	100026f8 <LoopCopyDataInit>

100026f0 <CopyDataInit>:
  ldr  r3, =_sidata
100026f0:	4b0c      	ldr	r3, [pc, #48]	; (10002724 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100026f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100026f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100026f6:	3104      	adds	r1, #4

100026f8 <LoopCopyDataInit>:
  ldr  r0, =_sdata
100026f8:	480b      	ldr	r0, [pc, #44]	; (10002728 <LoopForever+0xa>)
  ldr  r3, =_edata
100026fa:	4b0c      	ldr	r3, [pc, #48]	; (1000272c <LoopForever+0xe>)
  adds  r2, r0, r1
100026fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100026fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10002700:	d3f6      	bcc.n	100026f0 <CopyDataInit>
  ldr  r2, =_sbss
10002702:	4a0b      	ldr	r2, [pc, #44]	; (10002730 <LoopForever+0x12>)
  b  LoopFillZerobss
10002704:	e002      	b.n	1000270c <LoopFillZerobss>

10002706 <FillZerobss>:
  movs  r3, #0
10002706:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002708:	f842 3b04 	str.w	r3, [r2], #4

1000270c <LoopFillZerobss>:
  ldr  r3, = _ebss
1000270c:	4b09      	ldr	r3, [pc, #36]	; (10002734 <LoopForever+0x16>)
  cmp  r2, r3
1000270e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10002710:	d3f9      	bcc.n	10002706 <FillZerobss>
  bl  SystemInit
10002712:	f7fd fc95 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002716:	f7ff ffb7 	bl	10002688 <__libc_init_array>
  bl main
1000271a:	f7fd fd0b 	bl	10000134 <main>

1000271e <LoopForever>:
    b LoopForever
1000271e:	e7fe      	b.n	1000271e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10002720:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002724:	10002740 	.word	0x10002740
  ldr  r0, =_sdata
10002728:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000272c:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10002730:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10002734:	1002002c 	.word	0x1002002c
