
DTN_STM32_MP157_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10002254  10002254  00022254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  100022a4  100022a4  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  100022a4  100022a4  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  100022a4  100022a4  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  100022a4  100022a4  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100022a4  100022a4  000222a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  100022a8  100022a8  000222a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  100022ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000020  1002000c  100022b8  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002002c  100022d8  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00006a94  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000f05  00000000  00000000  00036b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000538  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000003d7  00000000  00000000  00037f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000439ef  00000000  00000000  00038327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00007f98  00000000  00000000  0007bd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bef9a  00000000  00000000  00083cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001368  00000000  00000000  00242c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  00243fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	1000223c 	.word	0x1000223c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	1000223c 	.word	0x1000223c

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000090:	f000 f90a 	bl	100002a8 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000094:	4b04      	ldr	r3, [pc, #16]	; (100000a8 <main+0x1c>)
10000096:	681b      	ldr	r3, [r3, #0]
10000098:	f003 0307 	and.w	r3, r3, #7
1000009c:	2b04      	cmp	r3, #4
1000009e:	d101      	bne.n	100000a4 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
100000a0:	f000 f804 	bl	100000ac <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
100000a4:	e7fe      	b.n	100000a4 <main+0x18>
100000a6:	bf00      	nop
100000a8:	50020000 	.word	0x50020000

100000ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100000ac:	b580      	push	{r7, lr}
100000ae:	b0d2      	sub	sp, #328	; 0x148
100000b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100000b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100000ba:	4618      	mov	r0, r3
100000bc:	f44f 738a 	mov.w	r3, #276	; 0x114
100000c0:	461a      	mov	r2, r3
100000c2:	2100      	movs	r1, #0
100000c4:	f002 f88e 	bl	100021e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100000c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100000d0:	4618      	mov	r0, r3
100000d2:	2330      	movs	r3, #48	; 0x30
100000d4:	461a      	mov	r2, r3
100000d6:	2100      	movs	r1, #0
100000d8:	f002 f884 	bl	100021e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
100000dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100000e4:	2202      	movs	r2, #2
100000e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100000e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100000f0:	2201      	movs	r2, #1
100000f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100000f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100000fc:	2200      	movs	r2, #0
100000fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000100:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000104:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000108:	2200      	movs	r2, #0
1000010a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
1000010c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000110:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000114:	2200      	movs	r2, #0
10000116:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
10000118:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000011c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000120:	2200      	movs	r2, #0
10000122:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
10000126:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000012a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000012e:	2200      	movs	r2, #0
10000130:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000134:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000138:	4618      	mov	r0, r3
1000013a:	f000 fa37 	bl	100005ac <HAL_RCC_OscConfig>
1000013e:	4603      	mov	r3, r0
10000140:	2b00      	cmp	r3, #0
10000142:	d001      	beq.n	10000148 <SystemClock_Config+0x9c>
  {
    Error_Handler();
10000144:	f000 f84a 	bl	100001dc <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000148:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000014c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000150:	22fe      	movs	r2, #254	; 0xfe
10000152:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000154:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000158:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000015c:	2200      	movs	r2, #0
1000015e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000160:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000164:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000168:	2200      	movs	r2, #0
1000016a:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_HSI;
1000016c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000170:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000174:	2200      	movs	r2, #0
10000176:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000178:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000017c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000180:	2200      	movs	r2, #0
10000182:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000184:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000188:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000018c:	2200      	movs	r2, #0
1000018e:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000190:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000194:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000198:	2200      	movs	r2, #0
1000019a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV1;
1000019c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001a0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001a4:	2200      	movs	r2, #0
100001a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV1;
100001a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001b0:	2200      	movs	r2, #0
100001b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV1;
100001b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100001bc:	2200      	movs	r2, #0
100001be:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100001c0:	1d3b      	adds	r3, r7, #4
100001c2:	4618      	mov	r0, r3
100001c4:	f000 ff90 	bl	100010e8 <HAL_RCC_ClockConfig>
100001c8:	4603      	mov	r3, r0
100001ca:	2b00      	cmp	r3, #0
100001cc:	d001      	beq.n	100001d2 <SystemClock_Config+0x126>
  {
    Error_Handler();
100001ce:	f000 f805 	bl	100001dc <Error_Handler>
  }
}
100001d2:	bf00      	nop
100001d4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
100001d8:	46bd      	mov	sp, r7
100001da:	bd80      	pop	{r7, pc}

100001dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100001dc:	b480      	push	{r7}
100001de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100001e0:	b672      	cpsid	i
}
100001e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100001e4:	e7fe      	b.n	100001e4 <Error_Handler+0x8>

100001e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100001e6:	b580      	push	{r7, lr}
100001e8:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100001ea:	2200      	movs	r2, #0
100001ec:	2101      	movs	r1, #1
100001ee:	f06f 000b 	mvn.w	r0, #11
100001f2:	f000 f9a4 	bl	1000053e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100001f6:	2200      	movs	r2, #0
100001f8:	2101      	movs	r1, #1
100001fa:	f06f 000a 	mvn.w	r0, #10
100001fe:	f000 f99e 	bl	1000053e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000202:	2200      	movs	r2, #0
10000204:	2101      	movs	r1, #1
10000206:	f06f 0009 	mvn.w	r0, #9
1000020a:	f000 f998 	bl	1000053e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000020e:	2200      	movs	r2, #0
10000210:	2101      	movs	r1, #1
10000212:	f06f 0004 	mvn.w	r0, #4
10000216:	f000 f992 	bl	1000053e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
1000021a:	2200      	movs	r2, #0
1000021c:	2101      	movs	r1, #1
1000021e:	f06f 0003 	mvn.w	r0, #3
10000222:	f000 f98c 	bl	1000053e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10000226:	2200      	movs	r2, #0
10000228:	2101      	movs	r1, #1
1000022a:	f06f 0001 	mvn.w	r0, #1
1000022e:	f000 f986 	bl	1000053e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10000232:	2200      	movs	r2, #0
10000234:	2100      	movs	r1, #0
10000236:	2091      	movs	r0, #145	; 0x91
10000238:	f000 f981 	bl	1000053e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
1000023c:	2091      	movs	r0, #145	; 0x91
1000023e:	f000 f99a 	bl	10000576 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000242:	bf00      	nop
10000244:	bd80      	pop	{r7, pc}

10000246 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000246:	b480      	push	{r7}
10000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1000024a:	e7fe      	b.n	1000024a <NMI_Handler+0x4>

1000024c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1000024c:	b480      	push	{r7}
1000024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000250:	e7fe      	b.n	10000250 <HardFault_Handler+0x4>

10000252 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000252:	b480      	push	{r7}
10000254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000256:	e7fe      	b.n	10000256 <MemManage_Handler+0x4>

10000258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000258:	b480      	push	{r7}
1000025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
1000025c:	e7fe      	b.n	1000025c <BusFault_Handler+0x4>

1000025e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000025e:	b480      	push	{r7}
10000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000262:	e7fe      	b.n	10000262 <UsageFault_Handler+0x4>

10000264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000264:	b480      	push	{r7}
10000266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10000268:	bf00      	nop
1000026a:	46bd      	mov	sp, r7
1000026c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000270:	4770      	bx	lr

10000272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000272:	b480      	push	{r7}
10000274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000276:	bf00      	nop
10000278:	46bd      	mov	sp, r7
1000027a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000027e:	4770      	bx	lr

10000280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000280:	b480      	push	{r7}
10000282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000284:	bf00      	nop
10000286:	46bd      	mov	sp, r7
10000288:	f85d 7b04 	ldr.w	r7, [sp], #4
1000028c:	4770      	bx	lr

1000028e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000028e:	b580      	push	{r7, lr}
10000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000292:	f000 f859 	bl	10000348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000296:	bf00      	nop
10000298:	bd80      	pop	{r7, pc}

1000029a <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000029a:	b580      	push	{r7, lr}
1000029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000029e:	f001 fb41 	bl	10001924 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100002a2:	bf00      	nop
100002a4:	bd80      	pop	{r7, pc}

100002a6 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100002a6:	e7fe      	b.n	100002a6 <ADC1_IRQHandler>

100002a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100002a8:	b580      	push	{r7, lr}
100002aa:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100002ac:	2003      	movs	r0, #3
100002ae:	f000 f93b 	bl	10000528 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100002b2:	f001 faf6 	bl	100018a2 <HAL_RCC_GetSystemCoreClockFreq>
100002b6:	4603      	mov	r3, r0
100002b8:	4a07      	ldr	r2, [pc, #28]	; (100002d8 <HAL_Init+0x30>)
100002ba:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100002bc:	200f      	movs	r0, #15
100002be:	f000 f80d 	bl	100002dc <HAL_InitTick>
100002c2:	4603      	mov	r3, r0
100002c4:	2b00      	cmp	r3, #0
100002c6:	d001      	beq.n	100002cc <HAL_Init+0x24>
  {
    return HAL_ERROR;
100002c8:	2301      	movs	r3, #1
100002ca:	e002      	b.n	100002d2 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100002cc:	f7ff ff8b 	bl	100001e6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100002d0:	2300      	movs	r3, #0
}
100002d2:	4618      	mov	r0, r3
100002d4:	bd80      	pop	{r7, pc}
100002d6:	bf00      	nop
100002d8:	10020000 	.word	0x10020000

100002dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100002dc:	b580      	push	{r7, lr}
100002de:	b082      	sub	sp, #8
100002e0:	af00      	add	r7, sp, #0
100002e2:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100002e4:	4b15      	ldr	r3, [pc, #84]	; (1000033c <HAL_InitTick+0x60>)
100002e6:	781b      	ldrb	r3, [r3, #0]
100002e8:	2b00      	cmp	r3, #0
100002ea:	d101      	bne.n	100002f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100002ec:	2301      	movs	r3, #1
100002ee:	e021      	b.n	10000334 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100002f0:	4b13      	ldr	r3, [pc, #76]	; (10000340 <HAL_InitTick+0x64>)
100002f2:	681a      	ldr	r2, [r3, #0]
100002f4:	4b11      	ldr	r3, [pc, #68]	; (1000033c <HAL_InitTick+0x60>)
100002f6:	781b      	ldrb	r3, [r3, #0]
100002f8:	4619      	mov	r1, r3
100002fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100002fe:	fbb3 f3f1 	udiv	r3, r3, r1
10000302:	fbb2 f3f3 	udiv	r3, r2, r3
10000306:	4618      	mov	r0, r3
10000308:	f000 f943 	bl	10000592 <HAL_SYSTICK_Config>
1000030c:	4603      	mov	r3, r0
1000030e:	2b00      	cmp	r3, #0
10000310:	d001      	beq.n	10000316 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000312:	2301      	movs	r3, #1
10000314:	e00e      	b.n	10000334 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000316:	687b      	ldr	r3, [r7, #4]
10000318:	2b0f      	cmp	r3, #15
1000031a:	d80a      	bhi.n	10000332 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
1000031c:	2200      	movs	r2, #0
1000031e:	6879      	ldr	r1, [r7, #4]
10000320:	f04f 30ff 	mov.w	r0, #4294967295
10000324:	f000 f90b 	bl	1000053e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000328:	4a06      	ldr	r2, [pc, #24]	; (10000344 <HAL_InitTick+0x68>)
1000032a:	687b      	ldr	r3, [r7, #4]
1000032c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000032e:	2300      	movs	r3, #0
10000330:	e000      	b.n	10000334 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000332:	2301      	movs	r3, #1
}
10000334:	4618      	mov	r0, r3
10000336:	3708      	adds	r7, #8
10000338:	46bd      	mov	sp, r7
1000033a:	bd80      	pop	{r7, pc}
1000033c:	10020008 	.word	0x10020008
10000340:	10020000 	.word	0x10020000
10000344:	10020004 	.word	0x10020004

10000348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000348:	b480      	push	{r7}
1000034a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1000034c:	4b06      	ldr	r3, [pc, #24]	; (10000368 <HAL_IncTick+0x20>)
1000034e:	781b      	ldrb	r3, [r3, #0]
10000350:	461a      	mov	r2, r3
10000352:	4b06      	ldr	r3, [pc, #24]	; (1000036c <HAL_IncTick+0x24>)
10000354:	681b      	ldr	r3, [r3, #0]
10000356:	4413      	add	r3, r2
10000358:	4a04      	ldr	r2, [pc, #16]	; (1000036c <HAL_IncTick+0x24>)
1000035a:	6013      	str	r3, [r2, #0]
}
1000035c:	bf00      	nop
1000035e:	46bd      	mov	sp, r7
10000360:	f85d 7b04 	ldr.w	r7, [sp], #4
10000364:	4770      	bx	lr
10000366:	bf00      	nop
10000368:	10020008 	.word	0x10020008
1000036c:	10020028 	.word	0x10020028

10000370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000370:	b480      	push	{r7}
10000372:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000374:	4b03      	ldr	r3, [pc, #12]	; (10000384 <HAL_GetTick+0x14>)
10000376:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000378:	4618      	mov	r0, r3
1000037a:	46bd      	mov	sp, r7
1000037c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000380:	4770      	bx	lr
10000382:	bf00      	nop
10000384:	10020028 	.word	0x10020028

10000388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000388:	b480      	push	{r7}
1000038a:	b085      	sub	sp, #20
1000038c:	af00      	add	r7, sp, #0
1000038e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000390:	687b      	ldr	r3, [r7, #4]
10000392:	f003 0307 	and.w	r3, r3, #7
10000396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000398:	4b0c      	ldr	r3, [pc, #48]	; (100003cc <__NVIC_SetPriorityGrouping+0x44>)
1000039a:	68db      	ldr	r3, [r3, #12]
1000039c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
1000039e:	68ba      	ldr	r2, [r7, #8]
100003a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
100003a4:	4013      	ands	r3, r2
100003a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100003a8:	68fb      	ldr	r3, [r7, #12]
100003aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100003ac:	68bb      	ldr	r3, [r7, #8]
100003ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100003b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100003b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100003b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100003ba:	4a04      	ldr	r2, [pc, #16]	; (100003cc <__NVIC_SetPriorityGrouping+0x44>)
100003bc:	68bb      	ldr	r3, [r7, #8]
100003be:	60d3      	str	r3, [r2, #12]
}
100003c0:	bf00      	nop
100003c2:	3714      	adds	r7, #20
100003c4:	46bd      	mov	sp, r7
100003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100003ca:	4770      	bx	lr
100003cc:	e000ed00 	.word	0xe000ed00

100003d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100003d0:	b480      	push	{r7}
100003d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100003d4:	4b04      	ldr	r3, [pc, #16]	; (100003e8 <__NVIC_GetPriorityGrouping+0x18>)
100003d6:	68db      	ldr	r3, [r3, #12]
100003d8:	0a1b      	lsrs	r3, r3, #8
100003da:	f003 0307 	and.w	r3, r3, #7
}
100003de:	4618      	mov	r0, r3
100003e0:	46bd      	mov	sp, r7
100003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100003e6:	4770      	bx	lr
100003e8:	e000ed00 	.word	0xe000ed00

100003ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100003ec:	b480      	push	{r7}
100003ee:	b083      	sub	sp, #12
100003f0:	af00      	add	r7, sp, #0
100003f2:	4603      	mov	r3, r0
100003f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100003f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100003fa:	2b00      	cmp	r3, #0
100003fc:	db0b      	blt.n	10000416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100003fe:	88fb      	ldrh	r3, [r7, #6]
10000400:	f003 021f 	and.w	r2, r3, #31
10000404:	4907      	ldr	r1, [pc, #28]	; (10000424 <__NVIC_EnableIRQ+0x38>)
10000406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000040a:	095b      	lsrs	r3, r3, #5
1000040c:	2001      	movs	r0, #1
1000040e:	fa00 f202 	lsl.w	r2, r0, r2
10000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000416:	bf00      	nop
10000418:	370c      	adds	r7, #12
1000041a:	46bd      	mov	sp, r7
1000041c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000420:	4770      	bx	lr
10000422:	bf00      	nop
10000424:	e000e100 	.word	0xe000e100

10000428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000428:	b480      	push	{r7}
1000042a:	b083      	sub	sp, #12
1000042c:	af00      	add	r7, sp, #0
1000042e:	4603      	mov	r3, r0
10000430:	6039      	str	r1, [r7, #0]
10000432:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000438:	2b00      	cmp	r3, #0
1000043a:	db0a      	blt.n	10000452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000043c:	683b      	ldr	r3, [r7, #0]
1000043e:	b2da      	uxtb	r2, r3
10000440:	490c      	ldr	r1, [pc, #48]	; (10000474 <__NVIC_SetPriority+0x4c>)
10000442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000446:	0112      	lsls	r2, r2, #4
10000448:	b2d2      	uxtb	r2, r2
1000044a:	440b      	add	r3, r1
1000044c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000450:	e00a      	b.n	10000468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000452:	683b      	ldr	r3, [r7, #0]
10000454:	b2da      	uxtb	r2, r3
10000456:	4908      	ldr	r1, [pc, #32]	; (10000478 <__NVIC_SetPriority+0x50>)
10000458:	88fb      	ldrh	r3, [r7, #6]
1000045a:	f003 030f 	and.w	r3, r3, #15
1000045e:	3b04      	subs	r3, #4
10000460:	0112      	lsls	r2, r2, #4
10000462:	b2d2      	uxtb	r2, r2
10000464:	440b      	add	r3, r1
10000466:	761a      	strb	r2, [r3, #24]
}
10000468:	bf00      	nop
1000046a:	370c      	adds	r7, #12
1000046c:	46bd      	mov	sp, r7
1000046e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000472:	4770      	bx	lr
10000474:	e000e100 	.word	0xe000e100
10000478:	e000ed00 	.word	0xe000ed00

1000047c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000047c:	b480      	push	{r7}
1000047e:	b089      	sub	sp, #36	; 0x24
10000480:	af00      	add	r7, sp, #0
10000482:	60f8      	str	r0, [r7, #12]
10000484:	60b9      	str	r1, [r7, #8]
10000486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000488:	68fb      	ldr	r3, [r7, #12]
1000048a:	f003 0307 	and.w	r3, r3, #7
1000048e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000490:	69fb      	ldr	r3, [r7, #28]
10000492:	f1c3 0307 	rsb	r3, r3, #7
10000496:	2b04      	cmp	r3, #4
10000498:	bf28      	it	cs
1000049a:	2304      	movcs	r3, #4
1000049c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000049e:	69fb      	ldr	r3, [r7, #28]
100004a0:	3304      	adds	r3, #4
100004a2:	2b06      	cmp	r3, #6
100004a4:	d902      	bls.n	100004ac <NVIC_EncodePriority+0x30>
100004a6:	69fb      	ldr	r3, [r7, #28]
100004a8:	3b03      	subs	r3, #3
100004aa:	e000      	b.n	100004ae <NVIC_EncodePriority+0x32>
100004ac:	2300      	movs	r3, #0
100004ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100004b0:	f04f 32ff 	mov.w	r2, #4294967295
100004b4:	69bb      	ldr	r3, [r7, #24]
100004b6:	fa02 f303 	lsl.w	r3, r2, r3
100004ba:	43da      	mvns	r2, r3
100004bc:	68bb      	ldr	r3, [r7, #8]
100004be:	401a      	ands	r2, r3
100004c0:	697b      	ldr	r3, [r7, #20]
100004c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100004c4:	f04f 31ff 	mov.w	r1, #4294967295
100004c8:	697b      	ldr	r3, [r7, #20]
100004ca:	fa01 f303 	lsl.w	r3, r1, r3
100004ce:	43d9      	mvns	r1, r3
100004d0:	687b      	ldr	r3, [r7, #4]
100004d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100004d4:	4313      	orrs	r3, r2
         );
}
100004d6:	4618      	mov	r0, r3
100004d8:	3724      	adds	r7, #36	; 0x24
100004da:	46bd      	mov	sp, r7
100004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100004e0:	4770      	bx	lr
	...

100004e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100004e4:	b580      	push	{r7, lr}
100004e6:	b082      	sub	sp, #8
100004e8:	af00      	add	r7, sp, #0
100004ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100004ec:	687b      	ldr	r3, [r7, #4]
100004ee:	3b01      	subs	r3, #1
100004f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100004f4:	d301      	bcc.n	100004fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100004f6:	2301      	movs	r3, #1
100004f8:	e00f      	b.n	1000051a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100004fa:	4a0a      	ldr	r2, [pc, #40]	; (10000524 <SysTick_Config+0x40>)
100004fc:	687b      	ldr	r3, [r7, #4]
100004fe:	3b01      	subs	r3, #1
10000500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000502:	210f      	movs	r1, #15
10000504:	f04f 30ff 	mov.w	r0, #4294967295
10000508:	f7ff ff8e 	bl	10000428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1000050c:	4b05      	ldr	r3, [pc, #20]	; (10000524 <SysTick_Config+0x40>)
1000050e:	2200      	movs	r2, #0
10000510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000512:	4b04      	ldr	r3, [pc, #16]	; (10000524 <SysTick_Config+0x40>)
10000514:	2207      	movs	r2, #7
10000516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000518:	2300      	movs	r3, #0
}
1000051a:	4618      	mov	r0, r3
1000051c:	3708      	adds	r7, #8
1000051e:	46bd      	mov	sp, r7
10000520:	bd80      	pop	{r7, pc}
10000522:	bf00      	nop
10000524:	e000e010 	.word	0xe000e010

10000528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000528:	b580      	push	{r7, lr}
1000052a:	b082      	sub	sp, #8
1000052c:	af00      	add	r7, sp, #0
1000052e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000530:	6878      	ldr	r0, [r7, #4]
10000532:	f7ff ff29 	bl	10000388 <__NVIC_SetPriorityGrouping>
}
10000536:	bf00      	nop
10000538:	3708      	adds	r7, #8
1000053a:	46bd      	mov	sp, r7
1000053c:	bd80      	pop	{r7, pc}

1000053e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000053e:	b580      	push	{r7, lr}
10000540:	b086      	sub	sp, #24
10000542:	af00      	add	r7, sp, #0
10000544:	4603      	mov	r3, r0
10000546:	60b9      	str	r1, [r7, #8]
10000548:	607a      	str	r2, [r7, #4]
1000054a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
1000054c:	2300      	movs	r3, #0
1000054e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000550:	f7ff ff3e 	bl	100003d0 <__NVIC_GetPriorityGrouping>
10000554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000556:	687a      	ldr	r2, [r7, #4]
10000558:	68b9      	ldr	r1, [r7, #8]
1000055a:	6978      	ldr	r0, [r7, #20]
1000055c:	f7ff ff8e 	bl	1000047c <NVIC_EncodePriority>
10000560:	4602      	mov	r2, r0
10000562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000566:	4611      	mov	r1, r2
10000568:	4618      	mov	r0, r3
1000056a:	f7ff ff5d 	bl	10000428 <__NVIC_SetPriority>
}
1000056e:	bf00      	nop
10000570:	3718      	adds	r7, #24
10000572:	46bd      	mov	sp, r7
10000574:	bd80      	pop	{r7, pc}

10000576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000576:	b580      	push	{r7, lr}
10000578:	b082      	sub	sp, #8
1000057a:	af00      	add	r7, sp, #0
1000057c:	4603      	mov	r3, r0
1000057e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000584:	4618      	mov	r0, r3
10000586:	f7ff ff31 	bl	100003ec <__NVIC_EnableIRQ>
}
1000058a:	bf00      	nop
1000058c:	3708      	adds	r7, #8
1000058e:	46bd      	mov	sp, r7
10000590:	bd80      	pop	{r7, pc}

10000592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000592:	b580      	push	{r7, lr}
10000594:	b082      	sub	sp, #8
10000596:	af00      	add	r7, sp, #0
10000598:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000059a:	6878      	ldr	r0, [r7, #4]
1000059c:	f7ff ffa2 	bl	100004e4 <SysTick_Config>
100005a0:	4603      	mov	r3, r0
}
100005a2:	4618      	mov	r0, r3
100005a4:	3708      	adds	r7, #8
100005a6:	46bd      	mov	sp, r7
100005a8:	bd80      	pop	{r7, pc}
	...

100005ac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100005ac:	b580      	push	{r7, lr}
100005ae:	b084      	sub	sp, #16
100005b0:	af00      	add	r7, sp, #0
100005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100005b4:	2300      	movs	r3, #0
100005b6:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100005b8:	687b      	ldr	r3, [r7, #4]
100005ba:	2b00      	cmp	r3, #0
100005bc:	d101      	bne.n	100005c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100005be:	2301      	movs	r3, #1
100005c0:	e320      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100005c2:	687b      	ldr	r3, [r7, #4]
100005c4:	681b      	ldr	r3, [r3, #0]
100005c6:	f003 0301 	and.w	r3, r3, #1
100005ca:	2b00      	cmp	r3, #0
100005cc:	f000 8081 	beq.w	100006d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100005d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100005d4:	6a1b      	ldr	r3, [r3, #32]
100005d6:	f003 0303 	and.w	r3, r3, #3
100005da:	2b01      	cmp	r3, #1
100005dc:	d107      	bne.n	100005ee <HAL_RCC_OscConfig+0x42>
100005de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100005e2:	6a1b      	ldr	r3, [r3, #32]
100005e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100005e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100005ec:	d054      	beq.n	10000698 <HAL_RCC_OscConfig+0xec>
100005ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100005f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100005f4:	f003 0307 	and.w	r3, r3, #7
100005f8:	2b01      	cmp	r3, #1
100005fa:	d107      	bne.n	1000060c <HAL_RCC_OscConfig+0x60>
100005fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000060a:	d045      	beq.n	10000698 <HAL_RCC_OscConfig+0xec>
1000060c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000612:	f003 0303 	and.w	r3, r3, #3
10000616:	2b01      	cmp	r3, #1
10000618:	d107      	bne.n	1000062a <HAL_RCC_OscConfig+0x7e>
1000061a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000061e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000628:	d036      	beq.n	10000698 <HAL_RCC_OscConfig+0xec>
1000062a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000062e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000630:	f003 0303 	and.w	r3, r3, #3
10000634:	2b01      	cmp	r3, #1
10000636:	d10f      	bne.n	10000658 <HAL_RCC_OscConfig+0xac>
10000638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000063c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000640:	f003 0302 	and.w	r3, r3, #2
10000644:	2b02      	cmp	r3, #2
10000646:	d027      	beq.n	10000698 <HAL_RCC_OscConfig+0xec>
10000648:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000064c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000650:	f003 0302 	and.w	r3, r3, #2
10000654:	2b02      	cmp	r3, #2
10000656:	d01f      	beq.n	10000698 <HAL_RCC_OscConfig+0xec>
10000658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000065c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000660:	f003 0303 	and.w	r3, r3, #3
10000664:	2b01      	cmp	r3, #1
10000666:	d107      	bne.n	10000678 <HAL_RCC_OscConfig+0xcc>
10000668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000066c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000670:	f003 0302 	and.w	r3, r3, #2
10000674:	2b02      	cmp	r3, #2
10000676:	d00f      	beq.n	10000698 <HAL_RCC_OscConfig+0xec>
10000678:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000067c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000680:	f003 0303 	and.w	r3, r3, #3
10000684:	2b01      	cmp	r3, #1
10000686:	d117      	bne.n	100006b8 <HAL_RCC_OscConfig+0x10c>
10000688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000068c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000690:	f003 0302 	and.w	r3, r3, #2
10000694:	2b02      	cmp	r3, #2
10000696:	d10f      	bne.n	100006b8 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000698:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000069c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100006a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
100006a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100006a8:	d112      	bne.n	100006d0 <HAL_RCC_OscConfig+0x124>
100006aa:	687b      	ldr	r3, [r7, #4]
100006ac:	685b      	ldr	r3, [r3, #4]
100006ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100006b2:	d00d      	beq.n	100006d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100006b4:	2301      	movs	r3, #1
100006b6:	e2a5      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100006b8:	687b      	ldr	r3, [r7, #4]
100006ba:	685b      	ldr	r3, [r3, #4]
100006bc:	4618      	mov	r0, r3
100006be:	f000 faa7 	bl	10000c10 <HAL_RCC_HSEConfig>
100006c2:	4603      	mov	r3, r0
100006c4:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100006c6:	7bfb      	ldrb	r3, [r7, #15]
100006c8:	2b00      	cmp	r3, #0
100006ca:	d002      	beq.n	100006d2 <HAL_RCC_OscConfig+0x126>
      {
        return result;
100006cc:	7bfb      	ldrb	r3, [r7, #15]
100006ce:	e299      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100006d0:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100006d2:	687b      	ldr	r3, [r7, #4]
100006d4:	681b      	ldr	r3, [r3, #0]
100006d6:	f003 0302 	and.w	r3, r3, #2
100006da:	2b00      	cmp	r3, #0
100006dc:	f000 814e 	beq.w	1000097c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
100006e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100006e4:	6a1b      	ldr	r3, [r3, #32]
100006e6:	f003 0303 	and.w	r3, r3, #3
100006ea:	2b00      	cmp	r3, #0
100006ec:	d107      	bne.n	100006fe <HAL_RCC_OscConfig+0x152>
100006ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100006f2:	6a1b      	ldr	r3, [r3, #32]
100006f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100006f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100006fc:	d055      	beq.n	100007aa <HAL_RCC_OscConfig+0x1fe>
100006fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000704:	f003 0307 	and.w	r3, r3, #7
10000708:	2b00      	cmp	r3, #0
1000070a:	d107      	bne.n	1000071c <HAL_RCC_OscConfig+0x170>
1000070c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000071a:	d046      	beq.n	100007aa <HAL_RCC_OscConfig+0x1fe>
1000071c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000722:	f003 0303 	and.w	r3, r3, #3
10000726:	2b00      	cmp	r3, #0
10000728:	d107      	bne.n	1000073a <HAL_RCC_OscConfig+0x18e>
1000072a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000072e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000738:	d037      	beq.n	100007aa <HAL_RCC_OscConfig+0x1fe>
1000073a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000073e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000740:	f003 0303 	and.w	r3, r3, #3
10000744:	2b00      	cmp	r3, #0
10000746:	d10f      	bne.n	10000768 <HAL_RCC_OscConfig+0x1bc>
10000748:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000074c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000750:	f003 0302 	and.w	r3, r3, #2
10000754:	2b02      	cmp	r3, #2
10000756:	d028      	beq.n	100007aa <HAL_RCC_OscConfig+0x1fe>
10000758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000075c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000760:	f003 0302 	and.w	r3, r3, #2
10000764:	2b02      	cmp	r3, #2
10000766:	d020      	beq.n	100007aa <HAL_RCC_OscConfig+0x1fe>
10000768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000076c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000770:	f003 0303 	and.w	r3, r3, #3
10000774:	2b00      	cmp	r3, #0
10000776:	d107      	bne.n	10000788 <HAL_RCC_OscConfig+0x1dc>
10000778:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000077c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000780:	f003 0302 	and.w	r3, r3, #2
10000784:	2b02      	cmp	r3, #2
10000786:	d010      	beq.n	100007aa <HAL_RCC_OscConfig+0x1fe>
10000788:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000078c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000790:	f003 0303 	and.w	r3, r3, #3
10000794:	2b00      	cmp	r3, #0
10000796:	f040 8088 	bne.w	100008aa <HAL_RCC_OscConfig+0x2fe>
1000079a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000079e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100007a2:	f003 0302 	and.w	r3, r3, #2
100007a6:	2b02      	cmp	r3, #2
100007a8:	d17f      	bne.n	100008aa <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100007aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007ae:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100007b2:	f003 0301 	and.w	r3, r3, #1
100007b6:	2b01      	cmp	r3, #1
100007b8:	d105      	bne.n	100007c6 <HAL_RCC_OscConfig+0x21a>
100007ba:	687b      	ldr	r3, [r7, #4]
100007bc:	68db      	ldr	r3, [r3, #12]
100007be:	2b01      	cmp	r3, #1
100007c0:	d001      	beq.n	100007c6 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100007c2:	2301      	movs	r3, #1
100007c4:	e21e      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100007c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007ca:	699b      	ldr	r3, [r3, #24]
100007cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100007d0:	687b      	ldr	r3, [r7, #4]
100007d2:	691b      	ldr	r3, [r3, #16]
100007d4:	021b      	lsls	r3, r3, #8
100007d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100007da:	4313      	orrs	r3, r2
100007dc:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100007de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100007e4:	f003 0303 	and.w	r3, r3, #3
100007e8:	2b00      	cmp	r3, #0
100007ea:	d10f      	bne.n	1000080c <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100007ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100007f4:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100007f8:	2b02      	cmp	r3, #2
100007fa:	d047      	beq.n	1000088c <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100007fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000804:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000808:	2b02      	cmp	r3, #2
1000080a:	d03f      	beq.n	1000088c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000080c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000810:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000814:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000818:	2b00      	cmp	r3, #0
1000081a:	d107      	bne.n	1000082c <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000081c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000820:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000824:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000828:	2b02      	cmp	r3, #2
1000082a:	d02f      	beq.n	1000088c <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000082c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000830:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000834:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000838:	2b00      	cmp	r3, #0
1000083a:	d107      	bne.n	1000084c <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
1000083c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000840:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000844:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000848:	2b02      	cmp	r3, #2
1000084a:	d01f      	beq.n	1000088c <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000084c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000850:	699b      	ldr	r3, [r3, #24]
10000852:	f023 0203 	bic.w	r2, r3, #3
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	695b      	ldr	r3, [r3, #20]
1000085a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000085e:	4313      	orrs	r3, r2
10000860:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000862:	f7ff fd85 	bl	10000370 <HAL_GetTick>
10000866:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000868:	e008      	b.n	1000087c <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000086a:	f7ff fd81 	bl	10000370 <HAL_GetTick>
1000086e:	4602      	mov	r2, r0
10000870:	68bb      	ldr	r3, [r7, #8]
10000872:	1ad3      	subs	r3, r2, r3
10000874:	2b64      	cmp	r3, #100	; 0x64
10000876:	d901      	bls.n	1000087c <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000878:	2303      	movs	r3, #3
1000087a:	e1c3      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000087c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000880:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000884:	f003 0304 	and.w	r3, r3, #4
10000888:	2b04      	cmp	r3, #4
1000088a:	d1ee      	bne.n	1000086a <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
1000088c:	f001 f809 	bl	100018a2 <HAL_RCC_GetSystemCoreClockFreq>
10000890:	4603      	mov	r3, r0
10000892:	4ab3      	ldr	r2, [pc, #716]	; (10000b60 <HAL_RCC_OscConfig+0x5b4>)
10000894:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000896:	4bb3      	ldr	r3, [pc, #716]	; (10000b64 <HAL_RCC_OscConfig+0x5b8>)
10000898:	681b      	ldr	r3, [r3, #0]
1000089a:	4618      	mov	r0, r3
1000089c:	f7ff fd1e 	bl	100002dc <HAL_InitTick>
100008a0:	4603      	mov	r3, r0
100008a2:	2b00      	cmp	r3, #0
100008a4:	d069      	beq.n	1000097a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
100008a6:	2301      	movs	r3, #1
100008a8:	e1ac      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100008aa:	687b      	ldr	r3, [r7, #4]
100008ac:	68db      	ldr	r3, [r3, #12]
100008ae:	2b00      	cmp	r3, #0
100008b0:	d049      	beq.n	10000946 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100008b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008b6:	68db      	ldr	r3, [r3, #12]
100008b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100008bc:	f043 0301 	orr.w	r3, r3, #1
100008c0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100008c2:	f7ff fd55 	bl	10000370 <HAL_GetTick>
100008c6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100008c8:	e008      	b.n	100008dc <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100008ca:	f7ff fd51 	bl	10000370 <HAL_GetTick>
100008ce:	4602      	mov	r2, r0
100008d0:	68bb      	ldr	r3, [r7, #8]
100008d2:	1ad3      	subs	r3, r2, r3
100008d4:	2b64      	cmp	r3, #100	; 0x64
100008d6:	d901      	bls.n	100008dc <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100008d8:	2303      	movs	r3, #3
100008da:	e193      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100008dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100008e4:	f003 0301 	and.w	r3, r3, #1
100008e8:	2b01      	cmp	r3, #1
100008ea:	d1ee      	bne.n	100008ca <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100008ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008f0:	699b      	ldr	r3, [r3, #24]
100008f2:	f023 0203 	bic.w	r2, r3, #3
100008f6:	687b      	ldr	r3, [r7, #4]
100008f8:	695b      	ldr	r3, [r3, #20]
100008fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100008fe:	4313      	orrs	r3, r2
10000900:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000902:	f7ff fd35 	bl	10000370 <HAL_GetTick>
10000906:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000908:	e008      	b.n	1000091c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000090a:	f7ff fd31 	bl	10000370 <HAL_GetTick>
1000090e:	4602      	mov	r2, r0
10000910:	68bb      	ldr	r3, [r7, #8]
10000912:	1ad3      	subs	r3, r2, r3
10000914:	2b64      	cmp	r3, #100	; 0x64
10000916:	d901      	bls.n	1000091c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000918:	2303      	movs	r3, #3
1000091a:	e173      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000091c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000920:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000924:	f003 0304 	and.w	r3, r3, #4
10000928:	2b04      	cmp	r3, #4
1000092a:	d1ee      	bne.n	1000090a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000092c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000930:	699b      	ldr	r3, [r3, #24]
10000932:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000936:	687b      	ldr	r3, [r7, #4]
10000938:	691b      	ldr	r3, [r3, #16]
1000093a:	021b      	lsls	r3, r3, #8
1000093c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000940:	4313      	orrs	r3, r2
10000942:	618b      	str	r3, [r1, #24]
10000944:	e01a      	b.n	1000097c <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000946:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000094a:	2201      	movs	r2, #1
1000094c:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000094e:	f7ff fd0f 	bl	10000370 <HAL_GetTick>
10000952:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000954:	e008      	b.n	10000968 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000956:	f7ff fd0b 	bl	10000370 <HAL_GetTick>
1000095a:	4602      	mov	r2, r0
1000095c:	68bb      	ldr	r3, [r7, #8]
1000095e:	1ad3      	subs	r3, r2, r3
10000960:	2b64      	cmp	r3, #100	; 0x64
10000962:	d901      	bls.n	10000968 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000964:	2303      	movs	r3, #3
10000966:	e14d      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000968:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000096c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000970:	f003 0301 	and.w	r3, r3, #1
10000974:	2b01      	cmp	r3, #1
10000976:	d0ee      	beq.n	10000956 <HAL_RCC_OscConfig+0x3aa>
10000978:	e000      	b.n	1000097c <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000097a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
1000097c:	687b      	ldr	r3, [r7, #4]
1000097e:	681b      	ldr	r3, [r3, #0]
10000980:	f003 0310 	and.w	r3, r3, #16
10000984:	2b00      	cmp	r3, #0
10000986:	f000 8091 	beq.w	10000aac <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000098a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000098e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000992:	f003 0303 	and.w	r3, r3, #3
10000996:	2b02      	cmp	r3, #2
10000998:	d107      	bne.n	100009aa <HAL_RCC_OscConfig+0x3fe>
1000099a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000099e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100009a2:	f003 0302 	and.w	r3, r3, #2
100009a6:	2b02      	cmp	r3, #2
100009a8:	d01e      	beq.n	100009e8 <HAL_RCC_OscConfig+0x43c>
100009aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100009b0:	f003 0303 	and.w	r3, r3, #3
100009b4:	2b02      	cmp	r3, #2
100009b6:	d107      	bne.n	100009c8 <HAL_RCC_OscConfig+0x41c>
100009b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100009be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100009c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100009c6:	d00f      	beq.n	100009e8 <HAL_RCC_OscConfig+0x43c>
100009c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009cc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100009d0:	f003 0303 	and.w	r3, r3, #3
100009d4:	2b02      	cmp	r3, #2
100009d6:	d122      	bne.n	10000a1e <HAL_RCC_OscConfig+0x472>
100009d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100009e0:	f003 0302 	and.w	r3, r3, #2
100009e4:	2b02      	cmp	r3, #2
100009e6:	d11a      	bne.n	10000a1e <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100009e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100009f0:	f003 0310 	and.w	r3, r3, #16
100009f4:	2b10      	cmp	r3, #16
100009f6:	d105      	bne.n	10000a04 <HAL_RCC_OscConfig+0x458>
100009f8:	687b      	ldr	r3, [r7, #4]
100009fa:	69db      	ldr	r3, [r3, #28]
100009fc:	2b10      	cmp	r3, #16
100009fe:	d001      	beq.n	10000a04 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000a00:	2301      	movs	r3, #1
10000a02:	e0ff      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a08:	69db      	ldr	r3, [r3, #28]
10000a0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000a0e:	687b      	ldr	r3, [r7, #4]
10000a10:	6a1b      	ldr	r3, [r3, #32]
10000a12:	021b      	lsls	r3, r3, #8
10000a14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000a18:	4313      	orrs	r3, r2
10000a1a:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000a1c:	e046      	b.n	10000aac <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000a1e:	687b      	ldr	r3, [r7, #4]
10000a20:	69db      	ldr	r3, [r3, #28]
10000a22:	2b00      	cmp	r3, #0
10000a24:	d029      	beq.n	10000a7a <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000a26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a2a:	68db      	ldr	r3, [r3, #12]
10000a2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000a30:	f043 0310 	orr.w	r3, r3, #16
10000a34:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000a36:	f7ff fc9b 	bl	10000370 <HAL_GetTick>
10000a3a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000a3c:	e008      	b.n	10000a50 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000a3e:	f7ff fc97 	bl	10000370 <HAL_GetTick>
10000a42:	4602      	mov	r2, r0
10000a44:	68bb      	ldr	r3, [r7, #8]
10000a46:	1ad3      	subs	r3, r2, r3
10000a48:	2b64      	cmp	r3, #100	; 0x64
10000a4a:	d901      	bls.n	10000a50 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000a4c:	2303      	movs	r3, #3
10000a4e:	e0d9      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000a50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a54:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000a58:	f003 0310 	and.w	r3, r3, #16
10000a5c:	2b10      	cmp	r3, #16
10000a5e:	d1ee      	bne.n	10000a3e <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a64:	69db      	ldr	r3, [r3, #28]
10000a66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000a6a:	687b      	ldr	r3, [r7, #4]
10000a6c:	6a1b      	ldr	r3, [r3, #32]
10000a6e:	021b      	lsls	r3, r3, #8
10000a70:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000a74:	4313      	orrs	r3, r2
10000a76:	61cb      	str	r3, [r1, #28]
10000a78:	e018      	b.n	10000aac <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a7e:	2210      	movs	r2, #16
10000a80:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000a82:	f7ff fc75 	bl	10000370 <HAL_GetTick>
10000a86:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000a88:	e008      	b.n	10000a9c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000a8a:	f7ff fc71 	bl	10000370 <HAL_GetTick>
10000a8e:	4602      	mov	r2, r0
10000a90:	68bb      	ldr	r3, [r7, #8]
10000a92:	1ad3      	subs	r3, r2, r3
10000a94:	2b64      	cmp	r3, #100	; 0x64
10000a96:	d901      	bls.n	10000a9c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000a98:	2303      	movs	r3, #3
10000a9a:	e0b3      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000aa0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000aa4:	f003 0310 	and.w	r3, r3, #16
10000aa8:	2b10      	cmp	r3, #16
10000aaa:	d0ee      	beq.n	10000a8a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000aac:	687b      	ldr	r3, [r7, #4]
10000aae:	681b      	ldr	r3, [r3, #0]
10000ab0:	f003 0308 	and.w	r3, r3, #8
10000ab4:	2b00      	cmp	r3, #0
10000ab6:	d042      	beq.n	10000b3e <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000ab8:	687b      	ldr	r3, [r7, #4]
10000aba:	699b      	ldr	r3, [r3, #24]
10000abc:	2b00      	cmp	r3, #0
10000abe:	d01f      	beq.n	10000b00 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10000ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ac4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000ac8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000acc:	f043 0301 	orr.w	r3, r3, #1
10000ad0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000ad4:	f7ff fc4c 	bl	10000370 <HAL_GetTick>
10000ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000ada:	e008      	b.n	10000aee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000adc:	f7ff fc48 	bl	10000370 <HAL_GetTick>
10000ae0:	4602      	mov	r2, r0
10000ae2:	68bb      	ldr	r3, [r7, #8]
10000ae4:	1ad3      	subs	r3, r2, r3
10000ae6:	2b64      	cmp	r3, #100	; 0x64
10000ae8:	d901      	bls.n	10000aee <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10000aea:	2303      	movs	r3, #3
10000aec:	e08a      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000af2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000af6:	f003 0302 	and.w	r3, r3, #2
10000afa:	2b02      	cmp	r3, #2
10000afc:	d1ee      	bne.n	10000adc <HAL_RCC_OscConfig+0x530>
10000afe:	e01e      	b.n	10000b3e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10000b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b04:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000b08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000b0c:	f023 0301 	bic.w	r3, r3, #1
10000b10:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000b14:	f7ff fc2c 	bl	10000370 <HAL_GetTick>
10000b18:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000b1a:	e008      	b.n	10000b2e <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000b1c:	f7ff fc28 	bl	10000370 <HAL_GetTick>
10000b20:	4602      	mov	r2, r0
10000b22:	68bb      	ldr	r3, [r7, #8]
10000b24:	1ad3      	subs	r3, r2, r3
10000b26:	2b64      	cmp	r3, #100	; 0x64
10000b28:	d901      	bls.n	10000b2e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10000b2a:	2303      	movs	r3, #3
10000b2c:	e06a      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b32:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000b36:	f003 0302 	and.w	r3, r3, #2
10000b3a:	2b02      	cmp	r3, #2
10000b3c:	d0ee      	beq.n	10000b1c <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10000b3e:	687b      	ldr	r3, [r7, #4]
10000b40:	681b      	ldr	r3, [r3, #0]
10000b42:	f003 0304 	and.w	r3, r3, #4
10000b46:	2b00      	cmp	r3, #0
10000b48:	d02b      	beq.n	10000ba2 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000b4a:	4b07      	ldr	r3, [pc, #28]	; (10000b68 <HAL_RCC_OscConfig+0x5bc>)
10000b4c:	681b      	ldr	r3, [r3, #0]
10000b4e:	4a06      	ldr	r2, [pc, #24]	; (10000b68 <HAL_RCC_OscConfig+0x5bc>)
10000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000b54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10000b56:	f7ff fc0b 	bl	10000370 <HAL_GetTick>
10000b5a:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000b5c:	e00f      	b.n	10000b7e <HAL_RCC_OscConfig+0x5d2>
10000b5e:	bf00      	nop
10000b60:	10020000 	.word	0x10020000
10000b64:	10020004 	.word	0x10020004
10000b68:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10000b6c:	f7ff fc00 	bl	10000370 <HAL_GetTick>
10000b70:	4602      	mov	r2, r0
10000b72:	68bb      	ldr	r3, [r7, #8]
10000b74:	1ad3      	subs	r3, r2, r3
10000b76:	2b64      	cmp	r3, #100	; 0x64
10000b78:	d901      	bls.n	10000b7e <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10000b7a:	2303      	movs	r3, #3
10000b7c:	e042      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000b7e:	4b23      	ldr	r3, [pc, #140]	; (10000c0c <HAL_RCC_OscConfig+0x660>)
10000b80:	681b      	ldr	r3, [r3, #0]
10000b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000b86:	2b00      	cmp	r3, #0
10000b88:	d0f0      	beq.n	10000b6c <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10000b8a:	687b      	ldr	r3, [r7, #4]
10000b8c:	689b      	ldr	r3, [r3, #8]
10000b8e:	4618      	mov	r0, r3
10000b90:	f000 f8a9 	bl	10000ce6 <HAL_RCC_LSEConfig>
10000b94:	4603      	mov	r3, r0
10000b96:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10000b98:	7bfb      	ldrb	r3, [r7, #15]
10000b9a:	2b00      	cmp	r3, #0
10000b9c:	d001      	beq.n	10000ba2 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10000b9e:	7bfb      	ldrb	r3, [r7, #15]
10000ba0:	e030      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10000ba2:	687b      	ldr	r3, [r7, #4]
10000ba4:	3324      	adds	r3, #36	; 0x24
10000ba6:	4618      	mov	r0, r3
10000ba8:	f000 f91a 	bl	10000de0 <RCC_PLL1_Config>
10000bac:	4603      	mov	r3, r0
10000bae:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000bb0:	7bfb      	ldrb	r3, [r7, #15]
10000bb2:	2b00      	cmp	r3, #0
10000bb4:	d001      	beq.n	10000bba <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10000bb6:	7bfb      	ldrb	r3, [r7, #15]
10000bb8:	e024      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10000bba:	687b      	ldr	r3, [r7, #4]
10000bbc:	3360      	adds	r3, #96	; 0x60
10000bbe:	4618      	mov	r0, r3
10000bc0:	f000 fecc 	bl	1000195c <RCCEx_PLL2_Config>
10000bc4:	4603      	mov	r3, r0
10000bc6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000bc8:	7bfb      	ldrb	r3, [r7, #15]
10000bca:	2b00      	cmp	r3, #0
10000bcc:	d001      	beq.n	10000bd2 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10000bce:	7bfb      	ldrb	r3, [r7, #15]
10000bd0:	e018      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10000bd2:	687b      	ldr	r3, [r7, #4]
10000bd4:	339c      	adds	r3, #156	; 0x9c
10000bd6:	4618      	mov	r0, r3
10000bd8:	f001 f842 	bl	10001c60 <RCCEx_PLL3_Config>
10000bdc:	4603      	mov	r3, r0
10000bde:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000be0:	7bfb      	ldrb	r3, [r7, #15]
10000be2:	2b00      	cmp	r3, #0
10000be4:	d001      	beq.n	10000bea <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10000be6:	7bfb      	ldrb	r3, [r7, #15]
10000be8:	e00c      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10000bea:	687b      	ldr	r3, [r7, #4]
10000bec:	33d8      	adds	r3, #216	; 0xd8
10000bee:	4618      	mov	r0, r3
10000bf0:	f001 f9a0 	bl	10001f34 <RCCEx_PLL4_Config>
10000bf4:	4603      	mov	r3, r0
10000bf6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000bf8:	7bfb      	ldrb	r3, [r7, #15]
10000bfa:	2b00      	cmp	r3, #0
10000bfc:	d001      	beq.n	10000c02 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10000bfe:	7bfb      	ldrb	r3, [r7, #15]
10000c00:	e000      	b.n	10000c04 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10000c02:	2300      	movs	r3, #0
}
10000c04:	4618      	mov	r0, r3
10000c06:	3710      	adds	r7, #16
10000c08:	46bd      	mov	sp, r7
10000c0a:	bd80      	pop	{r7, pc}
10000c0c:	50001000 	.word	0x50001000

10000c10 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10000c10:	b580      	push	{r7, lr}
10000c12:	b084      	sub	sp, #16
10000c14:	af00      	add	r7, sp, #0
10000c16:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10000c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
10000c20:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10000c22:	f7ff fba5 	bl	10000370 <HAL_GetTick>
10000c26:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10000c28:	e008      	b.n	10000c3c <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10000c2a:	f7ff fba1 	bl	10000370 <HAL_GetTick>
10000c2e:	4602      	mov	r2, r0
10000c30:	68fb      	ldr	r3, [r7, #12]
10000c32:	1ad3      	subs	r3, r2, r3
10000c34:	2b64      	cmp	r3, #100	; 0x64
10000c36:	d901      	bls.n	10000c3c <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10000c38:	2303      	movs	r3, #3
10000c3a:	e050      	b.n	10000cde <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10000c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c40:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000c4c:	d0ed      	beq.n	10000c2a <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10000c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c52:	f44f 6290 	mov.w	r2, #1152	; 0x480
10000c56:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10000c58:	687b      	ldr	r3, [r7, #4]
10000c5a:	2b00      	cmp	r3, #0
10000c5c:	d03e      	beq.n	10000cdc <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10000c5e:	687b      	ldr	r3, [r7, #4]
10000c60:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10000c64:	d108      	bne.n	10000c78 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10000c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c6a:	68db      	ldr	r3, [r3, #12]
10000c6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10000c74:	60d3      	str	r3, [r2, #12]
10000c76:	e013      	b.n	10000ca0 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10000c78:	687b      	ldr	r3, [r7, #4]
10000c7a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10000c7e:	d10f      	bne.n	10000ca0 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10000c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c84:	68db      	ldr	r3, [r3, #12]
10000c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10000c8e:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10000c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c94:	68db      	ldr	r3, [r3, #12]
10000c96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10000c9e:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ca4:	68db      	ldr	r3, [r3, #12]
10000ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000cae:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000cb0:	f7ff fb5e 	bl	10000370 <HAL_GetTick>
10000cb4:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10000cb6:	e008      	b.n	10000cca <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10000cb8:	f7ff fb5a 	bl	10000370 <HAL_GetTick>
10000cbc:	4602      	mov	r2, r0
10000cbe:	68fb      	ldr	r3, [r7, #12]
10000cc0:	1ad3      	subs	r3, r2, r3
10000cc2:	2b64      	cmp	r3, #100	; 0x64
10000cc4:	d901      	bls.n	10000cca <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10000cc6:	2303      	movs	r3, #3
10000cc8:	e009      	b.n	10000cde <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10000cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000cda:	d1ed      	bne.n	10000cb8 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10000cdc:	2300      	movs	r3, #0
}
10000cde:	4618      	mov	r0, r3
10000ce0:	3710      	adds	r7, #16
10000ce2:	46bd      	mov	sp, r7
10000ce4:	bd80      	pop	{r7, pc}

10000ce6 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10000ce6:	b580      	push	{r7, lr}
10000ce8:	b084      	sub	sp, #16
10000cea:	af00      	add	r7, sp, #0
10000cec:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10000cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000cfa:	f023 0301 	bic.w	r3, r3, #1
10000cfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10000d02:	f7ff fb35 	bl	10000370 <HAL_GetTick>
10000d06:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10000d08:	e00a      	b.n	10000d20 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10000d0a:	f7ff fb31 	bl	10000370 <HAL_GetTick>
10000d0e:	4602      	mov	r2, r0
10000d10:	68fb      	ldr	r3, [r7, #12]
10000d12:	1ad3      	subs	r3, r2, r3
10000d14:	f241 3288 	movw	r2, #5000	; 0x1388
10000d18:	4293      	cmp	r3, r2
10000d1a:	d901      	bls.n	10000d20 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10000d1c:	2303      	movs	r3, #3
10000d1e:	e05b      	b.n	10000dd8 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10000d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d28:	f003 0304 	and.w	r3, r3, #4
10000d2c:	2b04      	cmp	r3, #4
10000d2e:	d0ec      	beq.n	10000d0a <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10000d30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d3c:	f023 030a 	bic.w	r3, r3, #10
10000d40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10000d44:	687b      	ldr	r3, [r7, #4]
10000d46:	2b00      	cmp	r3, #0
10000d48:	d045      	beq.n	10000dd6 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10000d4a:	687b      	ldr	r3, [r7, #4]
10000d4c:	2b03      	cmp	r3, #3
10000d4e:	d10a      	bne.n	10000d66 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10000d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d5c:	f043 0302 	orr.w	r3, r3, #2
10000d60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10000d64:	e016      	b.n	10000d94 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10000d66:	687b      	ldr	r3, [r7, #4]
10000d68:	2b0b      	cmp	r3, #11
10000d6a:	d113      	bne.n	10000d94 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10000d6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d78:	f043 0308 	orr.w	r3, r3, #8
10000d7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10000d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d8c:	f043 0302 	orr.w	r3, r3, #2
10000d90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10000d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000d9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000da0:	f043 0301 	orr.w	r3, r3, #1
10000da4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000da8:	f7ff fae2 	bl	10000370 <HAL_GetTick>
10000dac:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10000dae:	e00a      	b.n	10000dc6 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10000db0:	f7ff fade 	bl	10000370 <HAL_GetTick>
10000db4:	4602      	mov	r2, r0
10000db6:	68fb      	ldr	r3, [r7, #12]
10000db8:	1ad3      	subs	r3, r2, r3
10000dba:	f241 3288 	movw	r2, #5000	; 0x1388
10000dbe:	4293      	cmp	r3, r2
10000dc0:	d901      	bls.n	10000dc6 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10000dc2:	2303      	movs	r3, #3
10000dc4:	e008      	b.n	10000dd8 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10000dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000dce:	f003 0304 	and.w	r3, r3, #4
10000dd2:	2b04      	cmp	r3, #4
10000dd4:	d1ec      	bne.n	10000db0 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10000dd6:	2300      	movs	r3, #0
}
10000dd8:	4618      	mov	r0, r3
10000dda:	3710      	adds	r7, #16
10000ddc:	46bd      	mov	sp, r7
10000dde:	bd80      	pop	{r7, pc}

10000de0 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10000de0:	b580      	push	{r7, lr}
10000de2:	b084      	sub	sp, #16
10000de4:	af00      	add	r7, sp, #0
10000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10000de8:	687b      	ldr	r3, [r7, #4]
10000dea:	681b      	ldr	r3, [r3, #0]
10000dec:	2b00      	cmp	r3, #0
10000dee:	f000 8174 	beq.w	100010da <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10000df2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000df6:	6a1b      	ldr	r3, [r3, #32]
10000df8:	f003 0303 	and.w	r3, r3, #3
10000dfc:	2b02      	cmp	r3, #2
10000dfe:	d108      	bne.n	10000e12 <RCC_PLL1_Config+0x32>
10000e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e04:	6a1b      	ldr	r3, [r3, #32]
10000e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e0e:	f000 8162 	beq.w	100010d6 <RCC_PLL1_Config+0x2f6>
10000e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e16:	6a1b      	ldr	r3, [r3, #32]
10000e18:	f003 0303 	and.w	r3, r3, #3
10000e1c:	2b03      	cmp	r3, #3
10000e1e:	d108      	bne.n	10000e32 <RCC_PLL1_Config+0x52>
10000e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e24:	6a1b      	ldr	r3, [r3, #32]
10000e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e2e:	f000 8152 	beq.w	100010d6 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10000e32:	687b      	ldr	r3, [r7, #4]
10000e34:	681b      	ldr	r3, [r3, #0]
10000e36:	2b02      	cmp	r3, #2
10000e38:	f040 8123 	bne.w	10001082 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10000e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10000e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10000e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000e58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e5c:	f023 0301 	bic.w	r3, r3, #1
10000e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e64:	f7ff fa84 	bl	10000370 <HAL_GetTick>
10000e68:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000e6a:	e008      	b.n	10000e7e <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000e6c:	f7ff fa80 	bl	10000370 <HAL_GetTick>
10000e70:	4602      	mov	r2, r0
10000e72:	68fb      	ldr	r3, [r7, #12]
10000e74:	1ad3      	subs	r3, r2, r3
10000e76:	2b64      	cmp	r3, #100	; 0x64
10000e78:	d901      	bls.n	10000e7e <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10000e7a:	2303      	movs	r3, #3
10000e7c:	e12e      	b.n	100010dc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000e86:	f003 0302 	and.w	r3, r3, #2
10000e8a:	2b02      	cmp	r3, #2
10000e8c:	d0ee      	beq.n	10000e6c <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10000e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000e94:	f003 0307 	and.w	r3, r3, #7
10000e98:	2b02      	cmp	r3, #2
10000e9a:	d112      	bne.n	10000ec2 <RCC_PLL1_Config+0xe2>
10000e9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000eaa:	d10a      	bne.n	10000ec2 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10000eac:	687b      	ldr	r3, [r7, #4]
10000eae:	685a      	ldr	r2, [r3, #4]
10000eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000eb6:	f003 0303 	and.w	r3, r3, #3
10000eba:	429a      	cmp	r2, r3
10000ebc:	d00c      	beq.n	10000ed8 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10000ebe:	2301      	movs	r3, #1
10000ec0:	e10c      	b.n	100010dc <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10000ec2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000ec8:	f023 0203 	bic.w	r2, r3, #3
10000ecc:	687b      	ldr	r3, [r7, #4]
10000ece:	685b      	ldr	r3, [r3, #4]
10000ed0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000ed4:	4313      	orrs	r3, r2
10000ed6:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10000ed8:	e008      	b.n	10000eec <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000eda:	f7ff fa49 	bl	10000370 <HAL_GetTick>
10000ede:	4602      	mov	r2, r0
10000ee0:	68fb      	ldr	r3, [r7, #12]
10000ee2:	1ad3      	subs	r3, r2, r3
10000ee4:	2b64      	cmp	r3, #100	; 0x64
10000ee6:	d901      	bls.n	10000eec <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10000ee8:	2303      	movs	r3, #3
10000eea:	e0f7      	b.n	100010dc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10000eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000efa:	d1ee      	bne.n	10000eda <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10000efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f00:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10000f04:	4b77      	ldr	r3, [pc, #476]	; (100010e4 <RCC_PLL1_Config+0x304>)
10000f06:	4013      	ands	r3, r2
10000f08:	687a      	ldr	r2, [r7, #4]
10000f0a:	68d2      	ldr	r2, [r2, #12]
10000f0c:	1e51      	subs	r1, r2, #1
10000f0e:	687a      	ldr	r2, [r7, #4]
10000f10:	6892      	ldr	r2, [r2, #8]
10000f12:	3a01      	subs	r2, #1
10000f14:	0412      	lsls	r2, r2, #16
10000f16:	430a      	orrs	r2, r1
10000f18:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f1c:	4313      	orrs	r3, r2
10000f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10000f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000f2a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10000f2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10000f32:	687a      	ldr	r2, [r7, #4]
10000f34:	6912      	ldr	r2, [r2, #16]
10000f36:	1e51      	subs	r1, r2, #1
10000f38:	687a      	ldr	r2, [r7, #4]
10000f3a:	6952      	ldr	r2, [r2, #20]
10000f3c:	3a01      	subs	r2, #1
10000f3e:	0212      	lsls	r2, r2, #8
10000f40:	4311      	orrs	r1, r2
10000f42:	687a      	ldr	r2, [r7, #4]
10000f44:	6992      	ldr	r2, [r2, #24]
10000f46:	3a01      	subs	r2, #1
10000f48:	0412      	lsls	r2, r2, #16
10000f4a:	430a      	orrs	r2, r1
10000f4c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f50:	4313      	orrs	r3, r2
10000f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10000f56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10000f66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10000f6a:	687b      	ldr	r3, [r7, #4]
10000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000f6e:	2b02      	cmp	r3, #2
10000f70:	d003      	beq.n	10000f7a <RCC_PLL1_Config+0x19a>
10000f72:	687b      	ldr	r3, [r7, #4]
10000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000f76:	2b00      	cmp	r3, #0
10000f78:	d10c      	bne.n	10000f94 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10000f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000f82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10000f8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10000f8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10000f92:	e00f      	b.n	10000fb4 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10000f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10000fa0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10000fa4:	687a      	ldr	r2, [r7, #4]
10000fa6:	6a12      	ldr	r2, [r2, #32]
10000fa8:	00d2      	lsls	r2, r2, #3
10000faa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000fae:	4313      	orrs	r3, r2
10000fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10000fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000fbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10000fc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10000fc8:	687b      	ldr	r3, [r7, #4]
10000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000fcc:	2b02      	cmp	r3, #2
10000fce:	d124      	bne.n	1000101a <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10000fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
10000fd8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10000fdc:	687b      	ldr	r3, [r7, #4]
10000fde:	6a99      	ldr	r1, [r3, #40]	; 0x28
10000fe0:	687b      	ldr	r3, [r7, #4]
10000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10000fe4:	4319      	orrs	r1, r3
10000fe6:	687b      	ldr	r3, [r7, #4]
10000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10000fea:	4319      	orrs	r1, r3
10000fec:	687b      	ldr	r3, [r7, #4]
10000fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10000ff0:	4319      	orrs	r1, r3
10000ff2:	687b      	ldr	r3, [r7, #4]
10000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10000ff6:	041b      	lsls	r3, r3, #16
10000ff8:	430b      	orrs	r3, r1
10000ffa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000ffe:	4313      	orrs	r3, r2
10001000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000100c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001010:	f043 0304 	orr.w	r3, r3, #4
10001014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10001018:	e009      	b.n	1000102e <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000101a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001026:	f023 0304 	bic.w	r3, r3, #4
1000102a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
1000102e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001036:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000103a:	f043 0301 	orr.w	r3, r3, #1
1000103e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001042:	f7ff f995 	bl	10000370 <HAL_GetTick>
10001046:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001048:	e008      	b.n	1000105c <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000104a:	f7ff f991 	bl	10000370 <HAL_GetTick>
1000104e:	4602      	mov	r2, r0
10001050:	68fb      	ldr	r3, [r7, #12]
10001052:	1ad3      	subs	r3, r2, r3
10001054:	2b64      	cmp	r3, #100	; 0x64
10001056:	d901      	bls.n	1000105c <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10001058:	2303      	movs	r3, #3
1000105a:	e03f      	b.n	100010dc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000105c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001064:	f003 0302 	and.w	r3, r3, #2
10001068:	2b02      	cmp	r3, #2
1000106a:	d1ee      	bne.n	1000104a <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000106c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001074:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001078:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000107c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001080:	e02b      	b.n	100010da <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000108a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000108e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001092:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10001096:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000109e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100010a2:	f023 0301 	bic.w	r3, r3, #1
100010a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100010aa:	f7ff f961 	bl	10000370 <HAL_GetTick>
100010ae:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100010b0:	e008      	b.n	100010c4 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100010b2:	f7ff f95d 	bl	10000370 <HAL_GetTick>
100010b6:	4602      	mov	r2, r0
100010b8:	68fb      	ldr	r3, [r7, #12]
100010ba:	1ad3      	subs	r3, r2, r3
100010bc:	2b64      	cmp	r3, #100	; 0x64
100010be:	d901      	bls.n	100010c4 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100010c0:	2303      	movs	r3, #3
100010c2:	e00b      	b.n	100010dc <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100010c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100010cc:	f003 0302 	and.w	r3, r3, #2
100010d0:	2b02      	cmp	r3, #2
100010d2:	d0ee      	beq.n	100010b2 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100010d4:	e001      	b.n	100010da <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100010d6:	2301      	movs	r3, #1
100010d8:	e000      	b.n	100010dc <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100010da:	2300      	movs	r3, #0

}
100010dc:	4618      	mov	r0, r3
100010de:	3710      	adds	r7, #16
100010e0:	46bd      	mov	sp, r7
100010e2:	bd80      	pop	{r7, pc}
100010e4:	ffc0fe00 	.word	0xffc0fe00

100010e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100010e8:	b580      	push	{r7, lr}
100010ea:	b084      	sub	sp, #16
100010ec:	af00      	add	r7, sp, #0
100010ee:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100010f0:	2300      	movs	r3, #0
100010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100010f4:	687b      	ldr	r3, [r7, #4]
100010f6:	2b00      	cmp	r3, #0
100010f8:	d101      	bne.n	100010fe <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100010fa:	2301      	movs	r3, #1
100010fc:	e102      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100010fe:	687b      	ldr	r3, [r7, #4]
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	f003 0301 	and.w	r3, r3, #1
10001106:	2b00      	cmp	r3, #0
10001108:	d00b      	beq.n	10001122 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000110a:	687b      	ldr	r3, [r7, #4]
1000110c:	3304      	adds	r3, #4
1000110e:	4618      	mov	r0, r3
10001110:	f000 f8fc 	bl	1000130c <RCC_MPUConfig>
10001114:	4603      	mov	r3, r0
10001116:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001118:	7bfb      	ldrb	r3, [r7, #15]
1000111a:	2b00      	cmp	r3, #0
1000111c:	d001      	beq.n	10001122 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
1000111e:	7bfb      	ldrb	r3, [r7, #15]
10001120:	e0f0      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001122:	687b      	ldr	r3, [r7, #4]
10001124:	681b      	ldr	r3, [r3, #0]
10001126:	f003 0302 	and.w	r3, r3, #2
1000112a:	2b00      	cmp	r3, #0
1000112c:	d00b      	beq.n	10001146 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
1000112e:	687b      	ldr	r3, [r7, #4]
10001130:	330c      	adds	r3, #12
10001132:	4618      	mov	r0, r3
10001134:	f000 f960 	bl	100013f8 <RCC_AXISSConfig>
10001138:	4603      	mov	r3, r0
1000113a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000113c:	7bfb      	ldrb	r3, [r7, #15]
1000113e:	2b00      	cmp	r3, #0
10001140:	d001      	beq.n	10001146 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10001142:	7bfb      	ldrb	r3, [r7, #15]
10001144:	e0de      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10001146:	687b      	ldr	r3, [r7, #4]
10001148:	681b      	ldr	r3, [r3, #0]
1000114a:	f003 0304 	and.w	r3, r3, #4
1000114e:	2b00      	cmp	r3, #0
10001150:	d00b      	beq.n	1000116a <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10001152:	687b      	ldr	r3, [r7, #4]
10001154:	3314      	adds	r3, #20
10001156:	4618      	mov	r0, r3
10001158:	f000 f9e6 	bl	10001528 <RCC_MCUConfig>
1000115c:	4603      	mov	r3, r0
1000115e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001160:	7bfb      	ldrb	r3, [r7, #15]
10001162:	2b00      	cmp	r3, #0
10001164:	d001      	beq.n	1000116a <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10001166:	7bfb      	ldrb	r3, [r7, #15]
10001168:	e0cc      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000116a:	687b      	ldr	r3, [r7, #4]
1000116c:	681b      	ldr	r3, [r3, #0]
1000116e:	f003 0308 	and.w	r3, r3, #8
10001172:	2b00      	cmp	r3, #0
10001174:	d020      	beq.n	100011b8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10001176:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000117c:	f023 0207 	bic.w	r2, r3, #7
10001180:	687b      	ldr	r3, [r7, #4]
10001182:	69db      	ldr	r3, [r3, #28]
10001184:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001188:	4313      	orrs	r3, r2
1000118a:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000118c:	f7ff f8f0 	bl	10000370 <HAL_GetTick>
10001190:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001192:	e009      	b.n	100011a8 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001194:	f7ff f8ec 	bl	10000370 <HAL_GetTick>
10001198:	4602      	mov	r2, r0
1000119a:	68bb      	ldr	r3, [r7, #8]
1000119c:	1ad3      	subs	r3, r2, r3
1000119e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100011a2:	d901      	bls.n	100011a8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100011a4:	2303      	movs	r3, #3
100011a6:	e0ad      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100011a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100011ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100011b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100011b6:	d1ed      	bne.n	10001194 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100011b8:	687b      	ldr	r3, [r7, #4]
100011ba:	681b      	ldr	r3, [r3, #0]
100011bc:	f003 0310 	and.w	r3, r3, #16
100011c0:	2b00      	cmp	r3, #0
100011c2:	d020      	beq.n	10001206 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100011c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100011ca:	f023 0207 	bic.w	r2, r3, #7
100011ce:	687b      	ldr	r3, [r7, #4]
100011d0:	6a1b      	ldr	r3, [r3, #32]
100011d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100011d6:	4313      	orrs	r3, r2
100011d8:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100011da:	f7ff f8c9 	bl	10000370 <HAL_GetTick>
100011de:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100011e0:	e009      	b.n	100011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100011e2:	f7ff f8c5 	bl	10000370 <HAL_GetTick>
100011e6:	4602      	mov	r2, r0
100011e8:	68bb      	ldr	r3, [r7, #8]
100011ea:	1ad3      	subs	r3, r2, r3
100011ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100011f0:	d901      	bls.n	100011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100011f2:	2303      	movs	r3, #3
100011f4:	e086      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100011f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100011fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001204:	d1ed      	bne.n	100011e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10001206:	687b      	ldr	r3, [r7, #4]
10001208:	681b      	ldr	r3, [r3, #0]
1000120a:	f003 0320 	and.w	r3, r3, #32
1000120e:	2b00      	cmp	r3, #0
10001210:	d023      	beq.n	1000125a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001216:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000121a:	f023 0207 	bic.w	r2, r3, #7
1000121e:	687b      	ldr	r3, [r7, #4]
10001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001222:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001226:	4313      	orrs	r3, r2
10001228:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000122c:	f7ff f8a0 	bl	10000370 <HAL_GetTick>
10001230:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001232:	e009      	b.n	10001248 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001234:	f7ff f89c 	bl	10000370 <HAL_GetTick>
10001238:	4602      	mov	r2, r0
1000123a:	68bb      	ldr	r3, [r7, #8]
1000123c:	1ad3      	subs	r3, r2, r3
1000123e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001242:	d901      	bls.n	10001248 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001244:	2303      	movs	r3, #3
10001246:	e05d      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001248:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000124c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001258:	d1ec      	bne.n	10001234 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000125a:	687b      	ldr	r3, [r7, #4]
1000125c:	681b      	ldr	r3, [r3, #0]
1000125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
10001262:	2b00      	cmp	r3, #0
10001264:	d023      	beq.n	100012ae <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10001266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000126a:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000126e:	f023 0207 	bic.w	r2, r3, #7
10001272:	687b      	ldr	r3, [r7, #4]
10001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001276:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000127a:	4313      	orrs	r3, r2
1000127c:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001280:	f7ff f876 	bl	10000370 <HAL_GetTick>
10001284:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001286:	e009      	b.n	1000129c <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001288:	f7ff f872 	bl	10000370 <HAL_GetTick>
1000128c:	4602      	mov	r2, r0
1000128e:	68bb      	ldr	r3, [r7, #8]
10001290:	1ad3      	subs	r3, r2, r3
10001292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001296:	d901      	bls.n	1000129c <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001298:	2303      	movs	r3, #3
1000129a:	e033      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000129c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a0:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100012a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100012ac:	d1ec      	bne.n	10001288 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100012ae:	687b      	ldr	r3, [r7, #4]
100012b0:	681b      	ldr	r3, [r3, #0]
100012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
100012b6:	2b00      	cmp	r3, #0
100012b8:	d023      	beq.n	10001302 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100012ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012be:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100012c2:	f023 0207 	bic.w	r2, r3, #7
100012c6:	687b      	ldr	r3, [r7, #4]
100012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100012ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100012ce:	4313      	orrs	r3, r2
100012d0:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100012d4:	f7ff f84c 	bl	10000370 <HAL_GetTick>
100012d8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100012da:	e009      	b.n	100012f0 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100012dc:	f7ff f848 	bl	10000370 <HAL_GetTick>
100012e0:	4602      	mov	r2, r0
100012e2:	68bb      	ldr	r3, [r7, #8]
100012e4:	1ad3      	subs	r3, r2, r3
100012e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100012ea:	d901      	bls.n	100012f0 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100012ec:	2303      	movs	r3, #3
100012ee:	e009      	b.n	10001304 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100012f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f4:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100012f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001300:	d1ec      	bne.n	100012dc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001302:	2300      	movs	r3, #0
}
10001304:	4618      	mov	r0, r3
10001306:	3710      	adds	r7, #16
10001308:	46bd      	mov	sp, r7
1000130a:	bd80      	pop	{r7, pc}

1000130c <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
1000130c:	b580      	push	{r7, lr}
1000130e:	b084      	sub	sp, #16
10001310:	af00      	add	r7, sp, #0
10001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001314:	687b      	ldr	r3, [r7, #4]
10001316:	681b      	ldr	r3, [r3, #0]
10001318:	2b03      	cmp	r3, #3
1000131a:	d840      	bhi.n	1000139e <RCC_MPUConfig+0x92>
1000131c:	a201      	add	r2, pc, #4	; (adr r2, 10001324 <RCC_MPUConfig+0x18>)
1000131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001322:	bf00      	nop
10001324:	10001335 	.word	0x10001335
10001328:	10001349 	.word	0x10001349
1000132c:	1000135f 	.word	0x1000135f
10001330:	10001373 	.word	0x10001373
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001338:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000133c:	f003 0301 	and.w	r3, r3, #1
10001340:	2b01      	cmp	r3, #1
10001342:	d02e      	beq.n	100013a2 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001344:	2301      	movs	r3, #1
10001346:	e053      	b.n	100013f0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001348:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000134c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001358:	d025      	beq.n	100013a6 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000135a:	2301      	movs	r3, #1
1000135c:	e048      	b.n	100013f0 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000135e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001366:	f003 0302 	and.w	r3, r3, #2
1000136a:	2b02      	cmp	r3, #2
1000136c:	d01d      	beq.n	100013aa <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
1000136e:	2301      	movs	r3, #1
10001370:	e03e      	b.n	100013f0 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000137a:	f003 0302 	and.w	r3, r3, #2
1000137e:	2b02      	cmp	r3, #2
10001380:	d001      	beq.n	10001386 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001382:	2301      	movs	r3, #1
10001384:	e034      	b.n	100013f0 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001386:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000138c:	f023 0207 	bic.w	r2, r3, #7
10001390:	687b      	ldr	r3, [r7, #4]
10001392:	685b      	ldr	r3, [r3, #4]
10001394:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001398:	4313      	orrs	r3, r2
1000139a:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
1000139c:	e006      	b.n	100013ac <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
1000139e:	2301      	movs	r3, #1
100013a0:	e026      	b.n	100013f0 <RCC_MPUConfig+0xe4>
      break;
100013a2:	bf00      	nop
100013a4:	e002      	b.n	100013ac <RCC_MPUConfig+0xa0>
      break;
100013a6:	bf00      	nop
100013a8:	e000      	b.n	100013ac <RCC_MPUConfig+0xa0>
      break;
100013aa:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100013ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013b0:	6a1b      	ldr	r3, [r3, #32]
100013b2:	f023 0203 	bic.w	r2, r3, #3
100013b6:	687b      	ldr	r3, [r7, #4]
100013b8:	681b      	ldr	r3, [r3, #0]
100013ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100013be:	4313      	orrs	r3, r2
100013c0:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100013c2:	f7fe ffd5 	bl	10000370 <HAL_GetTick>
100013c6:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100013c8:	e009      	b.n	100013de <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100013ca:	f7fe ffd1 	bl	10000370 <HAL_GetTick>
100013ce:	4602      	mov	r2, r0
100013d0:	68fb      	ldr	r3, [r7, #12]
100013d2:	1ad3      	subs	r3, r2, r3
100013d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100013d8:	d901      	bls.n	100013de <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100013da:	2303      	movs	r3, #3
100013dc:	e008      	b.n	100013f0 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100013de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013e2:	6a1b      	ldr	r3, [r3, #32]
100013e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100013e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100013ec:	d1ed      	bne.n	100013ca <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100013ee:	2300      	movs	r3, #0
}
100013f0:	4618      	mov	r0, r3
100013f2:	3710      	adds	r7, #16
100013f4:	46bd      	mov	sp, r7
100013f6:	bd80      	pop	{r7, pc}

100013f8 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100013f8:	b580      	push	{r7, lr}
100013fa:	b084      	sub	sp, #16
100013fc:	af00      	add	r7, sp, #0
100013fe:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001400:	687b      	ldr	r3, [r7, #4]
10001402:	681b      	ldr	r3, [r3, #0]
10001404:	2b02      	cmp	r3, #2
10001406:	d01b      	beq.n	10001440 <RCC_AXISSConfig+0x48>
10001408:	2b02      	cmp	r3, #2
1000140a:	d823      	bhi.n	10001454 <RCC_AXISSConfig+0x5c>
1000140c:	2b00      	cmp	r3, #0
1000140e:	d002      	beq.n	10001416 <RCC_AXISSConfig+0x1e>
10001410:	2b01      	cmp	r3, #1
10001412:	d00a      	beq.n	1000142a <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001414:	e01e      	b.n	10001454 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000141a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000141e:	f003 0301 	and.w	r3, r3, #1
10001422:	2b01      	cmp	r3, #1
10001424:	d018      	beq.n	10001458 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001426:	2301      	movs	r3, #1
10001428:	e079      	b.n	1000151e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000142a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000142e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000143a:	d00f      	beq.n	1000145c <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
1000143c:	2301      	movs	r3, #1
1000143e:	e06e      	b.n	1000151e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001448:	f003 0302 	and.w	r3, r3, #2
1000144c:	2b02      	cmp	r3, #2
1000144e:	d007      	beq.n	10001460 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001450:	2301      	movs	r3, #1
10001452:	e064      	b.n	1000151e <RCC_AXISSConfig+0x126>
      break;
10001454:	bf00      	nop
10001456:	e004      	b.n	10001462 <RCC_AXISSConfig+0x6a>
      break;
10001458:	bf00      	nop
1000145a:	e002      	b.n	10001462 <RCC_AXISSConfig+0x6a>
      break;
1000145c:	bf00      	nop
1000145e:	e000      	b.n	10001462 <RCC_AXISSConfig+0x6a>
      break;
10001460:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001462:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001468:	f023 0207 	bic.w	r2, r3, #7
1000146c:	687b      	ldr	r3, [r7, #4]
1000146e:	681b      	ldr	r3, [r3, #0]
10001470:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001474:	4313      	orrs	r3, r2
10001476:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001478:	687b      	ldr	r3, [r7, #4]
1000147a:	681b      	ldr	r3, [r3, #0]
1000147c:	2b03      	cmp	r3, #3
1000147e:	d016      	beq.n	100014ae <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001480:	f7fe ff76 	bl	10000370 <HAL_GetTick>
10001484:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001486:	e009      	b.n	1000149c <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001488:	f7fe ff72 	bl	10000370 <HAL_GetTick>
1000148c:	4602      	mov	r2, r0
1000148e:	68fb      	ldr	r3, [r7, #12]
10001490:	1ad3      	subs	r3, r2, r3
10001492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001496:	d901      	bls.n	1000149c <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001498:	2303      	movs	r3, #3
1000149a:	e040      	b.n	1000151e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000149c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100014a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100014aa:	d1ed      	bne.n	10001488 <RCC_AXISSConfig+0x90>
100014ac:	e015      	b.n	100014da <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100014ae:	f7fe ff5f 	bl	10000370 <HAL_GetTick>
100014b2:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100014b4:	e009      	b.n	100014ca <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100014b6:	f7fe ff5b 	bl	10000370 <HAL_GetTick>
100014ba:	4602      	mov	r2, r0
100014bc:	68fb      	ldr	r3, [r7, #12]
100014be:	1ad3      	subs	r3, r2, r3
100014c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100014c4:	d901      	bls.n	100014ca <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100014c6:	2303      	movs	r3, #3
100014c8:	e029      	b.n	1000151e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100014ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100014d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100014d8:	d0ed      	beq.n	100014b6 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100014da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100014e0:	f023 0207 	bic.w	r2, r3, #7
100014e4:	687b      	ldr	r3, [r7, #4]
100014e6:	685b      	ldr	r3, [r3, #4]
100014e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100014ec:	4313      	orrs	r3, r2
100014ee:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100014f0:	f7fe ff3e 	bl	10000370 <HAL_GetTick>
100014f4:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100014f6:	e009      	b.n	1000150c <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100014f8:	f7fe ff3a 	bl	10000370 <HAL_GetTick>
100014fc:	4602      	mov	r2, r0
100014fe:	68fb      	ldr	r3, [r7, #12]
10001500:	1ad3      	subs	r3, r2, r3
10001502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001506:	d901      	bls.n	1000150c <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001508:	2303      	movs	r3, #3
1000150a:	e008      	b.n	1000151e <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000150c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000151a:	d1ed      	bne.n	100014f8 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
1000151c:	2300      	movs	r3, #0
}
1000151e:	4618      	mov	r0, r3
10001520:	3710      	adds	r7, #16
10001522:	46bd      	mov	sp, r7
10001524:	bd80      	pop	{r7, pc}
	...

10001528 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001528:	b580      	push	{r7, lr}
1000152a:	b084      	sub	sp, #16
1000152c:	af00      	add	r7, sp, #0
1000152e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001530:	687b      	ldr	r3, [r7, #4]
10001532:	681b      	ldr	r3, [r3, #0]
10001534:	2b03      	cmp	r3, #3
10001536:	d834      	bhi.n	100015a2 <RCC_MCUConfig+0x7a>
10001538:	a201      	add	r2, pc, #4	; (adr r2, 10001540 <RCC_MCUConfig+0x18>)
1000153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000153e:	bf00      	nop
10001540:	10001551 	.word	0x10001551
10001544:	10001565 	.word	0x10001565
10001548:	1000157b 	.word	0x1000157b
1000154c:	1000158f 	.word	0x1000158f
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001554:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001558:	f003 0301 	and.w	r3, r3, #1
1000155c:	2b01      	cmp	r3, #1
1000155e:	d022      	beq.n	100015a6 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001560:	2301      	movs	r3, #1
10001562:	e081      	b.n	10001668 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001568:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001574:	d019      	beq.n	100015aa <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001576:	2301      	movs	r3, #1
10001578:	e076      	b.n	10001668 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000157a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000157e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001582:	f003 0310 	and.w	r3, r3, #16
10001586:	2b10      	cmp	r3, #16
10001588:	d011      	beq.n	100015ae <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
1000158a:	2301      	movs	r3, #1
1000158c:	e06c      	b.n	10001668 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000158e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001592:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001596:	f003 0302 	and.w	r3, r3, #2
1000159a:	2b02      	cmp	r3, #2
1000159c:	d009      	beq.n	100015b2 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
1000159e:	2301      	movs	r3, #1
100015a0:	e062      	b.n	10001668 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100015a2:	bf00      	nop
100015a4:	e006      	b.n	100015b4 <RCC_MCUConfig+0x8c>
      break;
100015a6:	bf00      	nop
100015a8:	e004      	b.n	100015b4 <RCC_MCUConfig+0x8c>
      break;
100015aa:	bf00      	nop
100015ac:	e002      	b.n	100015b4 <RCC_MCUConfig+0x8c>
      break;
100015ae:	bf00      	nop
100015b0:	e000      	b.n	100015b4 <RCC_MCUConfig+0x8c>
      break;
100015b2:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100015b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100015ba:	f023 0203 	bic.w	r2, r3, #3
100015be:	687b      	ldr	r3, [r7, #4]
100015c0:	681b      	ldr	r3, [r3, #0]
100015c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100015c6:	4313      	orrs	r3, r2
100015c8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100015ca:	f7fe fed1 	bl	10000370 <HAL_GetTick>
100015ce:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100015d0:	e009      	b.n	100015e6 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100015d2:	f7fe fecd 	bl	10000370 <HAL_GetTick>
100015d6:	4602      	mov	r2, r0
100015d8:	68fb      	ldr	r3, [r7, #12]
100015da:	1ad3      	subs	r3, r2, r3
100015dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100015e0:	d901      	bls.n	100015e6 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
100015e2:	2303      	movs	r3, #3
100015e4:	e040      	b.n	10001668 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100015e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100015ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100015f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100015f4:	d1ed      	bne.n	100015d2 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100015f6:	f000 f954 	bl	100018a2 <HAL_RCC_GetSystemCoreClockFreq>
100015fa:	4603      	mov	r3, r0
100015fc:	4a1c      	ldr	r2, [pc, #112]	; (10001670 <RCC_MCUConfig+0x148>)
100015fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001600:	4b1c      	ldr	r3, [pc, #112]	; (10001674 <RCC_MCUConfig+0x14c>)
10001602:	681b      	ldr	r3, [r3, #0]
10001604:	4618      	mov	r0, r3
10001606:	f7fe fe69 	bl	100002dc <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
1000160a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000160e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001612:	f023 020f 	bic.w	r2, r3, #15
10001616:	687b      	ldr	r3, [r7, #4]
10001618:	685b      	ldr	r3, [r3, #4]
1000161a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000161e:	4313      	orrs	r3, r2
10001620:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001624:	f7fe fea4 	bl	10000370 <HAL_GetTick>
10001628:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000162a:	e009      	b.n	10001640 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000162c:	f7fe fea0 	bl	10000370 <HAL_GetTick>
10001630:	4602      	mov	r2, r0
10001632:	68fb      	ldr	r3, [r7, #12]
10001634:	1ad3      	subs	r3, r2, r3
10001636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000163a:	d901      	bls.n	10001640 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
1000163c:	2303      	movs	r3, #3
1000163e:	e013      	b.n	10001668 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001644:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000164c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001650:	d1ec      	bne.n	1000162c <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001652:	f000 f926 	bl	100018a2 <HAL_RCC_GetSystemCoreClockFreq>
10001656:	4603      	mov	r3, r0
10001658:	4a05      	ldr	r2, [pc, #20]	; (10001670 <RCC_MCUConfig+0x148>)
1000165a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
1000165c:	4b05      	ldr	r3, [pc, #20]	; (10001674 <RCC_MCUConfig+0x14c>)
1000165e:	681b      	ldr	r3, [r3, #0]
10001660:	4618      	mov	r0, r3
10001662:	f7fe fe3b 	bl	100002dc <HAL_InitTick>
#endif

  return HAL_OK;
10001666:	2300      	movs	r3, #0
}
10001668:	4618      	mov	r0, r3
1000166a:	3710      	adds	r7, #16
1000166c:	46bd      	mov	sp, r7
1000166e:	bd80      	pop	{r7, pc}
10001670:	10020000 	.word	0x10020000
10001674:	10020004 	.word	0x10020004

10001678 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001678:	b480      	push	{r7}
1000167a:	b089      	sub	sp, #36	; 0x24
1000167c:	af00      	add	r7, sp, #0
1000167e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001680:	2300      	movs	r3, #0
10001682:	61bb      	str	r3, [r7, #24]
10001684:	2301      	movs	r3, #1
10001686:	617b      	str	r3, [r7, #20]
10001688:	2300      	movs	r3, #0
1000168a:	613b      	str	r3, [r7, #16]
1000168c:	2300      	movs	r3, #0
1000168e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001690:	f04f 0300 	mov.w	r3, #0
10001694:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001696:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000169a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000169e:	f003 0303 	and.w	r3, r3, #3
100016a2:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
100016a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016a8:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100016ac:	0c1b      	lsrs	r3, r3, #16
100016ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100016b2:	3301      	adds	r3, #1
100016b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
100016b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ba:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100016be:	0c1b      	lsrs	r3, r3, #16
100016c0:	f003 0301 	and.w	r3, r3, #1
100016c4:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100016c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ca:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100016ce:	08db      	lsrs	r3, r3, #3
100016d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
100016d4:	693a      	ldr	r2, [r7, #16]
100016d6:	fb02 f303 	mul.w	r3, r2, r3
100016da:	ee07 3a90 	vmov	s15, r3
100016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
100016e2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100016e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ea:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100016ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
100016f2:	3301      	adds	r3, #1
100016f4:	ee07 3a90 	vmov	s15, r3
100016f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100016fc:	edd7 6a02 	vldr	s13, [r7, #8]
10001700:	ed9f 6a56 	vldr	s12, [pc, #344]	; 1000185c <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001704:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001708:	ee77 7a27 	vadd.f32	s15, s14, s15
1000170c:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001710:	69bb      	ldr	r3, [r7, #24]
10001712:	2b03      	cmp	r3, #3
10001714:	d85b      	bhi.n	100017ce <HAL_RCC_GetPLL3ClockFreq+0x156>
10001716:	a201      	add	r2, pc, #4	; (adr r2, 1000171c <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000171c:	1000172d 	.word	0x1000172d
10001720:	1000178b 	.word	0x1000178b
10001724:	100017a9 	.word	0x100017a9
10001728:	100017c7 	.word	0x100017c7
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
1000172c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001730:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001734:	f003 0304 	and.w	r3, r3, #4
10001738:	2b04      	cmp	r3, #4
1000173a:	d117      	bne.n	1000176c <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000173c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001740:	699b      	ldr	r3, [r3, #24]
10001742:	f003 0303 	and.w	r3, r3, #3
10001746:	4a46      	ldr	r2, [pc, #280]	; (10001860 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001748:	fa22 f303 	lsr.w	r3, r2, r3
1000174c:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
1000174e:	68fa      	ldr	r2, [r7, #12]
10001750:	697b      	ldr	r3, [r7, #20]
10001752:	fbb2 f3f3 	udiv	r3, r2, r3
10001756:	ee07 3a90 	vmov	s15, r3
1000175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000175e:	ed97 7a07 	vldr	s14, [r7, #28]
10001762:	ee67 7a27 	vmul.f32	s15, s14, s15
10001766:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000176a:	e030      	b.n	100017ce <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
1000176c:	4a3c      	ldr	r2, [pc, #240]	; (10001860 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000176e:	697b      	ldr	r3, [r7, #20]
10001770:	fbb2 f3f3 	udiv	r3, r2, r3
10001774:	ee07 3a90 	vmov	s15, r3
10001778:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000177c:	ed97 7a07 	vldr	s14, [r7, #28]
10001780:	ee67 7a27 	vmul.f32	s15, s14, s15
10001784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001788:	e021      	b.n	100017ce <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
1000178a:	4a36      	ldr	r2, [pc, #216]	; (10001864 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
1000178c:	697b      	ldr	r3, [r7, #20]
1000178e:	fbb2 f3f3 	udiv	r3, r2, r3
10001792:	ee07 3a90 	vmov	s15, r3
10001796:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000179a:	ed97 7a07 	vldr	s14, [r7, #28]
1000179e:	ee67 7a27 	vmul.f32	s15, s14, s15
100017a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100017a6:	e012      	b.n	100017ce <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100017a8:	4a2f      	ldr	r2, [pc, #188]	; (10001868 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
100017aa:	697b      	ldr	r3, [r7, #20]
100017ac:	fbb2 f3f3 	udiv	r3, r2, r3
100017b0:	ee07 3a90 	vmov	s15, r3
100017b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
100017b8:	ed97 7a07 	vldr	s14, [r7, #28]
100017bc:	ee67 7a27 	vmul.f32	s15, s14, s15
100017c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100017c4:	e003      	b.n	100017ce <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100017c6:	f04f 0300 	mov.w	r3, #0
100017ca:	61fb      	str	r3, [r7, #28]
      break;
100017cc:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100017ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017d2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100017d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100017da:	3301      	adds	r3, #1
100017dc:	ee07 3a90 	vmov	s15, r3
100017e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100017e4:	edd7 6a07 	vldr	s13, [r7, #28]
100017e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100017ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100017f0:	ee17 2a90 	vmov	r2, s15
100017f4:	687b      	ldr	r3, [r7, #4]
100017f6:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100017f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017fc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001800:	0a1b      	lsrs	r3, r3, #8
10001802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001806:	3301      	adds	r3, #1
10001808:	ee07 3a90 	vmov	s15, r3
1000180c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001810:	edd7 6a07 	vldr	s13, [r7, #28]
10001814:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000181c:	ee17 2a90 	vmov	r2, s15
10001820:	687b      	ldr	r3, [r7, #4]
10001822:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001828:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000182c:	0c1b      	lsrs	r3, r3, #16
1000182e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001832:	3301      	adds	r3, #1
10001834:	ee07 3a90 	vmov	s15, r3
10001838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000183c:	edd7 6a07 	vldr	s13, [r7, #28]
10001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001848:	ee17 2a90 	vmov	r2, s15
1000184c:	687b      	ldr	r3, [r7, #4]
1000184e:	609a      	str	r2, [r3, #8]
}
10001850:	bf00      	nop
10001852:	3724      	adds	r7, #36	; 0x24
10001854:	46bd      	mov	sp, r7
10001856:	f85d 7b04 	ldr.w	r7, [sp], #4
1000185a:	4770      	bx	lr
1000185c:	46000000 	.word	0x46000000
10001860:	03d09000 	.word	0x03d09000
10001864:	016e3600 	.word	0x016e3600
10001868:	003d0900 	.word	0x003d0900

1000186c <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
1000186c:	b580      	push	{r7, lr}
1000186e:	b082      	sub	sp, #8
10001870:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001872:	2300      	movs	r3, #0
10001874:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001876:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000187a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
1000187e:	f003 030f 	and.w	r3, r3, #15
10001882:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001884:	687b      	ldr	r3, [r7, #4]
10001886:	2b09      	cmp	r3, #9
10001888:	d901      	bls.n	1000188e <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000188a:	2309      	movs	r3, #9
1000188c:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
1000188e:	f000 f80f 	bl	100018b0 <HAL_RCC_GetMCUSSFreq>
10001892:	4602      	mov	r2, r0
10001894:	687b      	ldr	r3, [r7, #4]
10001896:	fa22 f303 	lsr.w	r3, r2, r3
}
1000189a:	4618      	mov	r0, r3
1000189c:	3708      	adds	r7, #8
1000189e:	46bd      	mov	sp, r7
100018a0:	bd80      	pop	{r7, pc}

100018a2 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100018a2:	b580      	push	{r7, lr}
100018a4:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100018a6:	f7ff ffe1 	bl	1000186c <HAL_RCC_GetMCUFreq>
100018aa:	4603      	mov	r3, r0
#endif
}
100018ac:	4618      	mov	r0, r3
100018ae:	bd80      	pop	{r7, pc}

100018b0 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
100018b0:	b580      	push	{r7, lr}
100018b2:	b084      	sub	sp, #16
100018b4:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100018b6:	2300      	movs	r3, #0
100018b8:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100018ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100018c0:	f003 0303 	and.w	r3, r3, #3
100018c4:	2b03      	cmp	r3, #3
100018c6:	d822      	bhi.n	1000190e <HAL_RCC_GetMCUSSFreq+0x5e>
100018c8:	a201      	add	r2, pc, #4	; (adr r2, 100018d0 <HAL_RCC_GetMCUSSFreq+0x20>)
100018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100018ce:	bf00      	nop
100018d0:	100018ef 	.word	0x100018ef
100018d4:	10001903 	.word	0x10001903
100018d8:	10001909 	.word	0x10001909
100018dc:	100018e1 	.word	0x100018e1
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100018e0:	463b      	mov	r3, r7
100018e2:	4618      	mov	r0, r3
100018e4:	f7ff fec8 	bl	10001678 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
100018e8:	683b      	ldr	r3, [r7, #0]
100018ea:	60fb      	str	r3, [r7, #12]
      break;
100018ec:	e00f      	b.n	1000190e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100018ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018f2:	699b      	ldr	r3, [r3, #24]
100018f4:	f003 0303 	and.w	r3, r3, #3
100018f8:	4a07      	ldr	r2, [pc, #28]	; (10001918 <HAL_RCC_GetMCUSSFreq+0x68>)
100018fa:	fa22 f303 	lsr.w	r3, r2, r3
100018fe:	60fb      	str	r3, [r7, #12]

      break;
10001900:	e005      	b.n	1000190e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001902:	4b06      	ldr	r3, [pc, #24]	; (1000191c <HAL_RCC_GetMCUSSFreq+0x6c>)
10001904:	60fb      	str	r3, [r7, #12]
      break;
10001906:	e002      	b.n	1000190e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001908:	4b05      	ldr	r3, [pc, #20]	; (10001920 <HAL_RCC_GetMCUSSFreq+0x70>)
1000190a:	60fb      	str	r3, [r7, #12]
      break;
1000190c:	bf00      	nop
  }

  return mcussfreq;
1000190e:	68fb      	ldr	r3, [r7, #12]
}
10001910:	4618      	mov	r0, r3
10001912:	3710      	adds	r7, #16
10001914:	46bd      	mov	sp, r7
10001916:	bd80      	pop	{r7, pc}
10001918:	03d09000 	.word	0x03d09000
1000191c:	016e3600 	.word	0x016e3600
10001920:	003d0900 	.word	0x003d0900

10001924 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10001924:	b580      	push	{r7, lr}
10001926:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10001928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000192c:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10001930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10001938:	d107      	bne.n	1000194a <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000193a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000193e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10001942:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10001946:	f000 f802 	bl	1000194e <HAL_RCC_WAKEUP_Callback>
  }
}
1000194a:	bf00      	nop
1000194c:	bd80      	pop	{r7, pc}

1000194e <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
1000194e:	b480      	push	{r7}
10001950:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10001952:	bf00      	nop
10001954:	46bd      	mov	sp, r7
10001956:	f85d 7b04 	ldr.w	r7, [sp], #4
1000195a:	4770      	bx	lr

1000195c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
1000195c:	b580      	push	{r7, lr}
1000195e:	b084      	sub	sp, #16
10001960:	af00      	add	r7, sp, #0
10001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001964:	687b      	ldr	r3, [r7, #4]
10001966:	681b      	ldr	r3, [r3, #0]
10001968:	2b00      	cmp	r3, #0
1000196a:	f000 8171 	beq.w	10001c50 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000196e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001974:	f003 0307 	and.w	r3, r3, #7
10001978:	2b02      	cmp	r3, #2
1000197a:	d108      	bne.n	1000198e <RCCEx_PLL2_Config+0x32>
1000197c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000198a:	f000 815f 	beq.w	10001c4c <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	681b      	ldr	r3, [r3, #0]
10001992:	2b02      	cmp	r3, #2
10001994:	f040 8130 	bne.w	10001bf8 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000199e:	f003 0303 	and.w	r3, r3, #3
100019a2:	2b00      	cmp	r3, #0
100019a4:	d008      	beq.n	100019b8 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100019a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100019ac:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100019b0:	2b01      	cmp	r3, #1
100019b2:	d001      	beq.n	100019b8 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100019b4:	2301      	movs	r3, #1
100019b6:	e14c      	b.n	10001c52 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100019b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100019c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100019c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100019c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100019cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100019d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100019d8:	f023 0301 	bic.w	r3, r3, #1
100019dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100019e0:	f7fe fcc6 	bl	10000370 <HAL_GetTick>
100019e4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100019e6:	e008      	b.n	100019fa <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100019e8:	f7fe fcc2 	bl	10000370 <HAL_GetTick>
100019ec:	4602      	mov	r2, r0
100019ee:	68fb      	ldr	r3, [r7, #12]
100019f0:	1ad3      	subs	r3, r2, r3
100019f2:	2b64      	cmp	r3, #100	; 0x64
100019f4:	d901      	bls.n	100019fa <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100019f6:	2303      	movs	r3, #3
100019f8:	e12b      	b.n	10001c52 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100019fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001a02:	f003 0302 	and.w	r3, r3, #2
10001a06:	2b02      	cmp	r3, #2
10001a08:	d0ee      	beq.n	100019e8 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a0e:	6a1b      	ldr	r3, [r3, #32]
10001a10:	f003 0303 	and.w	r3, r3, #3
10001a14:	2b02      	cmp	r3, #2
10001a16:	d107      	bne.n	10001a28 <RCCEx_PLL2_Config+0xcc>
10001a18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a1c:	6a1b      	ldr	r3, [r3, #32]
10001a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a26:	d00e      	beq.n	10001a46 <RCCEx_PLL2_Config+0xea>
10001a28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a2c:	6a1b      	ldr	r3, [r3, #32]
10001a2e:	f003 0303 	and.w	r3, r3, #3
10001a32:	2b03      	cmp	r3, #3
10001a34:	d112      	bne.n	10001a5c <RCCEx_PLL2_Config+0x100>
10001a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a3a:	6a1b      	ldr	r3, [r3, #32]
10001a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a44:	d10a      	bne.n	10001a5c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001a46:	687b      	ldr	r3, [r7, #4]
10001a48:	685a      	ldr	r2, [r3, #4]
10001a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001a50:	f003 0303 	and.w	r3, r3, #3
10001a54:	429a      	cmp	r2, r3
10001a56:	d00c      	beq.n	10001a72 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001a58:	2301      	movs	r3, #1
10001a5a:	e0fa      	b.n	10001c52 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001a62:	f023 0203 	bic.w	r2, r3, #3
10001a66:	687b      	ldr	r3, [r7, #4]
10001a68:	685b      	ldr	r3, [r3, #4]
10001a6a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a6e:	4313      	orrs	r3, r2
10001a70:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a76:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10001a7a:	4b78      	ldr	r3, [pc, #480]	; (10001c5c <RCCEx_PLL2_Config+0x300>)
10001a7c:	4013      	ands	r3, r2
10001a7e:	687a      	ldr	r2, [r7, #4]
10001a80:	68d2      	ldr	r2, [r2, #12]
10001a82:	1e51      	subs	r1, r2, #1
10001a84:	687a      	ldr	r2, [r7, #4]
10001a86:	6892      	ldr	r2, [r2, #8]
10001a88:	3a01      	subs	r2, #1
10001a8a:	0412      	lsls	r2, r2, #16
10001a8c:	430a      	orrs	r2, r1
10001a8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a92:	4313      	orrs	r3, r2
10001a94:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10001a98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001aa0:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001aa8:	687a      	ldr	r2, [r7, #4]
10001aaa:	6912      	ldr	r2, [r2, #16]
10001aac:	1e51      	subs	r1, r2, #1
10001aae:	687a      	ldr	r2, [r7, #4]
10001ab0:	6952      	ldr	r2, [r2, #20]
10001ab2:	3a01      	subs	r2, #1
10001ab4:	0212      	lsls	r2, r2, #8
10001ab6:	4311      	orrs	r1, r2
10001ab8:	687a      	ldr	r2, [r7, #4]
10001aba:	6992      	ldr	r2, [r2, #24]
10001abc:	3a01      	subs	r2, #1
10001abe:	0412      	lsls	r2, r2, #16
10001ac0:	430a      	orrs	r2, r1
10001ac2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ac6:	4313      	orrs	r3, r2
10001ac8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10001acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001ad4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001adc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ae4:	2b02      	cmp	r3, #2
10001ae6:	d003      	beq.n	10001af0 <RCCEx_PLL2_Config+0x194>
10001ae8:	687b      	ldr	r3, [r7, #4]
10001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001aec:	2b00      	cmp	r3, #0
10001aee:	d10c      	bne.n	10001b0a <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10001af0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001af8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001b00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001b04:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10001b08:	e00f      	b.n	10001b2a <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10001b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001b16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001b1a:	687a      	ldr	r2, [r7, #4]
10001b1c:	6a12      	ldr	r2, [r2, #32]
10001b1e:	00d2      	lsls	r2, r2, #3
10001b20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b24:	4313      	orrs	r3, r2
10001b26:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10001b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001b32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001b3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001b3e:	687b      	ldr	r3, [r7, #4]
10001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001b42:	2b02      	cmp	r3, #2
10001b44:	d124      	bne.n	10001b90 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10001b46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10001b4e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001b52:	687b      	ldr	r3, [r7, #4]
10001b54:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001b56:	687b      	ldr	r3, [r7, #4]
10001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001b5a:	4319      	orrs	r1, r3
10001b5c:	687b      	ldr	r3, [r7, #4]
10001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001b60:	4319      	orrs	r1, r3
10001b62:	687b      	ldr	r3, [r7, #4]
10001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001b66:	4319      	orrs	r1, r3
10001b68:	687b      	ldr	r3, [r7, #4]
10001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001b6c:	041b      	lsls	r3, r3, #16
10001b6e:	430b      	orrs	r3, r1
10001b70:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b74:	4313      	orrs	r3, r2
10001b76:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10001b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001b86:	f043 0304 	orr.w	r3, r3, #4
10001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10001b8e:	e009      	b.n	10001ba4 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10001b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001b9c:	f023 0304 	bic.w	r3, r3, #4
10001ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10001ba4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001bb0:	f043 0301 	orr.w	r3, r3, #1
10001bb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001bb8:	f7fe fbda 	bl	10000370 <HAL_GetTick>
10001bbc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001bbe:	e008      	b.n	10001bd2 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001bc0:	f7fe fbd6 	bl	10000370 <HAL_GetTick>
10001bc4:	4602      	mov	r2, r0
10001bc6:	68fb      	ldr	r3, [r7, #12]
10001bc8:	1ad3      	subs	r3, r2, r3
10001bca:	2b64      	cmp	r3, #100	; 0x64
10001bcc:	d901      	bls.n	10001bd2 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10001bce:	2303      	movs	r3, #3
10001bd0:	e03f      	b.n	10001c52 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001bda:	f003 0302 	and.w	r3, r3, #2
10001bde:	2b02      	cmp	r3, #2
10001be0:	d1ee      	bne.n	10001bc0 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001bea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001bee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10001bf6:	e02b      	b.n	10001c50 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10001c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001c18:	f023 0301 	bic.w	r3, r3, #1
10001c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001c20:	f7fe fba6 	bl	10000370 <HAL_GetTick>
10001c24:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001c26:	e008      	b.n	10001c3a <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001c28:	f7fe fba2 	bl	10000370 <HAL_GetTick>
10001c2c:	4602      	mov	r2, r0
10001c2e:	68fb      	ldr	r3, [r7, #12]
10001c30:	1ad3      	subs	r3, r2, r3
10001c32:	2b64      	cmp	r3, #100	; 0x64
10001c34:	d901      	bls.n	10001c3a <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10001c36:	2303      	movs	r3, #3
10001c38:	e00b      	b.n	10001c52 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c42:	f003 0302 	and.w	r3, r3, #2
10001c46:	2b02      	cmp	r3, #2
10001c48:	d0ee      	beq.n	10001c28 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10001c4a:	e001      	b.n	10001c50 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001c4c:	2301      	movs	r3, #1
10001c4e:	e000      	b.n	10001c52 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10001c50:	2300      	movs	r3, #0

}
10001c52:	4618      	mov	r0, r3
10001c54:	3710      	adds	r7, #16
10001c56:	46bd      	mov	sp, r7
10001c58:	bd80      	pop	{r7, pc}
10001c5a:	bf00      	nop
10001c5c:	ffc0fe00 	.word	0xffc0fe00

10001c60 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10001c60:	b580      	push	{r7, lr}
10001c62:	b084      	sub	sp, #16
10001c64:	af00      	add	r7, sp, #0
10001c66:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10001c68:	687b      	ldr	r3, [r7, #4]
10001c6a:	681b      	ldr	r3, [r3, #0]
10001c6c:	2b00      	cmp	r3, #0
10001c6e:	f000 815a 	beq.w	10001f26 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10001c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c78:	f003 0303 	and.w	r3, r3, #3
10001c7c:	2b03      	cmp	r3, #3
10001c7e:	d108      	bne.n	10001c92 <RCCEx_PLL3_Config+0x32>
10001c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c8e:	f000 8148 	beq.w	10001f22 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10001c92:	687b      	ldr	r3, [r7, #4]
10001c94:	681b      	ldr	r3, [r3, #0]
10001c96:	2b02      	cmp	r3, #2
10001c98:	f040 8119 	bne.w	10001ece <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ca0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001cac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10001cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cb4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001cbc:	f023 0301 	bic.w	r3, r3, #1
10001cc0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001cc4:	f7fe fb54 	bl	10000370 <HAL_GetTick>
10001cc8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001cca:	e008      	b.n	10001cde <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001ccc:	f7fe fb50 	bl	10000370 <HAL_GetTick>
10001cd0:	4602      	mov	r2, r0
10001cd2:	68fb      	ldr	r3, [r7, #12]
10001cd4:	1ad3      	subs	r3, r2, r3
10001cd6:	2b64      	cmp	r3, #100	; 0x64
10001cd8:	d901      	bls.n	10001cde <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10001cda:	2303      	movs	r3, #3
10001cdc:	e124      	b.n	10001f28 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001cde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ce2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001ce6:	f003 0302 	and.w	r3, r3, #2
10001cea:	2b02      	cmp	r3, #2
10001cec:	d0ee      	beq.n	10001ccc <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10001cee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cf2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001cf6:	f023 0203 	bic.w	r2, r3, #3
10001cfa:	687b      	ldr	r3, [r7, #4]
10001cfc:	685b      	ldr	r3, [r3, #4]
10001cfe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001d02:	4313      	orrs	r3, r2
10001d04:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10001d08:	e008      	b.n	10001d1c <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001d0a:	f7fe fb31 	bl	10000370 <HAL_GetTick>
10001d0e:	4602      	mov	r2, r0
10001d10:	68fb      	ldr	r3, [r7, #12]
10001d12:	1ad3      	subs	r3, r2, r3
10001d14:	2b64      	cmp	r3, #100	; 0x64
10001d16:	d901      	bls.n	10001d1c <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10001d18:	2303      	movs	r3, #3
10001d1a:	e105      	b.n	10001f28 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10001d1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d20:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d2c:	d1ed      	bne.n	10001d0a <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10001d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d32:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001d36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10001d3a:	687b      	ldr	r3, [r7, #4]
10001d3c:	69db      	ldr	r3, [r3, #28]
10001d3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001d42:	4313      	orrs	r3, r2
10001d44:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10001d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d4c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10001d50:	4b77      	ldr	r3, [pc, #476]	; (10001f30 <RCCEx_PLL3_Config+0x2d0>)
10001d52:	4013      	ands	r3, r2
10001d54:	687a      	ldr	r2, [r7, #4]
10001d56:	68d2      	ldr	r2, [r2, #12]
10001d58:	1e51      	subs	r1, r2, #1
10001d5a:	687a      	ldr	r2, [r7, #4]
10001d5c:	6892      	ldr	r2, [r2, #8]
10001d5e:	3a01      	subs	r2, #1
10001d60:	0412      	lsls	r2, r2, #16
10001d62:	430a      	orrs	r2, r1
10001d64:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001d68:	4313      	orrs	r3, r2
10001d6a:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10001d6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d72:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001d76:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001d7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001d7e:	687a      	ldr	r2, [r7, #4]
10001d80:	6912      	ldr	r2, [r2, #16]
10001d82:	1e51      	subs	r1, r2, #1
10001d84:	687a      	ldr	r2, [r7, #4]
10001d86:	6952      	ldr	r2, [r2, #20]
10001d88:	3a01      	subs	r2, #1
10001d8a:	0212      	lsls	r2, r2, #8
10001d8c:	4311      	orrs	r1, r2
10001d8e:	687a      	ldr	r2, [r7, #4]
10001d90:	6992      	ldr	r2, [r2, #24]
10001d92:	3a01      	subs	r2, #1
10001d94:	0412      	lsls	r2, r2, #16
10001d96:	430a      	orrs	r2, r1
10001d98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001d9c:	4313      	orrs	r3, r2
10001d9e:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10001da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001da6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001db2:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10001db6:	687b      	ldr	r3, [r7, #4]
10001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001dba:	2b02      	cmp	r3, #2
10001dbc:	d003      	beq.n	10001dc6 <RCCEx_PLL3_Config+0x166>
10001dbe:	687b      	ldr	r3, [r7, #4]
10001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001dc2:	2b00      	cmp	r3, #0
10001dc4:	d10c      	bne.n	10001de0 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10001dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dca:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001dce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001dd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001dda:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10001dde:	e00f      	b.n	10001e00 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10001de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001de4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001dec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001df0:	687a      	ldr	r2, [r7, #4]
10001df2:	6a12      	ldr	r2, [r2, #32]
10001df4:	00d2      	lsls	r2, r2, #3
10001df6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001dfa:	4313      	orrs	r3, r2
10001dfc:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10001e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e04:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001e08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001e10:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001e14:	687b      	ldr	r3, [r7, #4]
10001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e18:	2b02      	cmp	r3, #2
10001e1a:	d124      	bne.n	10001e66 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10001e1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e20:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10001e24:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001e28:	687b      	ldr	r3, [r7, #4]
10001e2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001e2c:	687b      	ldr	r3, [r7, #4]
10001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001e30:	4319      	orrs	r1, r3
10001e32:	687b      	ldr	r3, [r7, #4]
10001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001e36:	4319      	orrs	r1, r3
10001e38:	687b      	ldr	r3, [r7, #4]
10001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001e3c:	4319      	orrs	r1, r3
10001e3e:	687b      	ldr	r3, [r7, #4]
10001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001e42:	041b      	lsls	r3, r3, #16
10001e44:	430b      	orrs	r3, r1
10001e46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e4a:	4313      	orrs	r3, r2
10001e4c:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10001e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e54:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001e58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e5c:	f043 0304 	orr.w	r3, r3, #4
10001e60:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10001e64:	e009      	b.n	10001e7a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10001e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e6a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001e6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e72:	f023 0304 	bic.w	r3, r3, #4
10001e76:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10001e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e7e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001e82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e86:	f043 0301 	orr.w	r3, r3, #1
10001e8a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001e8e:	f7fe fa6f 	bl	10000370 <HAL_GetTick>
10001e92:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001e94:	e008      	b.n	10001ea8 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001e96:	f7fe fa6b 	bl	10000370 <HAL_GetTick>
10001e9a:	4602      	mov	r2, r0
10001e9c:	68fb      	ldr	r3, [r7, #12]
10001e9e:	1ad3      	subs	r3, r2, r3
10001ea0:	2b64      	cmp	r3, #100	; 0x64
10001ea2:	d901      	bls.n	10001ea8 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10001ea4:	2303      	movs	r3, #3
10001ea6:	e03f      	b.n	10001f28 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001ea8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001eac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001eb0:	f003 0302 	and.w	r3, r3, #2
10001eb4:	2b02      	cmp	r3, #2
10001eb6:	d1ee      	bne.n	10001e96 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ebc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001ec0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ec4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001ec8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10001ecc:	e02b      	b.n	10001f26 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001ece:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ed2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001ed6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001ede:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10001ee2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001eea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001eee:	f023 0301 	bic.w	r3, r3, #1
10001ef2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001ef6:	f7fe fa3b 	bl	10000370 <HAL_GetTick>
10001efa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001efc:	e008      	b.n	10001f10 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001efe:	f7fe fa37 	bl	10000370 <HAL_GetTick>
10001f02:	4602      	mov	r2, r0
10001f04:	68fb      	ldr	r3, [r7, #12]
10001f06:	1ad3      	subs	r3, r2, r3
10001f08:	2b64      	cmp	r3, #100	; 0x64
10001f0a:	d901      	bls.n	10001f10 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10001f0c:	2303      	movs	r3, #3
10001f0e:	e00b      	b.n	10001f28 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001f10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f14:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f18:	f003 0302 	and.w	r3, r3, #2
10001f1c:	2b02      	cmp	r3, #2
10001f1e:	d0ee      	beq.n	10001efe <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10001f20:	e001      	b.n	10001f26 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001f22:	2301      	movs	r3, #1
10001f24:	e000      	b.n	10001f28 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10001f26:	2300      	movs	r3, #0
}
10001f28:	4618      	mov	r0, r3
10001f2a:	3710      	adds	r7, #16
10001f2c:	46bd      	mov	sp, r7
10001f2e:	bd80      	pop	{r7, pc}
10001f30:	ffc0fe00 	.word	0xffc0fe00

10001f34 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10001f34:	b580      	push	{r7, lr}
10001f36:	b084      	sub	sp, #16
10001f38:	af00      	add	r7, sp, #0
10001f3a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10001f3c:	687b      	ldr	r3, [r7, #4]
10001f3e:	681b      	ldr	r3, [r3, #0]
10001f40:	2b00      	cmp	r3, #0
10001f42:	f000 8147 	beq.w	100021d4 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10001f46:	687b      	ldr	r3, [r7, #4]
10001f48:	681b      	ldr	r3, [r3, #0]
10001f4a:	2b02      	cmp	r3, #2
10001f4c:	f040 8119 	bne.w	10002182 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10001f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f54:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001f58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001f60:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10001f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f68:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001f6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f70:	f023 0301 	bic.w	r3, r3, #1
10001f74:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001f78:	f7fe f9fa 	bl	10000370 <HAL_GetTick>
10001f7c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10001f7e:	e008      	b.n	10001f92 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f80:	f7fe f9f6 	bl	10000370 <HAL_GetTick>
10001f84:	4602      	mov	r2, r0
10001f86:	68fb      	ldr	r3, [r7, #12]
10001f88:	1ad3      	subs	r3, r2, r3
10001f8a:	2b64      	cmp	r3, #100	; 0x64
10001f8c:	d901      	bls.n	10001f92 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10001f8e:	2303      	movs	r3, #3
10001f90:	e121      	b.n	100021d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10001f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f96:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001f9a:	f003 0302 	and.w	r3, r3, #2
10001f9e:	2b02      	cmp	r3, #2
10001fa0:	d0ee      	beq.n	10001f80 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10001fa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa6:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001faa:	f023 0203 	bic.w	r2, r3, #3
10001fae:	687b      	ldr	r3, [r7, #4]
10001fb0:	685b      	ldr	r3, [r3, #4]
10001fb2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001fb6:	4313      	orrs	r3, r2
10001fb8:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10001fbc:	e008      	b.n	10001fd0 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001fbe:	f7fe f9d7 	bl	10000370 <HAL_GetTick>
10001fc2:	4602      	mov	r2, r0
10001fc4:	68fb      	ldr	r3, [r7, #12]
10001fc6:	1ad3      	subs	r3, r2, r3
10001fc8:	2b64      	cmp	r3, #100	; 0x64
10001fca:	d901      	bls.n	10001fd0 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10001fcc:	2303      	movs	r3, #3
10001fce:	e102      	b.n	100021d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10001fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fd4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001fe0:	d1ed      	bne.n	10001fbe <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10001fe2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fe6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10001fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10001fee:	687b      	ldr	r3, [r7, #4]
10001ff0:	69db      	ldr	r3, [r3, #28]
10001ff2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ff6:	4313      	orrs	r3, r2
10001ff8:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10001ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002000:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002004:	4b76      	ldr	r3, [pc, #472]	; (100021e0 <RCCEx_PLL4_Config+0x2ac>)
10002006:	4013      	ands	r3, r2
10002008:	687a      	ldr	r2, [r7, #4]
1000200a:	68d2      	ldr	r2, [r2, #12]
1000200c:	1e51      	subs	r1, r2, #1
1000200e:	687a      	ldr	r2, [r7, #4]
10002010:	6892      	ldr	r2, [r2, #8]
10002012:	3a01      	subs	r2, #1
10002014:	0412      	lsls	r2, r2, #16
10002016:	430a      	orrs	r2, r1
10002018:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000201c:	4313      	orrs	r3, r2
1000201e:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10002022:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002026:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000202a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000202e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002032:	687a      	ldr	r2, [r7, #4]
10002034:	6912      	ldr	r2, [r2, #16]
10002036:	1e51      	subs	r1, r2, #1
10002038:	687a      	ldr	r2, [r7, #4]
1000203a:	6952      	ldr	r2, [r2, #20]
1000203c:	3a01      	subs	r2, #1
1000203e:	0212      	lsls	r2, r2, #8
10002040:	4311      	orrs	r1, r2
10002042:	687a      	ldr	r2, [r7, #4]
10002044:	6992      	ldr	r2, [r2, #24]
10002046:	3a01      	subs	r2, #1
10002048:	0412      	lsls	r2, r2, #16
1000204a:	430a      	orrs	r2, r1
1000204c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002050:	4313      	orrs	r3, r2
10002052:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000205a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000205e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002066:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000206a:	687b      	ldr	r3, [r7, #4]
1000206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000206e:	2b02      	cmp	r3, #2
10002070:	d003      	beq.n	1000207a <RCCEx_PLL4_Config+0x146>
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002076:	2b00      	cmp	r3, #0
10002078:	d10c      	bne.n	10002094 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000207a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000207e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002082:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000208a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000208e:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002092:	e00f      	b.n	100020b4 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002094:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002098:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000209c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100020a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100020a4:	687a      	ldr	r2, [r7, #4]
100020a6:	6a12      	ldr	r2, [r2, #32]
100020a8:	00d2      	lsls	r2, r2, #3
100020aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020ae:	4313      	orrs	r3, r2
100020b0:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100020b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b8:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100020bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100020c4:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100020c8:	687b      	ldr	r3, [r7, #4]
100020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100020cc:	2b02      	cmp	r3, #2
100020ce:	d124      	bne.n	1000211a <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100020d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020d4:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
100020d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100020dc:	687b      	ldr	r3, [r7, #4]
100020de:	6a99      	ldr	r1, [r3, #40]	; 0x28
100020e0:	687b      	ldr	r3, [r7, #4]
100020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100020e4:	4319      	orrs	r1, r3
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100020ea:	4319      	orrs	r1, r3
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100020f0:	4319      	orrs	r1, r3
100020f2:	687b      	ldr	r3, [r7, #4]
100020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100020f6:	041b      	lsls	r3, r3, #16
100020f8:	430b      	orrs	r3, r1
100020fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020fe:	4313      	orrs	r3, r2
10002100:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002104:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002108:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000210c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002110:	f043 0304 	orr.w	r3, r3, #4
10002114:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002118:	e009      	b.n	1000212e <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000211a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000211e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002126:	f023 0304 	bic.w	r3, r3, #4
1000212a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
1000212e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002132:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000213a:	f043 0301 	orr.w	r3, r3, #1
1000213e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002142:	f7fe f915 	bl	10000370 <HAL_GetTick>
10002146:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002148:	e008      	b.n	1000215c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000214a:	f7fe f911 	bl	10000370 <HAL_GetTick>
1000214e:	4602      	mov	r2, r0
10002150:	68fb      	ldr	r3, [r7, #12]
10002152:	1ad3      	subs	r3, r2, r3
10002154:	2b64      	cmp	r3, #100	; 0x64
10002156:	d901      	bls.n	1000215c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002158:	2303      	movs	r3, #3
1000215a:	e03c      	b.n	100021d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
1000215c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002160:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002164:	f003 0302 	and.w	r3, r3, #2
10002168:	2b02      	cmp	r3, #2
1000216a:	d1ee      	bne.n	1000214a <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000216c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002170:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002174:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002178:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000217c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002180:	e028      	b.n	100021d4 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002186:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000218a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002192:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002196:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000219a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000219e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021a2:	f023 0301 	bic.w	r3, r3, #1
100021a6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100021aa:	f7fe f8e1 	bl	10000370 <HAL_GetTick>
100021ae:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100021b0:	e008      	b.n	100021c4 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100021b2:	f7fe f8dd 	bl	10000370 <HAL_GetTick>
100021b6:	4602      	mov	r2, r0
100021b8:	68fb      	ldr	r3, [r7, #12]
100021ba:	1ad3      	subs	r3, r2, r3
100021bc:	2b64      	cmp	r3, #100	; 0x64
100021be:	d901      	bls.n	100021c4 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100021c0:	2303      	movs	r3, #3
100021c2:	e008      	b.n	100021d6 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100021c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100021cc:	f003 0302 	and.w	r3, r3, #2
100021d0:	2b02      	cmp	r3, #2
100021d2:	d0ee      	beq.n	100021b2 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
100021d4:	2300      	movs	r3, #0
}
100021d6:	4618      	mov	r0, r3
100021d8:	3710      	adds	r7, #16
100021da:	46bd      	mov	sp, r7
100021dc:	bd80      	pop	{r7, pc}
100021de:	bf00      	nop
100021e0:	ffc0fe00 	.word	0xffc0fe00

100021e4 <memset>:
100021e4:	4402      	add	r2, r0
100021e6:	4603      	mov	r3, r0
100021e8:	4293      	cmp	r3, r2
100021ea:	d100      	bne.n	100021ee <memset+0xa>
100021ec:	4770      	bx	lr
100021ee:	f803 1b01 	strb.w	r1, [r3], #1
100021f2:	e7f9      	b.n	100021e8 <memset+0x4>

100021f4 <__libc_init_array>:
100021f4:	b570      	push	{r4, r5, r6, lr}
100021f6:	4d0d      	ldr	r5, [pc, #52]	; (1000222c <__libc_init_array+0x38>)
100021f8:	4c0d      	ldr	r4, [pc, #52]	; (10002230 <__libc_init_array+0x3c>)
100021fa:	1b64      	subs	r4, r4, r5
100021fc:	10a4      	asrs	r4, r4, #2
100021fe:	2600      	movs	r6, #0
10002200:	42a6      	cmp	r6, r4
10002202:	d109      	bne.n	10002218 <__libc_init_array+0x24>
10002204:	4d0b      	ldr	r5, [pc, #44]	; (10002234 <__libc_init_array+0x40>)
10002206:	4c0c      	ldr	r4, [pc, #48]	; (10002238 <__libc_init_array+0x44>)
10002208:	f000 f818 	bl	1000223c <_init>
1000220c:	1b64      	subs	r4, r4, r5
1000220e:	10a4      	asrs	r4, r4, #2
10002210:	2600      	movs	r6, #0
10002212:	42a6      	cmp	r6, r4
10002214:	d105      	bne.n	10002222 <__libc_init_array+0x2e>
10002216:	bd70      	pop	{r4, r5, r6, pc}
10002218:	f855 3b04 	ldr.w	r3, [r5], #4
1000221c:	4798      	blx	r3
1000221e:	3601      	adds	r6, #1
10002220:	e7ee      	b.n	10002200 <__libc_init_array+0xc>
10002222:	f855 3b04 	ldr.w	r3, [r5], #4
10002226:	4798      	blx	r3
10002228:	3601      	adds	r6, #1
1000222a:	e7f2      	b.n	10002212 <__libc_init_array+0x1e>
1000222c:	100022a4 	.word	0x100022a4
10002230:	100022a4 	.word	0x100022a4
10002234:	100022a4 	.word	0x100022a4
10002238:	100022a8 	.word	0x100022a8

1000223c <_init>:
1000223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000223e:	bf00      	nop
10002240:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002242:	bc08      	pop	{r3}
10002244:	469e      	mov	lr, r3
10002246:	4770      	bx	lr

10002248 <_fini>:
10002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000224a:	bf00      	nop
1000224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000224e:	bc08      	pop	{r3}
10002250:	469e      	mov	lr, r3
10002252:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10002254 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000228c <LoopForever+0x2>
  movs  r1, #0
10002258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000225a:	e003      	b.n	10002264 <LoopCopyDataInit>

1000225c <CopyDataInit>:
  ldr  r3, =_sidata
1000225c:	4b0c      	ldr	r3, [pc, #48]	; (10002290 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000225e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10002262:	3104      	adds	r1, #4

10002264 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10002264:	480b      	ldr	r0, [pc, #44]	; (10002294 <LoopForever+0xa>)
  ldr  r3, =_edata
10002266:	4b0c      	ldr	r3, [pc, #48]	; (10002298 <LoopForever+0xe>)
  adds  r2, r0, r1
10002268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000226a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000226c:	d3f6      	bcc.n	1000225c <CopyDataInit>
  ldr  r2, =_sbss
1000226e:	4a0b      	ldr	r2, [pc, #44]	; (1000229c <LoopForever+0x12>)
  b  LoopFillZerobss
10002270:	e002      	b.n	10002278 <LoopFillZerobss>

10002272 <FillZerobss>:
  movs  r3, #0
10002272:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002274:	f842 3b04 	str.w	r3, [r2], #4

10002278 <LoopFillZerobss>:
  ldr  r3, = _ebss
10002278:	4b09      	ldr	r3, [pc, #36]	; (100022a0 <LoopForever+0x16>)
  cmp  r2, r3
1000227a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000227c:	d3f9      	bcc.n	10002272 <FillZerobss>
  bl  SystemInit
1000227e:	f7fd fedf 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002282:	f7ff ffb7 	bl	100021f4 <__libc_init_array>
  bl main
10002286:	f7fd ff01 	bl	1000008c <main>

1000228a <LoopForever>:
    b LoopForever
1000228a:	e7fe      	b.n	1000228a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000228c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002290:	100022ac 	.word	0x100022ac
  ldr  r0, =_sdata
10002294:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002298:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
1000229c:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
100022a0:	1002002c 	.word	0x1002002c
